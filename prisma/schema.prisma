generator client {
  provider       = "prisma-client-js"
  previewFeature = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id @unique @default(uuid())

  name     String @db.VarChar(50)
  email    String @unique @db.VarChar(50)
  cpf      String @unique @db.VarChar(14)
  password String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userCategory     UserCategory? @relation(fields: [userCategoryName], references: [name], onDelete: SetNull)
  userCategoryName String?       @map("user_category_name")

  @@map("admin")
}

model User {
  id       String @id @default(uuid())
  name     String @db.VarChar(50)
  cpf      String @unique @db.VarChar(14)
  email    String @unique @db.VarChar(50)
  password String

  userPlan   UserPlan? @relation(fields: [userPlanId], references: [id], onDelete: SetNull)
  userPlanId String?   @map("user_plan_id")

  userCategory     UserCategory? @relation(fields: [userCategoryName], references: [name], onDelete: SetNull)
  userCategoryName String?       @map("user_category_name")

  profiles Profile[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model UserPlan {
  id String @id @default(uuid())

  name        String @unique @db.VarChar(30)
  price       Float
  accounts    Int
  description String @db.VarChar(500)

  users User[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_plan")
}

model UserCategory {
  id   String @id @default(uuid())
  name String @unique

  users   User[]
  admins  Admin[]
  artists Artist[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_category")
}

model Profile {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(20)
  image       String   @db.VarChar(300)
  userSpotify Boolean? @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  songs             ProfileFavoriteSong[]
  playlists         Playlist[]
  favoritePlaylists ProfileFavoritePlaylist[]

  @@map("profile")
}

model Artist {
  id String @id @default(uuid())

  name     String @db.VarChar(50)
  image    String @db.VarChar(300)
  cpf      String @unique @db.VarChar(14)
  email    String @unique @db.VarChar(50)
  password String
  about    String @db.VarChar(300)

  userCategory     UserCategory? @relation(fields: [userCategoryName], references: [name], onDelete: SetNull)
  userCategoryName String?       @map("user_category_name")

  countryRelacion Country? @relation(fields: [countryId], references: [id], onDelete: SetNull)
  countryId       String?

  albums Album[]

  songs Song[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("artist")
}

model Country {
  id String @id @default(uuid())

  name String @unique
  code String @unique

  artists Artist[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("country")
}

model Album {
  id String @id @default(uuid())

  name  String @db.VarChar(40)
  year  Int
  image String @db.VarChar(300)

  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String @map("artist_id")

  songs Song[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("album")
}

model Song {
  id      String @id @default(uuid())
  name    String @db.VarChar(50)
  songUrl String @map("song_url") @db.VarChar(2000)

  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String @map("album_id")

  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String @map("artist_id")

  CategorySongs CategorySong[]

  profiles ProfileFavoriteSong[]

  playlists PlaylistSong[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("song")
}

model ProfileFavoriteSong {
  id String @id @default(uuid())

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @map("profile_id")

  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String @map("song_id")

  @@unique([profileId, songId])
  @@map("profile_favorite_song")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  CategorySongs CategorySong[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
}

model CategorySong {
  id String @id @default(uuid())

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @map("category_id")

  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String @map("song_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category_song")
}

model Playlist {
  id String @id @default(uuid())

  name    String
  image   String
  private Boolean

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @map("profile_id")

  songs                    PlaylistSong[]
  profilesFavoritePlaylist ProfileFavoritePlaylist[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("playlist")
}

model PlaylistSong {
  id String @id @default(uuid())

  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String   @map("playlist_id")

  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String @map("song_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@unique([playlistId, songId])
  @@map("playlist_song")
}

model ProfileFavoritePlaylist {
  id String @id @default(uuid())

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @map("profile_id")

  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String   @map("playlist_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([profileId, playlistId])
  @@map("profile_favorite_playlist")
}
