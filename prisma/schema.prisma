generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id @unique @default(uuid())

  name     String @db.VarChar(50)
  email    String @unique
  cpf      String @unique
  password String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userCategory     UserCategory @relation(fields: [userCategoryName], references: [name])
  userCategoryName String       @map("user_category_name")

  @@map("admin")
}

model User {
  id       String @id @default(uuid())
  name     String @db.VarChar(50)
  cpf      String @unique
  email    String @unique
  password String

  userPlan   UserPlan @relation(fields: [userPlanId], references: [id])
  userPlanId String   @map("user_plan_id")

  userCategory     UserCategory @relation(fields: [userCategoryName], references: [name])
  userCategoryName String       @map("user_category_name")

  profiles Profile[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model UserPlan {
  id String @id @default(uuid())

  name        String @unique
  price       Float
  accounts    Int
  description String

  users User[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_plan")
}

model UserCategory {
  id   String @id @default(uuid())
  name String @unique

  users   User[]
  admins  Admin[]
  artists Artist[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_category")
}

model Profile {
  id    String @id @default(uuid())
  name  String
  image String

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  musics ProfileFavoriteMusic[]

  @@map("profile")
}

model Artist {
  id String @id @default(uuid())

  name     String
  image    String
  cpf      String @unique
  email    String @unique
  password String
  about    String

  userCategory     UserCategory @relation(fields: [userCategoryName], references: [name])
  userCategoryName String       @map("user_category_name")

  countryRelacion Country @relation(fields: [countryId], references: [id])
  countryId       String

  albums Album[]

  musics Music[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("artist")
}

model Country {
  id String @id @default(uuid())

  name String @unique
  code String @unique

  artists Artist[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("country")
}

model Album {
  id String @id @default(uuid())

  name  String @unique
  year  Int
  image String

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String @map("artist_id")

  musics Music[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("album")
}

model Music {
  id       String @id @default(uuid())
  name     String
  musicUrl String @map("music_url")

  album   Album  @relation(fields: [albumId], references: [id])
  albumId String @map("album_id")

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String @map("artist_id")

  // CategoryMusic CategoryMusic[]

  profiles ProfileFavoriteMusic[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("music")
}

model ProfileFavoriteMusic {
  id String @id @default(uuid())

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @map("profile_id")

  music   Music  @relation(fields: [musicId], references: [id])
  musicId String @map("music_id")

  @@unique([profileId, musicId])
  @@map("profile_favorite_music")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  // CategoryMusic CategoryMusic[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
}

// model CategoryMusic {
//   id String @id @default(uuid())

//   category   Category @relation(fields: [categoryId], references: [id])
//   categoryId String   @map("category_id")

//   music   Music  @relation(fields: [musicId], references: [id])
//   musicId String @map("music_id")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("category_music")
// }
