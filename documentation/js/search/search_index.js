var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddSongPlaylistDto.html",[0,0.23,1,2.822]],["body/classes/AddSongPlaylistDto.html",[0,0.363,1,4.448,2,1.051,3,0.142,4,0.126,5,0.11,6,5.689,7,4.913,8,3.492,9,0.526,10,1.711,11,5.689,12,4.601,13,0.698,14,0.012,15,0.977,16,1.711,17,4.448,18,1.65,19,6.613,20,5.525,21,3.956,22,3.011,23,6.524,24,6.524,25,6.524,26,6.524,27,6.524,28,0.726,29,4.481,30,6.524,31,6.524,32,6.524,33,6.524,34,6.524,35,5.122,36,0.395,37,2.963,38,1.019,39,4.349,40,2.04,41,0.142,42,2.426,43,0.009,44,0.009]],["title/classes/Admin.html",[0,0.23,45,1.708]],["body/classes/Admin.html",[0,0.302,2,1.112,3,0.15,4,0.133,5,0.117,9,0.557,10,1.773,13,0.879,14,0.012,15,1.09,18,1.608,28,0.914,41,0.15,43,0.009,44,0.009,45,2.79,46,4.742,47,4.037,48,1.611,49,3.693,50,3.403,51,1.059,52,3.274,53,3.693,54,5.42,55,3.709,56,5.42,57,5.42,58,5.42,59,5.42,60,5.42,61,5.42]],["title/controllers/AdminController.html",[62,1.191,63,3.025]],["body/controllers/AdminController.html",[0,0.198,3,0.098,4,0.087,5,0.077,9,0.365,13,0.736,14,0.012,15,0.925,16,1.804,18,1.701,28,0.766,36,0.465,38,0.707,41,0.098,43,0.007,44,0.007,45,3.552,48,1.369,51,0.988,62,1.022,63,3.721,64,1.022,65,3.108,66,1.707,67,1.377,68,1.603,69,2.106,70,1.831,71,2.262,72,1.959,73,1.946,74,4.431,75,2.276,76,1.66,77,6.45,78,3.552,79,1.918,80,2.574,81,1.918,82,2.596,83,3.552,84,3.552,85,3.552,86,2.596,87,5.15,88,2.815,89,4.431,90,5.091,91,3.552,92,2.815,93,3.552,94,3.552,95,2.596,96,4.431,97,3.552,98,2.665,99,2.928,100,3.552,101,2.86,102,1.707,103,1.707,104,1.707,105,1.78,106,1.78,107,1.707,108,0.623,109,1.707,110,1.054,111,2.447,112,3.306,113,1.641,114,1.946,115,2.351,116,2.152,117,2.815,118,3.552,119,3.813,120,3.108,121,1.277,122,3.108,123,1.277,124,3.108,125,3.108,126,3.552,127,3.552,128,1.707,129,1.122,130,1.054,131,2.276,132,3.177,133,3.552,134,1.86,135,3.552,136,3.552,137,3.552,138,3.552,139,3.552,140,5.091,141,3.552,142,2.815,143,3.108,144,3.552,145,3.552,146,1.78,147,3.552,148,3.552]],["title/modules/AdminModule.html",[149,1.154,150,2.822]],["body/modules/AdminModule.html",[0,0.307,3,0.152,4,0.136,5,0.119,14,0.012,36,0.483,41,0.152,43,0.009,44,0.009,63,5.427,64,1.965,108,0.967,110,1.636,119,5.21,120,4.823,149,1.906,150,5.678,151,2.196,152,2.722,153,4.823,154,4.823,155,4.823,156,3.238,157,2.925,158,2.36,159,2.275,160,5.513,161,3.036,162,3.156,163,2.65,164,2.65,165,5.513,166,2.65,167,2.65,168,2.275]],["title/injectables/AdminService.html",[119,2.653,169,1.053]],["body/injectables/AdminService.html",[0,0.171,3,0.085,4,0.075,5,0.066,9,0.315,10,1.2,13,0.754,14,0.012,15,1.001,18,1.669,28,0.806,36,0.448,41,0.085,43,0.006,44,0.006,45,2.806,47,2.507,48,1.353,50,2.8,51,1.098,52,1.364,67,1.237,68,1.496,69,1.856,70,2.18,71,2.033,72,2.104,73,2.507,74,4.134,76,1.492,79,1.896,80,2.445,81,1.896,96,4.134,108,0.538,119,2.932,121,1.104,122,2.685,123,1.104,124,2.685,125,2.685,129,0.97,130,0.911,134,1.754,169,1.164,170,1.267,171,2.685,172,5.47,173,3.606,174,3.119,175,1.364,176,1.418,177,2.332,178,3.069,179,2.526,180,3.069,181,2.995,182,3.626,183,3.069,184,3.069,185,4.003,186,3.069,187,3.119,188,3.069,189,3.626,190,3.069,191,2.432,192,2.685,193,2.685,194,3.479,195,3.998,196,3.269,197,3.069,198,4.003,199,1.607,200,1.538,201,3.119,202,1.418,203,2.093,204,2.093,205,2.432,206,1.314,207,1.314,208,1.418,209,3.626,210,4.805,211,2.595,212,1.391,213,3.347,214,1.859,215,2.199,216,2.432,217,3.141,218,2.113,219,3.069,220,2.694,221,3.069,222,3.626,223,3.119,224,1.765,225,4.805,226,6.063,227,1.765,228,3.626,229,2.432,230,1.859,231,3.626,232,3.069,233,2.432,234,1.364]],["title/classes/Album.html",[0,0.23,235,1.99]],["body/classes/Album.html",[0,0.302,2,1.112,3,0.15,4,0.133,5,0.117,9,0.557,10,1.773,13,0.879,14,0.012,15,1.073,18,1.608,28,0.914,41,0.15,43,0.009,44,0.009,48,1.611,49,3.693,51,1.059,53,3.693,55,3.709,235,3.25,236,4.742,237,4.722,238,3.154,239,5.839,240,5.42,241,5.42,242,5.42,243,5.42,244,5.42,245,5.42,246,4.609,247,5.42]],["title/controllers/AlbumController.html",[62,1.191,248,3.025]],["body/controllers/AlbumController.html",[0,0.191,3,0.095,4,0.084,5,0.074,9,0.353,13,0.727,14,0.012,15,0.985,16,1.781,28,0.756,36,0.453,38,0.684,41,0.095,43,0.007,44,0.007,48,1.351,51,0.976,62,0.989,64,0.989,66,1.652,67,1.345,68,1.579,69,2.079,70,1.788,71,2.209,72,2.247,75,2.203,79,1.894,80,2.688,81,1.894,87,5.073,88,2.724,89,3.39,98,2.602,99,4.3,101,2.808,102,1.652,103,1.652,104,1.652,105,1.723,106,1.723,107,1.652,108,0.603,109,1.652,110,1.02,111,2.39,112,3.27,113,1.588,115,1.588,121,1.236,123,1.236,128,1.652,129,1.086,130,1.02,131,2.203,132,3.137,134,1.837,146,1.723,235,3.662,248,3.634,249,3.007,250,3.007,251,3.712,252,4.102,253,4.35,254,4.35,255,3.437,256,2.724,257,5.788,258,3.437,259,3.437,260,3.437,261,3.437,262,3.634,263,3.437,264,3.437,265,3.437,266,3.94,267,3.437,268,2.724,269,4.364,270,3.437,271,3.437,272,2.724,273,3.186,274,2.512,275,3.744,276,3.007,277,3.94,278,3.437,279,3.437,280,3.007,281,3.437,282,3.437,283,3.437,284,3.437,285,3.437,286,5.841,287,3.437,288,3.437,289,3.437,290,3.437,291,2.724,292,3.437]],["title/modules/AlbumModule.html",[149,1.154,293,2.822]],["body/modules/AlbumModule.html",[0,0.307,3,0.152,4,0.136,5,0.119,14,0.012,36,0.483,41,0.152,43,0.009,44,0.009,64,1.965,108,0.967,110,1.636,149,1.906,151,2.196,152,2.722,156,3.238,157,2.925,158,2.36,159,2.275,161,3.036,162,3.156,163,2.65,164,2.65,166,2.65,167,2.65,168,2.275,248,5.427,275,5.21,276,4.823,293,5.678,294,4.823,295,4.823,296,5.513,297,5.513,298,5.513]],["title/injectables/AlbumService.html",[169,1.053,275,2.653]],["body/injectables/AlbumService.html",[0,0.167,3,0.083,4,0.074,5,0.065,9,0.309,13,0.749,14,0.012,15,1.089,18,1.682,28,0.779,36,0.424,41,0.083,43,0.006,44,0.006,48,1.392,51,1.12,67,1.219,68,1.333,69,1.654,70,1.62,71,2.002,72,2.079,76,1.47,79,1.951,80,2.587,81,1.882,108,0.527,121,1.081,123,1.081,129,0.95,130,0.892,134,1.825,169,1.146,170,1.241,173,3.595,175,1.336,176,1.389,177,2.309,179,2.496,181,3.117,194,3.664,196,3.364,199,1.574,200,1.507,202,1.389,206,1.287,207,1.287,208,1.389,211,2.313,213,3.198,215,1.446,217,2.969,218,2.081,220,2.401,224,1.73,227,1.73,234,2.002,235,2.166,237,4.716,238,2.569,251,1.929,252,3.846,257,5.944,262,4.387,269,4.092,275,2.888,277,3.571,299,2.631,300,4.506,301,3.007,302,3.942,303,3.007,304,3.571,305,3.007,306,4.506,307,3.007,308,4.506,309,3.007,310,4.506,311,3.007,312,3.942,313,3.007,314,3.007,315,3.007,316,5.404,317,3.072,318,3.007,319,2.166,320,1.648,321,5.404,322,2.888,323,2.631,324,3.007]],["title/controllers/AppController.html",[62,1.191,325,3.025]],["body/controllers/AppController.html",[0,0.262,3,0.13,4,0.116,5,0.102,9,0.484,13,0.504,14,0.012,16,1.236,28,0.524,36,0.444,38,0.937,41,0.13,42,1.752,43,0.009,44,0.009,48,0.937,51,0.677,62,1.778,64,1.355,67,1.672,79,1.314,81,1.724,104,2.265,108,0.826,112,2.855,113,2.176,129,1.489,130,1.398,132,2.176,134,1.274,191,4.899,211,2.017,325,4.518,326,4.122,327,5.408,328,4.712,329,6.828,330,4.122,331,3.961,332,6.181,333,6.185,334,4.712,335,6.181,336,6.181,337,6.181,338,5.408,339,6.181,340,6.181,341,7.804,342,7.059,343,5.353,344,7.323,345,6.181,346,4.214,347,6.181,348,7.323,349,5.467,350,4.421,351,4.122,352,4.712,353,4.712,354,4.122,355,4.712,356,4.712,357,4.712]],["title/modules/AppModule.html",[149,1.154,358,3.025]],["body/modules/AppModule.html",[0,0.222,3,0.11,4,0.098,5,0.086,14,0.012,36,0.505,41,0.11,43,0.008,44,0.008,64,1.589,108,0.699,149,1.541,150,5.067,151,1.589,152,2.201,156,2.96,157,2.365,158,1.707,159,1.646,161,2.455,162,2.552,212,1.015,293,5.067,325,4.633,350,4.763,351,3.49,358,6.319,359,3.49,360,3.49,361,3.49,362,5.067,363,5.067,364,5.067,365,5.067,366,5.067,367,5.067,368,5.067,369,5.067,370,5.067,371,5.067,372,3.989,373,3.989,374,3.989,375,3.989,376,3.989,377,3.989,378,3.989,379,3.989,380,3.989,381,3.989,382,1.535,383,3.027,384,2.72,385,3.989,386,3.989,387,3.989,388,2.72,389,3.989,390,3.989]],["title/injectables/AppService.html",[169,1.053,350,2.653]],["body/injectables/AppService.html",[0,0.322,3,0.16,4,0.142,5,0.125,9,0.594,13,0.619,14,0.012,15,1.046,28,0.644,36,0.35,41,0.16,43,0.01,44,0.01,48,1.151,51,0.831,67,1.903,79,1.613,81,1.613,108,1.014,134,1.564,169,1.79,170,2.387,327,6.157,333,5.577,350,4.51,354,6.157,391,5.06,392,7.037,393,5.784,394,7.037,395,5.06,396,4.584,397,5.06,398,5.784]],["title/classes/Artist.html",[0,0.23,251,1.772]],["body/classes/Artist.html",[0,0.279,2,1.03,3,0.139,4,0.123,5,0.108,9,0.516,10,1.689,13,0.897,14,0.012,15,1.112,18,1.552,28,0.933,41,0.139,43,0.009,44,0.009,47,3.896,48,1.579,49,3.563,50,3.284,51,1.022,52,3.16,53,3.563,55,3.606,238,3.044,251,2.756,399,4.391,400,6.221,401,7.11,402,5.018,403,5.018,404,5.018,405,5.018,406,5.018,407,5.018,408,5.018,409,5.018,410,5.018,411,5.018,412,5.018]],["title/controllers/ArtistController.html",[62,1.191,413,3.025]],["body/controllers/ArtistController.html",[0,0.168,3,0.083,4,0.074,5,0.065,9,0.309,13,0.749,14,0.012,15,0.952,16,1.888,18,1.607,28,0.801,36,0.467,38,0.599,41,0.083,43,0.006,44,0.006,45,2.971,48,1.393,51,1.006,62,0.866,64,0.866,66,1.448,67,1.22,68,1.482,69,1.656,70,2.16,71,2.004,72,1.735,73,1.65,75,1.93,76,1.471,79,1.952,80,2.428,81,2.008,89,4.095,98,2.361,99,3.883,101,2.168,102,1.448,103,1.448,104,1.448,105,1.509,106,1.509,107,1.448,108,0.528,109,1.448,110,0.893,111,3.461,112,3.4,113,1.391,114,1.65,115,2.498,116,1.824,121,1.083,123,1.083,128,3.365,129,0.951,130,0.893,131,1.93,132,3.325,134,1.947,142,2.387,146,2.261,187,2.053,212,1.376,220,2.004,237,2.891,251,3.65,256,2.387,268,2.387,273,1.93,274,2.201,291,2.387,331,2.891,413,3.297,414,2.635,415,3.946,416,3.946,417,3.946,418,3.849,419,3.011,420,3.011,421,3.849,422,3.011,423,3.011,424,3.011,425,3.011,426,3.011,427,2.891,428,3.946,429,4.759,430,3.011,431,3.011,432,3.011,433,2.635,434,3.011,435,2.594,436,3.011,437,3.011,438,3.011,439,3.011,440,4.095,441,3.011,442,3.011,443,1.93,444,1.576,445,1.732,446,1.732,447,3.466,448,2.635,449,3.575,450,2.635,451,3.011,452,3.011,453,2.635,454,3.011,455,3.011,456,3.011,457,3.011,458,2.201,459,3.011,460,3.011,461,3.011,462,3.011,463,3.011,464,3.011,465,3.011,466,3.011,467,3.011,468,2.635,469,3.011,470,3.011,471,3.011,472,3.011,473,3.011]],["title/modules/ArtistModule.html",[149,1.154,362,2.822]],["body/modules/ArtistModule.html",[0,0.307,3,0.152,4,0.136,5,0.119,14,0.012,36,0.483,41,0.152,43,0.009,44,0.009,64,1.965,108,0.967,110,1.636,149,1.906,151,2.196,152,2.722,156,3.238,157,2.925,158,2.36,159,2.275,161,3.036,162,3.156,163,2.65,164,2.65,166,2.65,167,2.65,168,2.275,362,5.678,413,5.427,447,5.21,448,4.823,474,4.823,475,5.513,476,4.823,477,5.513,478,5.513]],["title/injectables/ArtistService.html",[169,1.053,447,2.653]],["body/injectables/ArtistService.html",[0,0.132,3,0.066,4,0.058,5,0.051,9,0.244,13,0.713,14,0.012,15,1.005,18,1.74,21,1.963,28,0.763,36,0.415,41,0.066,43,0.005,44,0.005,47,1.299,48,1.325,50,1.732,51,1.151,52,1.053,67,1.014,68,1.148,69,1.877,70,1.903,71,1.667,72,1.791,73,2.055,76,1.726,79,1.857,80,2.073,81,1.857,108,0.416,121,0.852,123,0.852,129,0.749,130,0.703,134,1.801,169,0.954,170,0.978,173,3.576,175,1.053,176,1.095,177,2.036,179,2.15,181,3.076,187,2.557,194,3.851,195,2.741,196,3.601,199,1.241,200,1.188,201,2.557,202,1.095,203,1.616,204,1.616,205,1.878,206,1.014,207,1.014,208,1.095,209,2.972,210,4.194,211,2.625,213,3.184,215,1.803,216,1.878,217,3.076,218,2.444,220,2.352,222,1.878,223,2.557,224,2.157,227,2.157,229,1.878,230,1.436,231,2.972,233,1.878,234,2.352,235,1.139,237,4.395,238,2.749,239,1.878,251,1.605,262,3.402,304,2.972,312,3.281,317,4.541,319,3.088,320,2.55,322,3.695,323,2.073,415,3.281,416,3.281,417,3.281,418,3.391,428,4.072,433,3.281,435,3.316,440,3.608,447,2.404,449,2.972,450,2.073,479,2.073,480,2.37,481,2.37,482,2.37,483,3.75,484,2.37,485,2.37,486,2.37,487,2.37,488,3.75,489,2.37,490,2.37,491,2.37,492,1.732,493,2.073,494,2.073,495,2.37,496,4.072,497,2.37,498,4.072,499,3.281,500,4.654,501,3.173,502,2.37,503,2.37,504,2.073,505,2.37,506,2.073,507,2.37,508,2.073]],["title/controllers/AuthController.html",[62,1.191,509,3.025]],["body/controllers/AuthController.html",[0,0.167,3,0.083,4,0.074,5,0.065,9,0.308,13,0.769,14,0.012,16,1.833,28,0.778,36,0.476,38,0.597,41,0.083,43,0.006,44,0.006,45,3.272,48,1.391,51,1.004,62,0.863,64,0.863,66,1.442,67,1.216,79,1.95,81,1.95,99,3.103,101,2.162,102,1.442,103,1.442,106,1.503,107,1.442,108,0.526,109,1.442,110,0.89,111,3.087,112,3.321,113,1.385,114,1.643,116,1.817,128,2.881,129,0.948,130,0.89,132,3.229,134,2.106,212,2.11,251,3.394,272,2.377,273,1.922,274,2.192,382,2.306,443,1.922,444,2.354,445,1.725,446,1.725,509,3.287,510,2.624,511,2.999,512,3.934,513,3.934,514,4.72,515,3.934,516,2.999,517,2.999,518,6.741,519,6.741,520,2.999,521,2.999,522,2.999,523,2.999,524,2.624,525,5.446,526,7.19,527,2.999,528,7.19,529,6.29,530,7.19,531,5.698,532,2.999,533,2.624,534,2.999,535,2.999,536,2.624,537,3.284,538,4.902,539,2.999,540,2.999,541,2.624,542,2.999,543,2.999,544,3.934,545,2.999,546,2.999,547,2.999,548,3.458,549,2.624,550,2.624,551,3.934,552,2.045,553,2.045,554,2.624,555,2.624,556,2.999,557,2.999,558,5.994,559,2.999,560,2.999,561,2.999,562,2.999,563,2.999,564,2.999,565,2.999,566,2.999,567,2.999,568,2.999,569,2.999,570,2.999,571,2.999]],["title/modules/AuthModule.html",[149,1.154,363,2.822]],["body/modules/AuthModule.html",[0,0.286,3,0.142,4,0.126,5,0.111,14,0.012,36,0.492,41,0.142,43,0.009,44,0.009,64,1.882,108,0.902,110,1.527,149,1.825,151,2.05,152,2.606,156,3.183,157,2.801,158,2.202,159,2.124,161,2.908,162,3.022,163,2.474,164,2.474,166,2.474,167,2.474,168,2.124,363,5.699,509,5.259,548,5.121,549,4.502,572,4.502,573,5.145,574,4.502,575,5.447,576,5.145,577,5.145,578,4.078,579,5.145,580,5.145,581,5.145,582,5.145,583,4.502,584,5.145,585,5.145,586,5.145]],["title/injectables/AuthService.html",[169,1.053,548,2.653]],["body/injectables/AuthService.html",[0,0.161,3,0.08,4,0.071,5,0.062,9,0.296,13,0.711,14,0.012,18,1.15,28,0.702,36,0.449,41,0.08,43,0.006,44,0.006,45,2.174,48,1.256,50,3.752,51,1.065,52,3.348,67,1.181,69,1.613,76,2.25,79,1.76,81,1.639,108,0.506,130,1.295,134,1.589,168,2.174,169,1.11,170,1.19,173,3.394,175,1.94,176,1.332,177,2.26,179,2.016,181,2.433,194,3.48,195,3.191,196,3.193,201,2.976,202,1.332,206,1.234,207,1.234,208,1.332,211,3.269,212,1.755,213,3.065,214,2.645,215,2.825,217,2.714,218,3.186,225,2.285,234,1.281,251,2.255,317,1.966,319,1.386,382,1.679,446,1.658,496,2.523,512,3.819,513,3.819,514,3.819,515,3.819,524,3.819,525,5.409,531,4.656,533,3.819,536,3.819,537,3.219,538,4.703,541,3.819,544,3.819,548,2.798,550,2.523,551,3.819,552,1.966,553,1.966,554,2.523,555,2.523,578,2.285,587,2.523,588,5.876,589,2.883,590,2.883,591,2.883,592,2.883,593,2.883,594,1.966,595,2.798,596,6.641,597,5.81,598,6.641,599,5.268,600,3.819,601,5.876,602,2.883,603,2.392,604,4.365,605,1.848,606,2.883,607,2.883,608,3.819,609,3.819]],["title/classes/Category.html",[0,0.23,610,2.381]],["body/classes/Category.html",[0,0.323,2,1.19,3,0.16,4,0.143,5,0.125,9,0.596,10,1.849,13,0.845,14,0.012,15,1.021,18,1.658,28,0.879,41,0.16,43,0.01,44,0.01,48,1.637,49,3.805,51,1.091,53,3.805,55,3.797,610,4.054,611,5.074,612,5.799,613,5.799,614,5.799,615,5.799]],["title/controllers/CategoryController.html",[62,1.191,616,3.025]],["body/controllers/CategoryController.html",[0,0.19,3,0.094,4,0.084,5,0.074,9,0.351,13,0.682,14,0.012,15,0.983,16,1.776,18,1.541,28,0.753,36,0.468,38,0.679,41,0.094,43,0.007,44,0.007,45,3.451,48,1.269,51,0.916,62,0.981,64,0.981,66,1.64,67,1.337,68,1.574,69,2.073,70,2.293,71,2.197,72,2.238,76,1.613,79,1.779,80,2.619,81,1.888,82,2.493,95,2.493,98,2.588,101,2.796,102,1.64,103,1.64,104,1.64,105,1.709,106,1.709,107,1.64,108,0.598,109,1.64,110,1.012,111,2.377,112,3.261,113,1.575,114,2.709,115,2.284,116,2.067,121,1.227,123,1.227,128,1.64,129,1.078,130,1.012,132,3.127,134,1.831,146,1.709,212,1.479,427,4.088,429,3.918,443,2.186,444,1.785,445,1.962,446,1.962,610,3.669,616,3.614,617,2.984,618,2.703,619,4.088,620,3.918,621,4.989,622,3.411,623,3.411,624,5.453,625,4.945,626,3.411,627,7.061,628,3.411,629,6.378,630,4.945,631,3.411,632,5.816,633,3.411,634,2.984,635,3.918,636,4.945,637,3.411,638,4.349,639,4.945,640,3.411,641,3.727,642,2.984,643,3.918,644,3.411,645,3.411,646,2.703,647,3.411,648,3.411,649,5.816,650,3.411,651,3.411,652,4.945,653,3.411,654,2.703,655,3.411]],["title/modules/CategoryModule.html",[149,1.154,364,2.822]],["body/modules/CategoryModule.html",[0,0.307,3,0.152,4,0.136,5,0.119,14,0.012,36,0.483,41,0.152,43,0.009,44,0.009,64,1.965,108,0.967,110,1.636,149,1.906,151,2.196,152,2.722,156,3.238,157,2.925,158,2.36,159,2.275,161,3.036,162,3.156,163,2.65,164,2.65,166,2.65,167,2.65,168,2.275,364,5.678,616,5.427,641,5.21,642,4.823,656,4.823,657,5.513,658,4.823,659,5.513,660,5.513]],["title/injectables/CategoryService.html",[169,1.053,641,2.653]],["body/injectables/CategoryService.html",[0,0.193,3,0.096,4,0.085,5,0.075,9,0.357,13,0.76,14,0.012,15,1.025,18,1.598,28,0.815,36,0.43,41,0.096,43,0.007,44,0.007,48,1.413,51,1.097,67,1.354,68,1.449,69,1.798,70,2.312,71,2.224,72,1.926,73,2.743,76,1.632,79,1.981,80,2.554,81,1.981,108,0.608,121,1.247,123,1.247,129,1.096,130,1.029,134,1.921,169,1.273,170,1.432,173,3.668,174,3.413,175,1.542,176,1.602,177,2.473,179,2.712,181,3.28,194,3.28,196,2.823,199,2.62,200,1.739,202,1.602,206,1.485,207,1.485,208,1.602,211,2.752,213,3.253,215,1.668,217,2.969,218,2.312,220,2.857,227,1.995,234,2.224,319,1.668,320,1.901,322,3.763,610,2.879,619,4.12,621,3.032,624,5.478,634,4.379,638,4.383,641,3.208,643,3.967,661,3.035,662,3.469,663,3.469,664,5.005,665,3.469,666,3.469,667,5.005,668,3.469,669,3.469,670,5.005,671,3.469,672,3.469,673,6.429,674,5.005,675,3.469,676,3.469,677,5.005,678,3.469,679,3.469]],["title/classes/Country.html",[0,0.23,680,2.381]],["body/classes/Country.html",[0,0.315,2,1.163,3,0.157,4,0.139,5,0.122,9,0.582,10,1.823,13,0.86,14,0.012,15,1.058,18,1.641,28,0.895,41,0.157,43,0.01,44,0.01,48,1.628,49,3.767,51,1.08,53,3.767,55,3.767,680,3.997,681,4.958,682,5.494,683,5.667,684,5.667,685,5.667,686,5.667,687,5.667]],["title/controllers/CountryController.html",[62,1.191,688,3.025]],["body/controllers/CountryController.html",[0,0.197,3,0.098,4,0.087,5,0.076,9,0.363,13,0.735,14,0.012,15,0.991,16,1.801,18,1.778,28,0.764,36,0.456,38,0.703,41,0.098,43,0.007,44,0.007,45,3.551,48,1.366,51,0.987,62,1.017,64,1.017,66,1.699,67,1.372,68,1.6,69,2.102,70,1.824,71,2.255,72,2.283,75,2.266,76,1.655,79,1.915,80,2.647,81,1.915,82,2.584,86,2.584,87,5.139,88,2.801,92,2.801,95,2.584,98,2.656,101,2.853,102,1.699,103,1.699,104,1.699,105,1.772,106,1.772,107,1.699,108,0.62,109,1.699,110,1.049,111,2.439,112,3.301,113,1.633,114,2.78,115,1.633,116,2.142,121,1.271,123,1.271,128,1.699,129,1.117,130,1.049,131,2.266,132,3.172,134,1.857,146,1.772,266,5.139,443,2.266,618,2.801,646,2.801,654,2.801,680,4.411,688,3.708,689,3.093,690,4.156,691,3.535,692,3.535,693,3.535,694,3.535,695,4.439,696,3.535,697,3.535,698,3.535,699,4.421,700,3.535,701,3.535,702,3.803,703,3.093,704,4.021,705,3.535,706,3.535,707,3.535,708,2.801,709,3.535,710,3.535,711,3.093,712,5.934,713,3.535,714,3.535,715,3.535,716,3.535,717,3.535]],["title/modules/CountryModule.html",[149,1.154,365,2.822]],["body/modules/CountryModule.html",[0,0.307,3,0.152,4,0.136,5,0.119,14,0.012,36,0.483,41,0.152,43,0.009,44,0.009,64,1.965,108,0.967,110,1.636,149,1.906,151,2.196,152,2.722,156,3.238,157,2.925,158,2.36,159,2.275,161,3.036,162,3.156,163,2.65,164,2.65,166,2.65,167,2.65,168,2.275,365,5.678,688,5.427,702,5.21,703,4.823,718,4.823,719,5.513,720,4.823,721,5.513,722,5.513]],["title/injectables/CountryService.html",[169,1.053,702,2.653]],["body/injectables/CountryService.html",[0,0.193,3,0.096,4,0.085,5,0.075,9,0.355,13,0.759,14,0.012,15,1.025,18,1.746,28,0.814,36,0.43,41,0.096,43,0.007,44,0.007,48,1.411,51,1.113,67,1.351,68,1.446,69,1.529,70,2.308,71,2.219,72,2.255,73,2.737,76,1.629,79,1.978,80,2.551,81,1.978,108,0.606,121,1.244,123,1.244,129,1.093,130,1.026,134,1.841,169,1.27,170,1.427,173,3.666,174,3.405,175,1.537,176,1.597,177,2.47,179,2.307,181,3.144,182,3.958,185,4.369,187,3.405,189,3.958,194,3.623,196,3.086,199,1.81,202,1.597,206,1.48,207,1.48,208,1.597,211,2.748,213,3.153,217,2.965,218,2.307,220,2.853,227,1.989,228,4.645,230,2.095,234,2.219,319,1.663,320,1.895,680,4.207,682,4.285,690,4.114,699,4.377,702,3.201,704,3.958,723,3.026,724,3.458,725,3.458,726,3.458,727,3.458,728,3.458,729,3.458,730,3.458,731,3.458,732,5.862,733,4.994,734,3.458,735,3.458,736,3.458,737,3.458]],["title/classes/CreateAdminDto.html",[0,0.23,74,2.822]],["body/classes/CreateAdminDto.html",[0,0.324,2,0.885,3,0.119,4,0.106,5,0.093,9,0.443,10,1.528,13,0.79,14,0.012,15,1.048,16,1.936,22,3.228,28,0.822,36,0.353,37,3.141,38,0.858,40,1.718,41,0.119,42,2.745,43,0.008,44,0.008,45,3.265,47,4.046,50,3.41,51,0.948,52,2.933,74,3.973,212,1.482,343,4.259,738,6.657,739,3.773,740,4.5,741,2.612,742,5.098,743,6.657,744,4.819,745,4.312,746,4.312,747,4.312,748,5.827,749,5.827,750,4.312,751,3.152,752,5.098,753,4.312,754,4.312,755,3.773,756,5.098,757,5.098,758,5.098,759,4.312,760,3.417,761,4.259,762,4.259,763,4.259,764,5.098,765,3.773,766,4.312,767,3.973,768,3.398,769,3.549,770,3.417,771,3.152,772,3.152,773,3.773,774,3.417,775,4.312,776,3.773,777,3.152,778,3.152,779,3.773]],["title/classes/CreateAlbumDto.html",[0,0.23,252,2.653]],["body/classes/CreateAlbumDto.html",[0,0.358,2,1.028,3,0.138,4,0.123,5,0.108,9,0.515,10,1.686,13,0.76,14,0.012,15,0.969,16,1.863,22,3.16,28,0.79,36,0.389,37,3.094,38,0.996,40,1.994,41,0.138,42,2.641,43,0.009,44,0.009,51,1.114,235,3.814,238,3.318,239,6.143,246,4.384,252,4.121,346,4.384,768,3.603,769,3.091,780,6.557,781,3.968,782,3.968,783,6.43,784,6.43,785,5.007,786,3.66,787,5.626,788,6.43,789,6.43,790,5.007,791,5.007,792,6.43,793,6.43,794,5.007,795,5.626,796,4.384]],["title/classes/CreateArtistDto.html",[0,0.23,418,2.653]],["body/classes/CreateArtistDto.html",[0,0.273,2,0.691,3,0.093,4,0.083,5,0.073,9,0.346,10,1.284,13,0.795,14,0.012,15,1.051,16,1.949,22,3.24,28,0.827,36,0.297,37,3.127,38,0.669,40,1.34,41,0.093,42,2.763,43,0.007,44,0.007,47,3.69,50,3.11,51,0.968,52,3.367,55,2.354,235,2.354,238,2.883,251,3.482,262,3.579,400,5.049,418,3.138,635,3.88,680,2.816,740,3.935,741,3.84,744,4.321,751,2.459,760,2.667,761,3.579,762,3.579,763,3.579,767,3.338,768,3.487,769,3.487,771,2.459,772,2.459,777,2.459,778,2.459,796,3.338,797,6.629,798,2.667,799,6.338,800,6.338,801,6.338,802,4.896,803,4.896,804,4.283,805,7.027,806,4.896,807,4.896,808,4.896,809,4.896,810,4.896,811,4.283,812,4.896,813,4.896,814,4.283,815,4.896,816,4.896,817,4.283,818,4.896,819,4.896,820,6.338,821,4.283,822,4.283,823,4.896,824,4.896,825,4.283,826,3.88,827,4.896,828,3.365,829,4.283,830,3.365,831,4.896,832,4.896,833,4.896,834,4.896,835,4.896,836,3.365,837,2.944,838,4.896,839,4.896,840,3.365,841,4.896,842,3.365,843,2.944,844,4.896,845,3.365,846,3.365,847,2.944,848,3.365,849,2.944,850,2.944,851,2.944,852,2.944]],["title/classes/CreateCategoryDto.html",[0,0.23,619,2.653]],["body/classes/CreateCategoryDto.html",[0,0.393,2,1.193,3,0.161,4,0.143,5,0.125,9,0.597,10,1.851,13,0.622,14,0.012,15,0.913,16,1.525,22,2.812,28,0.647,36,0.428,37,2.914,38,1.157,40,2.316,41,0.161,42,2.162,43,0.01,44,0.01,51,1.164,610,4.06,619,4.524,621,4.277,768,3.394,769,3.394,786,4.25,804,6.176,853,6.176,854,4.608,855,5.814]],["title/classes/CreateCountryDto.html",[0,0.23,690,2.653]],["body/classes/CreateCountryDto.html",[0,0.376,2,1.112,3,0.15,4,0.133,5,0.117,9,0.557,10,1.773,13,0.723,14,0.012,15,0.997,16,1.773,22,3.073,28,0.752,36,0.409,37,3.041,38,1.078,40,2.159,41,0.15,42,2.514,43,0.009,44,0.009,51,1.141,680,4.437,682,5.803,690,4.333,741,3.283,768,3.542,769,3.542,770,4.295,825,5.915,826,5.358,856,6.446,857,4.295,858,5.42,859,5.42,860,5.42,861,5.42,862,5.42,863,4.742]],["title/classes/CreatePlaylistDto.html",[0,0.23,864,2.653]],["body/classes/CreatePlaylistDto.html",[0,0.359,2,1.032,3,0.139,4,0.124,5,0.108,6,5.95,7,4.812,9,0.517,10,1.691,13,0.762,14,0.012,15,0.971,16,1.867,22,3.164,28,0.792,36,0.391,37,3.099,38,1.001,39,3.047,40,2.003,41,0.139,42,2.647,43,0.009,44,0.009,51,1.115,238,3.047,346,4.397,429,5.11,595,4.562,768,3.422,769,3.1,782,3.986,786,3.676,796,4.397,864,4.133,865,3.986,866,5.642,867,6.449,868,5.03,869,5.642,870,5.03,871,5.642,872,5.03,873,6.449,874,5.642,875,5.642,876,5.642,877,5.03,878,6.449]],["title/classes/CreateProfileDto.html",[0,0.23,879,2.653]],["body/classes/CreateProfileDto.html",[0,0.376,2,1.11,3,0.149,4,0.133,5,0.117,9,0.556,10,1.77,13,0.722,14,0.012,15,0.996,16,1.77,22,3.07,28,0.751,36,0.409,37,3.038,38,1.076,40,2.154,41,0.149,42,2.51,43,0.009,44,0.009,51,1.14,238,3.15,346,4.602,382,2.965,768,3.538,769,3.245,782,4.285,786,3.952,796,4.602,866,5.906,879,4.326,880,6.439,881,3.952,882,6.75,883,5.407,884,6.75,885,6.75,886,5.407]],["title/classes/CreateProfileFavoriteSongDto.html",[0,0.23,887,3.28]],["body/classes/CreateProfileFavoriteSongDto.html",[0,0.385,2,1.151,3,0.155,4,0.138,5,0.121,8,3.825,9,0.577,10,1.811,12,4.796,13,0.6,14,0.012,15,0.893,16,1.471,17,3.825,18,1.508,21,3.615,22,2.751,28,0.624,29,4.908,36,0.418,37,2.851,38,1.116,39,4.184,40,2.235,41,0.155,42,2.086,43,0.01,44,0.01,382,2.657,383,4.279,887,5.473,888,4.426,889,6.043,890,6.043,891,6.043,892,6.043,893,6.043,894,6.043,895,6.043]],["title/classes/CreateSongDto.html",[0,0.23,896,2.653]],["body/classes/CreateSongDto.html",[0,0.332,2,0.915,3,0.123,4,0.11,5,0.096,8,3.04,9,0.458,10,1.563,13,0.767,14,0.012,15,1.03,16,1.879,17,3.04,18,1.301,21,4.173,22,3.175,28,0.797,36,0.361,37,3.082,38,0.887,39,3.61,40,1.776,41,0.123,42,2.664,43,0.008,44,0.008,51,1.073,68,1.47,194,2.059,235,2.865,257,4.906,346,4.063,501,4.576,610,3.427,624,4.906,741,2.701,768,2.865,769,2.865,796,4.063,843,3.9,896,3.819,897,6.533,898,6.269,899,6.269,900,6.269,901,6.269,902,6.269,903,4.458,904,5.959,905,5.213,906,4.458,907,5.213,908,5.959,909,5.959,910,5.959,911,5.959,912,5.959,913,4.458,914,5.213,915,5.213,916,5.959,917,5.959,918,4.458,919,5.959,920,4.458]],["title/classes/CreateUserDto.html",[0,0.23,921,2.653]],["body/classes/CreateUserDto.html",[0,0.312,2,0.837,3,0.113,4,0.1,5,0.088,9,0.419,10,1.471,13,0.8,14,0.012,15,1.055,16,1.962,17,2.779,18,1.224,22,3.252,28,0.833,36,0.34,37,3.164,38,0.811,39,3.397,40,1.624,41,0.113,42,2.782,43,0.008,44,0.008,47,3.967,50,3.344,51,1.04,52,3.521,212,2.04,223,3.823,740,4.371,741,2.47,744,4.708,751,2.979,760,3.23,761,4.099,762,4.099,763,4.099,767,3.823,768,3.319,769,3.48,771,2.979,772,2.979,777,2.979,778,2.979,829,4.906,837,3.566,847,3.566,849,3.566,850,3.566,851,3.566,852,3.566,891,4.906,892,4.906,893,4.906,894,4.906,895,4.906,921,3.594,922,6.706,923,3.23,924,5.609,925,4.076,926,4.076,927,5.608,928,4.076,929,4.906,930,4.076,931,5.608,932,5.608,933,4.076,934,4.076,935,4.906,936,4.906,937,4.906,938,4.076]],["title/classes/CreateUserPlanDto.html",[0,0.23,939,2.653]],["body/classes/CreateUserPlanDto.html",[0,0.317,2,0.857,3,0.115,4,0.103,5,0.09,9,0.429,10,1.495,13,0.746,14,0.012,15,0.902,16,1.829,22,3.128,28,0.776,36,0.345,37,3.014,38,0.831,40,1.663,41,0.115,42,2.961,43,0.008,44,0.008,51,1.049,212,2.099,246,5.138,319,2.007,435,3.279,621,3.454,741,3.454,768,3.51,769,3.121,795,5.679,937,4.988,939,3.653,940,4.423,941,6.388,942,3.309,943,4.978,944,5.337,945,5.701,946,7.048,947,4.988,948,4.175,949,6.102,950,5.701,951,4.988,952,5.701,953,5.701,954,4.988,955,5.701,956,5.701,957,5.701,958,4.988,959,4.988,960,5.701,961,4.988,962,5.701,963,4.988,964,5.701,965,5.701,966,5.701,967,4.518,968,4.988,969,4.988,970,5.701,971,5.701,972,4.518,973,4.175,974,4.175,975,4.175,976,4.175]],["title/injectables/JwtStrategy.html",[169,1.053,575,2.822]],["body/injectables/JwtStrategy.html",[0,0.245,3,0.122,4,0.108,5,0.095,9,0.453,13,0.763,14,0.012,15,0.764,28,0.658,36,0.45,41,0.122,43,0.008,44,0.008,45,2.943,48,1.176,50,3.294,51,0.849,67,1.599,69,2.042,76,1.437,79,1.649,81,1.229,108,0.772,110,1.307,129,1.392,130,1.307,134,1.804,168,1.818,169,1.504,170,1.818,173,2.965,175,1.958,176,2.035,177,2.743,179,2.731,181,2.035,202,2.035,206,1.886,207,1.886,208,2.035,211,3.052,212,1.814,213,2.965,214,2.669,215,3.207,217,3.082,218,2.035,225,3.491,234,1.958,251,3.052,317,3.004,575,4.031,583,3.854,594,3.004,600,3.854,603,3.656,608,3.854,609,3.854,876,3.854,977,3.854,978,5.912,979,4.405,980,5.912,981,5.912,982,4.405,983,4.405,984,4.405,985,4.405,986,4.405,987,3.854,988,2.208,989,4.405,990,4.405,991,4.405,992,4.405,993,4.405,994,4.405,995,4.405,996,6.672,997,3.854,998,3.491]],["title/classes/LoginDto.html",[0,0.23,525,2.822]],["body/classes/LoginDto.html",[0,0.379,2,1.123,3,0.151,4,0.135,5,0.118,9,0.562,10,1.784,13,0.728,14,0.012,15,1.001,16,1.784,22,3.084,28,0.757,36,0.412,37,3.055,38,1.089,40,2.18,41,0.151,42,2.529,43,0.009,44,0.009,50,3.677,52,3.538,212,1.969,525,4.637,741,3.316,744,4.637,751,4,767,4.637,768,3.558,769,3.27,929,5.951,999,4.788,1000,5.473,1001,5.951,1002,5.473]],["title/classes/LoginProfileDto.html",[0,0.23,538,2.822]],["body/classes/LoginProfileDto.html",[0,0.389,2,1.175,3,0.158,4,0.141,5,0.123,9,0.588,10,1.834,13,0.612,14,0.012,15,0.904,16,1.501,17,3.903,18,1.527,22,2.786,28,0.637,36,0.424,37,2.886,38,1.139,39,4.237,40,2.28,41,0.158,42,2.129,43,0.01,44,0.01,212,1.779,382,2.69,538,4.768,603,4.137,881,4.185,898,6.118,899,6.118,900,6.118,901,6.118,902,6.118,1003,5.542,1004,5.725]],["title/classes/LoginUserResponseDto.html",[0,0.23,553,2.822]],["body/classes/LoginUserResponseDto.html",[0,0.305,2,1.126,3,0.152,4,0.135,5,0.118,9,0.564,10,1.787,13,0.729,14,0.012,15,0.881,16,1.787,22,2.713,28,0.758,36,0.413,37,3.058,38,1.091,41,0.152,42,2.533,43,0.009,44,0.009,168,2.812,212,2.16,220,3.027,446,3.156,531,5.871,553,4.644,1001,5.96,1003,5.871,1005,4.8,1006,6.812,1007,6.812,1008,6.812,1009,6.812,1010,5.486,1011,6.812,1012,5.486]],["title/classes/Music.html",[0,0.23,621,2.508]],["body/classes/Music.html",[0,0.302,2,1.112,3,0.15,4,0.133,5,0.117,9,0.557,10,1.773,13,0.879,14,0.012,15,1.09,18,1.608,28,0.914,41,0.15,43,0.009,44,0.009,48,1.611,49,3.693,51,1.059,53,3.693,55,3.709,237,4.722,257,5.386,621,4.096,1013,4.742,1014,7.368,1015,5.42,1016,5.42,1017,5.42,1018,5.42,1019,5.42,1020,5.42,1021,5.42]],["title/classes/Playlist.html",[0,0.23,7,2.508]],["body/classes/Playlist.html",[0,0.302,2,1.112,3,0.15,4,0.133,5,0.117,7,4.096,9,0.557,10,1.773,13,0.879,14,0.012,15,1.073,18,1.608,28,0.914,41,0.15,43,0.009,44,0.009,48,1.611,49,3.693,51,1.059,53,3.693,55,3.709,238,3.154,595,4.722,603,4.037,871,5.915,1022,4.742,1023,5.42,1024,5.42,1025,5.42,1026,5.42,1027,5.42,1028,5.42,1029,5.42]],["title/controllers/PlaylistController.html",[62,1.191,1030,3.025]],["body/controllers/PlaylistController.html",[0,0.137,1,4.437,3,0.068,4,0.06,5,0.053,7,4.741,9,0.252,11,6.283,13,0.759,14,0.012,15,0.986,16,1.818,18,1.471,20,2.817,21,3.257,28,0.771,36,0.42,38,0.488,41,0.068,43,0.005,44,0.005,48,1.379,51,0.996,62,0.706,64,0.706,66,1.179,67,1.042,68,1.446,69,2.172,75,1.572,76,1.257,79,1.933,80,2.424,81,1.933,98,2.017,99,4.229,101,2.818,102,1.179,103,1.179,104,1.179,105,1.229,106,1.229,107,1.179,108,0.43,109,1.179,110,0.728,111,1.853,112,3.277,113,1.133,115,1.133,121,1.386,123,0.882,128,1.179,129,0.775,130,0.728,131,1.572,132,3.202,134,1.875,146,2.385,212,1.991,266,4.274,382,2.935,383,2.955,444,3.629,445,1.411,458,1.793,537,4.653,864,3.457,972,3.054,1030,2.817,1031,2.146,1032,4.164,1033,4.164,1034,4.164,1035,4.164,1036,3.372,1037,4.164,1038,4.164,1039,2.453,1040,3.854,1041,3.854,1042,4.596,1043,2.453,1044,2.453,1045,2.453,1046,5.897,1047,3.854,1048,3.854,1049,2.453,1050,1.944,1051,2.453,1052,1.944,1053,2.453,1054,3.772,1055,2.453,1056,2.453,1057,3.854,1058,2.453,1059,2.453,1060,3.854,1061,2.453,1062,2.453,1063,1.944,1064,2.453,1065,2.453,1066,2.453,1067,2.453,1068,2.453,1069,3.677,1070,2.453,1071,2.453,1072,1.572,1073,1.673,1074,3.054,1075,3.05,1076,2.146,1077,2.453,1078,2.453,1079,2.453,1080,5.897,1081,6.065,1082,2.453,1083,2.453,1084,2.453,1085,5.862,1086,2.453,1087,2.453,1088,2.453,1089,2.453,1090,2.453,1091,2.453,1092,2.453,1093,3.854,1094,2.453,1095,2.453,1096,2.453]],["title/modules/PlaylistModule.html",[149,1.154,366,2.822]],["body/modules/PlaylistModule.html",[0,0.307,3,0.152,4,0.136,5,0.119,14,0.012,36,0.483,41,0.152,43,0.009,44,0.009,64,1.965,108,0.967,110,1.636,149,1.906,151,2.196,152,2.722,156,3.238,157,2.925,158,2.36,159,2.275,161,3.036,162,3.156,163,2.65,164,2.65,166,2.65,167,2.65,168,2.275,366,5.678,1030,5.427,1075,5.21,1076,4.823,1097,4.823,1098,5.513,1099,4.823,1100,5.513,1101,5.513]],["title/injectables/PlaylistService.html",[169,1.053,1075,2.653]],["body/injectables/PlaylistService.html",[0,0.084,1,3.588,3,0.042,4,0.037,5,0.033,7,4.215,9,0.155,11,6.191,12,2.574,13,0.723,14,0.012,15,1.099,18,1.718,21,2.905,28,0.752,36,0.319,41,0.042,43,0.004,44,0.004,48,1.344,51,1.097,67,0.699,68,1.114,69,1.382,72,0.581,76,1.89,79,1.884,80,1.893,81,1.851,108,0.265,121,0.93,123,0.543,129,0.477,130,0.448,134,1.625,169,0.658,170,0.623,173,3.571,175,0.671,176,0.698,177,1.545,179,1.566,181,2.776,194,3.635,196,3.526,199,0.791,200,0.757,202,0.698,206,0.647,207,0.647,208,0.698,211,2.937,213,3.485,214,0.915,215,2.889,217,3.214,218,2.677,220,2.467,224,2.597,230,0.915,234,2.188,238,2.481,319,2.171,320,1.417,322,0.968,382,1.737,383,0.828,435,1.95,492,1.104,493,1.321,501,1.03,594,1.03,595,2.173,603,4.502,605,0.968,864,2.574,890,1.321,972,2.687,1032,2.967,1033,2.967,1034,2.967,1035,2.967,1036,2.263,1037,2.263,1038,2.967,1046,4.307,1069,2.738,1073,1.03,1074,2.049,1075,1.657,1102,1.321,1103,2.586,1104,2.586,1105,2.263,1106,2.586,1107,2.586,1108,1.51,1109,1.51,1110,1.51,1111,4.606,1112,1.51,1113,1.51,1114,2.586,1115,1.51,1116,2.049,1117,1.51,1118,2.049,1119,1.51,1120,1.51,1121,1.51,1122,1.51,1123,1.51,1124,2.586,1125,1.51,1126,2.586,1127,1.51,1128,2.586,1129,1.51,1130,2.263,1131,1.51,1132,2.586,1133,1.51,1134,2.586,1135,1.51,1136,1.51,1137,1.51,1138,4.856,1139,1.51,1140,1.51,1141,5.263,1142,2.586,1143,2.687,1144,4.016,1145,1.51,1146,2.586,1147,1.51,1148,1.51,1149,4.016,1150,4.923,1151,2.586,1152,2.586,1153,4.016,1154,2.586,1155,2.586,1156,1.321,1157,1.321,1158,1.51,1159,2.586,1160,1.51,1161,2.586,1162,1.51,1163,1.51,1164,1.51,1165,3.391,1166,2.586,1167,2.586,1168,1.51,1169,1.51,1170,1.51,1171,1.51,1172,1.51,1173,1.321,1174,1.321]],["title/modules/PrismaModule.html",[149,1.154,156,1.649]],["body/modules/PrismaModule.html",[0,0.325,3,0.162,4,0.144,5,0.126,14,0.012,36,0.429,41,0.162,43,0.01,44,0.01,108,1.025,149,1.975,151,2.328,152,2.821,156,3.323,157,3.031,158,2.502,159,2.412,161,3.147,177,3.308,1175,5.113,1176,5.113,1177,5.113,1178,5.845,1179,7.082,1180,5.845]],["title/injectables/PrismaService.html",[169,1.053,177,1.592]],["body/injectables/PrismaService.html",[0,0.305,3,0.152,4,0.135,5,0.118,9,0.564,13,0.587,14,0.012,28,0.758,36,0.413,41,0.152,43,0.009,44,0.009,48,1.091,51,0.788,67,1.842,79,1.53,81,1.9,108,0.962,169,1.733,170,2.264,173,3.659,177,2.621,200,2.749,213,3.027,988,3.414,1181,4.8,1182,7.409,1183,6.812,1184,8.12,1185,6.812,1186,7.748,1187,5.486,1188,5.486,1189,5.486,1190,5.486,1191,5.486,1192,5.486,1193,5.486]],["title/classes/Profile.html",[0,0.23,382,1.592]],["body/classes/Profile.html",[0,0.308,2,1.137,3,0.153,4,0.136,5,0.119,9,0.569,10,1.798,13,0.871,14,0.012,15,1.078,18,1.624,28,0.906,41,0.153,43,0.009,44,0.009,48,1.619,49,3.729,51,1.069,53,3.729,55,3.738,238,3.185,382,2.637,1111,5.074,1194,4.847,1195,5.54,1196,5.54,1197,5.54,1198,5.54,1199,5.54,1200,5.54]],["title/controllers/ProfileController.html",[62,1.191,1201,3.025]],["body/controllers/ProfileController.html",[0,0.205,3,0.102,4,0.09,5,0.079,9,0.378,13,0.746,14,0.012,15,0.936,16,1.732,18,1.442,28,0.735,36,0.469,38,0.732,41,0.102,43,0.007,44,0.007,48,1.314,51,0.949,62,1.059,64,1.059,66,1.769,67,1.412,68,1.721,69,2.217,70,1.878,72,2.335,76,1.703,79,1.842,80,2.737,81,1.842,89,3.56,98,2.733,99,3.799,101,2.917,102,1.769,103,1.769,104,1.769,105,1.844,106,1.844,107,1.769,108,0.645,109,1.769,110,1.092,111,2.51,112,3.221,113,1.7,115,1.7,121,1.323,123,1.323,128,1.769,129,1.163,130,1.092,132,3.05,134,1.786,146,1.844,212,2.04,382,2.929,444,3.457,445,2.117,446,2.117,458,2.69,537,4.606,552,3.56,603,4.171,605,3.346,620,2.917,879,4.233,1050,2.917,1052,2.917,1054,2.917,1063,2.917,1072,2.359,1201,3.817,1202,3.22,1203,3.22,1204,3.68,1205,3.68,1206,3.68,1207,3.22,1208,3.68,1209,3.68,1210,4.503,1211,3.68,1212,3.68,1213,3.889,1214,3.22,1215,3.22,1216,3.68,1217,3.68,1218,2.917,1219,3.68,1220,3.68,1221,5.222,1222,3.68,1223,3.68,1224,3.68]],["title/classes/ProfileFavoriteSong.html",[0,0.23,1225,3.28]],["body/classes/ProfileFavoriteSong.html",[0,0.362,2,1.336,3,0.18,4,0.16,5,0.14,14,0.011,41,0.18,43,0.01,44,0.01,383,4.136,888,4.171,1225,5.981,1226,5.694,1227,5.694]],["title/controllers/ProfileFavoriteSongController.html",[62,1.191,1228,3.025]],["body/controllers/ProfileFavoriteSongController.html",[0,0.222,3,0.11,4,0.098,5,0.086,9,0.41,13,0.732,14,0.012,15,0.961,16,1.662,20,4.038,21,3.76,28,0.705,36,0.45,38,0.794,41,0.11,43,0.008,44,0.008,48,1.261,51,0.911,62,1.147,64,1.147,66,1.918,67,1.494,68,1.564,69,2.094,70,1.987,79,1.768,81,1.768,89,3.767,102,1.918,103,1.918,104,1.918,105,1.999,107,1.918,108,0.699,109,1.918,110,1.184,111,2.656,112,3.16,113,1.842,115,1.842,128,1.918,130,1.184,132,2.927,134,1.714,146,1.999,175,1.773,212,1.827,382,2.988,383,4.457,384,4.665,421,3.541,435,3.178,444,3.318,445,2.294,537,4.565,595,2.556,888,4.385,959,3.49,1050,3.161,1052,3.161,1054,3.161,1072,2.556,1080,5.545,1081,5.545,1207,3.49,1215,3.49,1218,3.161,1228,4.038,1229,3.49,1230,5.986,1231,3.989,1232,3.989,1233,6.842,1234,3.989,1235,3.989,1236,3.989,1237,3.989,1238,3.541,1239,2.916,1240,3.989,1241,3.989,1242,3.989,1243,5.525,1244,3.989,1245,3.49,1246,3.989,1247,3.989,1248,3.989]],["title/modules/ProfileFavoriteSongModule.html",[149,1.154,367,2.822]],["body/modules/ProfileFavoriteSongModule.html",[0,0.301,3,0.149,4,0.133,5,0.117,14,0.012,36,0.481,41,0.149,43,0.009,44,0.009,64,1.942,108,0.948,110,1.604,149,1.883,151,2.154,152,2.689,156,3.223,157,2.889,158,2.314,159,2.231,161,3,162,3.118,163,2.599,164,2.599,166,2.599,167,2.599,168,2.231,367,5.657,382,2.597,383,4.224,384,3.686,888,3.465,1228,5.38,1238,5.185,1239,3.952,1249,4.73,1250,5.407,1251,4.73,1252,5.407,1253,4.73]],["title/injectables/ProfileFavoriteSongService.html",[169,1.053,1238,2.653]],["body/injectables/ProfileFavoriteSongService.html",[0,0.154,3,0.076,4,0.068,5,0.059,9,0.284,12,4.697,13,0.698,14,0.012,15,1.093,18,1.671,21,3.006,28,0.726,36,0.348,41,0.076,43,0.006,44,0.006,48,1.299,51,1.112,67,1.142,68,1.265,69,1.57,70,1.518,76,1.672,79,1.821,81,1.726,108,0.484,129,0.872,130,0.819,134,1.553,169,1.074,170,1.139,173,3.47,175,1.226,176,1.274,177,2.21,179,2.368,181,2.653,194,3.687,196,3.635,199,1.444,200,1.383,202,1.274,206,1.181,207,1.181,208,1.274,211,2.458,213,3.192,214,1.671,215,2.465,217,2.859,218,2.368,220,1.876,224,2.428,234,2.278,235,2.029,238,1.807,251,1.807,319,2.465,320,2.313,382,2.21,383,4.314,384,4.632,435,3.304,501,2.878,603,4.464,605,1.768,888,4.354,1111,4.22,1116,3.345,1118,3.345,1143,3.345,1230,5.025,1238,2.705,1254,2.414,1255,4.221,1256,4.221,1257,2.759,1258,2.759,1259,2.759,1260,3.693,1261,2.759,1262,4.221,1263,2.759,1264,4.221,1265,2.759,1266,5.127,1267,2.759,1268,4.221,1269,4.221,1270,2.759,1271,2.759,1272,2.759,1273,4.221,1274,2.759,1275,2.414,1276,2.759,1277,2.759]],["title/modules/ProfileModule.html",[149,1.154,368,2.822]],["body/modules/ProfileModule.html",[0,0.307,3,0.152,4,0.136,5,0.119,14,0.012,36,0.483,41,0.152,43,0.009,44,0.009,64,1.965,108,0.967,110,1.636,149,1.906,151,2.196,152,2.722,156,3.238,157,2.925,158,2.36,159,2.275,161,3.036,162,3.156,163,2.65,164,2.65,166,2.65,167,2.65,168,2.275,368,5.678,1201,5.427,1213,5.21,1214,4.823,1278,4.823,1279,4.823,1280,5.513,1281,5.513,1282,5.513]],["title/injectables/ProfileService.html",[169,1.053,1213,2.653]],["body/injectables/ProfileService.html",[0,0.167,3,0.083,4,0.074,5,0.065,9,0.309,13,0.749,14,0.012,15,1.072,18,1.682,28,0.751,36,0.424,41,0.083,43,0.006,44,0.006,48,1.343,51,1.077,67,1.219,68,1.333,69,1.654,70,1.62,72,2.079,76,1.762,79,1.882,80,2.587,81,1.793,108,0.527,121,1.081,123,1.081,129,0.95,130,0.892,134,1.623,169,1.146,170,1.241,173,3.525,175,1.336,176,1.389,177,2.309,179,2.496,181,2.772,194,3.599,196,3.537,199,1.574,200,1.507,202,1.389,206,1.287,207,1.287,208,1.389,211,2.752,212,1.635,213,2.999,214,3.274,215,2.598,217,3.117,218,2.496,220,2.667,224,1.73,230,1.822,234,2.002,238,2.313,319,2.166,320,1.648,382,2.079,552,3.072,594,3.072,603,4.31,605,3.463,879,3.846,943,2.05,1105,3.942,1111,5.017,1116,3.571,1118,3.571,1130,3.942,1138,3.942,1143,4.282,1210,4.092,1213,2.888,1260,3.942,1275,2.631,1283,2.631,1284,3.007,1285,3.007,1286,3.007,1287,3.007,1288,3.007,1289,4.506,1290,3.007,1291,3.007,1292,1.927,1293,4.506,1294,3.007,1295,3.007,1296,3.007,1297,2.631,1298,3.007,1299,3.007,1300,3.007,1301,3.007]],["title/controllers/SongController.html",[62,1.191,1302,3.025]],["body/controllers/SongController.html",[0,0.19,3,0.094,4,0.084,5,0.074,9,0.351,12,5.013,13,0.724,14,0.012,15,0.983,16,1.776,18,1.392,21,3.98,28,0.753,36,0.468,38,0.679,41,0.094,43,0.007,44,0.007,48,1.347,51,0.973,62,0.981,64,0.981,66,1.64,67,1.337,68,1.574,69,1.78,70,1.778,71,2.197,72,2.238,75,2.186,79,1.888,80,2.682,81,1.888,98,2.588,99,2.844,101,2.796,102,1.64,103,1.64,104,1.64,105,1.709,106,1.709,107,1.64,108,0.598,109,1.64,110,1.012,111,2.377,112,3.261,113,1.575,115,2.284,121,1.227,123,1.227,128,1.64,129,1.078,130,1.012,131,2.186,132,3.127,134,1.831,142,3.918,146,1.709,212,2.061,235,2.377,250,2.984,251,3.633,253,4.326,254,4.326,256,2.703,268,2.703,272,2.703,273,3.169,274,2.493,280,2.984,291,2.703,331,3.169,421,3.169,427,3.169,435,2.844,444,1.785,445,1.962,446,1.962,458,2.493,896,4.088,1063,2.703,1073,3.371,1218,2.703,1239,2.493,1302,3.614,1303,2.984,1304,3.411,1305,2.984,1306,3.411,1307,3.411,1308,3.411,1309,3.411,1310,3.411,1311,3.411,1312,4.349,1313,3.411,1314,3.411,1315,3.727,1316,3.411,1317,3.411,1318,3.411,1319,3.411,1320,3.411,1321,3.411,1322,4.609,1323,3.411,1324,3.411,1325,3.411,1326,2.984,1327,3.411]],["title/modules/SongModule.html",[149,1.154,369,2.822]],["body/modules/SongModule.html",[0,0.307,3,0.152,4,0.136,5,0.119,14,0.012,36,0.483,41,0.152,43,0.009,44,0.009,64,1.965,108,0.967,110,1.636,149,1.906,151,2.196,152,2.722,156,3.238,157,2.925,158,2.36,159,2.275,161,3.036,162,3.156,163,2.65,164,2.65,166,2.65,167,2.65,168,2.275,369,5.678,1239,4.03,1253,4.823,1302,5.427,1315,5.21,1328,4.823,1329,4.823,1330,5.513,1331,5.513]],["title/injectables/SongService.html",[169,1.053,1315,2.653]],["body/injectables/SongService.html",[0,0.139,3,0.069,4,0.061,5,0.054,9,0.257,12,4.994,13,0.701,14,0.012,15,1.059,18,1.736,21,2.045,28,0.755,36,0.38,41,0.069,43,0.005,44,0.005,48,1.303,51,1.154,67,1.057,68,1.188,69,1.474,70,1.958,71,1.737,72,1.852,76,1.57,79,1.827,80,2.356,81,1.827,108,0.438,121,0.898,123,0.898,129,0.789,130,0.741,134,1.772,169,0.994,170,1.031,173,3.552,174,2.664,175,1.11,176,1.153,177,2.095,179,2.224,181,3.026,194,3.862,196,3.774,199,1.307,200,1.251,202,1.153,206,1.069,207,1.069,208,1.153,211,2.331,213,3.013,215,1.879,217,3.026,218,2.224,220,2.42,224,2.248,227,2.248,234,2.139,235,2.618,237,4.199,238,2.331,251,2.331,302,3.419,304,3.097,317,2.664,319,2.314,320,2.141,322,2.504,435,3.606,492,1.825,501,4.467,506,3.419,610,2.248,624,2.856,896,3.49,1073,2.664,1173,5.172,1174,2.185,1312,3.713,1315,2.504,1332,2.185,1333,3.908,1334,2.497,1335,2.497,1336,2.497,1337,2.497,1338,3.908,1339,2.497,1340,3.908,1341,2.497,1342,3.908,1343,2.497,1344,3.908,1345,2.497,1346,2.497,1347,2.497,1348,2.497,1349,2.497,1350,4.814,1351,2.497,1352,2.497,1353,2.497,1354,2.497,1355,2.497]],["title/classes/UpdateAdminDto.html",[0,0.23,96,2.822]],["body/classes/UpdateAdminDto.html",[0,0.333,2,0.92,3,0.124,4,0.11,5,0.097,9,0.461,10,1.569,13,0.768,14,0.012,15,1.032,16,1.884,22,3.18,28,0.799,36,0.362,37,3.088,38,0.892,40,1.786,41,0.124,42,2.671,43,0.008,44,0.008,45,3.177,48,1.531,50,3.456,51,0.967,52,2.992,96,4.079,212,1.522,343,4.373,740,4.59,742,5.234,743,6.734,744,4.897,752,5.234,755,3.924,756,5.234,757,5.234,758,5.234,761,4.373,762,4.373,763,4.373,764,5.234,765,3.924,767,4.079,768,3.236,769,3.453,770,3.554,771,3.278,772,3.278,773,3.924,774,3.554,777,3.278,778,3.278,779,3.924,1356,6.546,1357,3.924,1358,4.485,1359,4.485,1360,4.485,1361,4.485,1362,4.485,1363,4.485,1364,4.485,1365,4.485,1366,7.482]],["title/classes/UpdateAlbumDto.html",[0,0.23,269,2.822]],["body/classes/UpdateAlbumDto.html",[0,0.352,2,1.298,3,0.175,4,0.155,5,0.136,14,0.012,36,0.45,38,1.258,41,0.175,43,0.01,44,0.01,68,1.56,252,4.053,269,5.061,277,5.012,781,5.012,988,3.169,1367,5.533,1368,3.465,1369,6.324]],["title/classes/UpdateArtistDto.html",[0,0.23,440,2.822]],["body/classes/UpdateArtistDto.html",[0,0.352,2,1.298,3,0.175,4,0.155,5,0.136,14,0.012,36,0.45,38,1.258,41,0.175,43,0.01,44,0.01,68,1.56,418,4.053,440,5.061,449,5.012,798,5.012,988,3.169,1368,3.465,1370,5.533,1371,6.324]],["title/classes/UpdateCategoryDto.html",[0,0.23,638,2.822]],["body/classes/UpdateCategoryDto.html",[0,0.352,2,1.298,3,0.175,4,0.155,5,0.136,14,0.012,36,0.45,38,1.258,41,0.175,43,0.01,44,0.01,68,1.56,619,4.053,638,5.061,643,5.012,854,5.012,988,3.169,1368,3.465,1372,5.533,1373,6.324]],["title/classes/UpdateCountryDto.html",[0,0.23,699,2.822]],["body/classes/UpdateCountryDto.html",[0,0.352,2,1.298,3,0.175,4,0.155,5,0.136,14,0.012,36,0.45,38,1.258,41,0.175,43,0.01,44,0.01,68,1.56,690,4.053,699,5.061,704,5.012,857,5.012,988,3.169,1368,3.465,1374,5.533,1375,6.324]],["title/classes/UpdatePlaylistDto.html",[0,0.23,1069,2.822]],["body/classes/UpdatePlaylistDto.html",[0,0.352,2,1.298,3,0.175,4,0.155,5,0.136,14,0.012,36,0.45,38,1.258,41,0.175,43,0.01,44,0.01,68,1.56,864,4.053,865,5.012,988,3.169,1069,5.061,1074,5.012,1368,3.465,1376,5.533,1377,6.324]],["title/classes/UpdateProfileDto.html",[0,0.23,1210,2.822]],["body/classes/UpdateProfileDto.html",[0,0.352,2,1.298,3,0.175,4,0.155,5,0.136,14,0.012,36,0.45,38,1.258,41,0.175,43,0.01,44,0.01,68,1.56,552,4.312,879,4.053,881,4.622,988,3.169,1210,5.061,1368,3.465,1378,5.533,1379,6.324]],["title/classes/UpdateSongDto.html",[0,0.23,1312,2.822]],["body/classes/UpdateSongDto.html",[0,0.352,2,1.298,3,0.175,4,0.155,5,0.136,8,4.312,14,0.012,36,0.45,38,1.258,41,0.175,43,0.01,44,0.01,68,1.56,896,4.053,988,3.169,1073,4.312,1312,5.061,1368,3.465,1380,5.533,1381,6.324]],["title/classes/UpdateUserDto.html",[0,0.23,1382,2.822]],["body/classes/UpdateUserDto.html",[0,0.352,2,1.298,3,0.175,4,0.155,5,0.136,14,0.012,36,0.45,38,1.258,41,0.175,43,0.01,44,0.01,68,1.56,921,4.053,923,5.012,988,3.169,1368,3.465,1382,5.061,1383,5.533,1384,5.012,1385,6.324]],["title/classes/UpdateUserPlanDto.html",[0,0.23,1386,2.822]],["body/classes/UpdateUserPlanDto.html",[0,0.349,2,1.287,3,0.173,4,0.154,5,0.135,14,0.012,36,0.447,38,1.248,41,0.173,43,0.01,44,0.01,68,1.547,212,1.879,939,4.019,940,3.799,942,4.969,988,3.143,1368,3.436,1386,5.036,1387,5.486,1388,4.969,1389,6.271]],["title/classes/User.html",[0,0.23,212,1.053]],["body/classes/User.html",[0,0.294,2,1.083,3,0.146,4,0.13,5,0.114,9,0.542,10,1.744,13,0.884,14,0.012,15,1.097,18,1.589,28,0.919,41,0.146,43,0.009,44,0.009,47,3.989,48,1.643,49,3.648,50,3.363,51,1.046,52,3.235,53,3.648,55,3.674,212,1.692,924,6.369,1390,4.619,1391,5.279,1392,5.279,1393,5.279,1394,5.279,1395,5.279,1396,5.279,1397,5.279,1398,5.279]],["title/controllers/UserController.html",[62,1.191,1399,3.025]],["body/controllers/UserController.html",[0,0.172,3,0.085,4,0.076,5,0.067,9,0.317,13,0.776,14,0.012,15,0.881,16,1.851,18,1.646,28,0.785,36,0.464,38,0.614,41,0.085,43,0.006,44,0.006,45,3.411,48,1.404,51,1.014,62,0.888,64,0.888,66,1.484,67,1.242,68,1.5,69,0.945,70,1.652,73,1.691,76,1.498,79,1.968,80,2.45,81,1.968,86,2.256,98,2.405,99,3.919,101,2.209,102,1.484,103,1.484,104,1.484,105,1.547,106,1.547,107,1.484,108,0.541,109,1.484,110,0.916,111,3.392,112,3.349,113,1.425,114,1.691,115,2.122,116,1.87,121,1.11,123,1.11,128,3.275,129,0.975,130,0.916,132,3.259,134,1.908,146,2.302,212,2.086,331,3.896,382,1.187,421,3.896,427,2.944,443,1.978,444,2.405,445,1.775,453,2.7,468,4.019,537,4.397,620,2.446,708,2.446,921,3.896,1042,3.132,1072,1.978,1203,2.7,1245,2.7,1297,5.686,1322,3.641,1382,4.145,1384,3.641,1399,3.358,1400,2.7,1401,4.019,1402,4.019,1403,4.019,1404,4.019,1405,4.801,1406,3.086,1407,3.086,1408,3.086,1409,3.086,1410,3.086,1411,3.086,1412,3.086,1413,3.086,1414,3.086,1415,3.086,1416,4.594,1417,4.594,1418,3.086,1419,3.086,1420,3.086,1421,3.086,1422,3.086,1423,4.594,1424,3.086,1425,2.7,1426,3.517,1427,2.7,1428,2.7,1429,2.7,1430,3.086,1431,3.086,1432,3.086,1433,3.086,1434,3.086,1435,3.086,1436,3.086,1437,3.086,1438,3.086,1439,3.086,1440,3.086,1441,3.086,1442,3.086]],["title/modules/UserModule.html",[149,1.154,370,2.822]],["body/modules/UserModule.html",[0,0.307,3,0.152,4,0.136,5,0.119,14,0.012,36,0.483,41,0.152,43,0.009,44,0.009,64,1.965,108,0.967,110,1.636,149,1.906,151,2.196,152,2.722,156,3.238,157,2.925,158,2.36,159,2.275,161,3.036,162,3.156,163,2.65,164,2.65,166,2.65,167,2.65,168,2.275,370,5.678,1399,5.427,1426,5.21,1427,4.823,1443,4.823,1444,5.513,1445,4.823,1446,5.513,1447,5.513]],["title/classes/UserPlan.html",[0,0.23,1292,2.653]],["body/classes/UserPlan.html",[0,0.29,2,1.071,3,0.144,4,0.128,5,0.112,9,0.536,10,1.731,13,0.871,14,0.012,15,1.037,18,1.581,28,0.906,41,0.144,42,2.692,43,0.009,44,0.009,48,1.595,49,3.629,51,1.04,53,3.629,55,3.658,246,5.188,940,4.992,943,4.937,944,5.293,1292,4.23,1448,7.209,1449,4.565,1450,5.217,1451,5.217,1452,5.217,1453,5.217,1454,5.217,1455,5.217,1456,5.217]],["title/controllers/UserPlanController.html",[62,1.191,1457,3.025]],["body/controllers/UserPlanController.html",[0,0.193,3,0.096,4,0.085,5,0.075,9,0.357,13,0.729,14,0.012,15,0.987,16,1.788,18,1.773,28,0.759,36,0.454,38,0.69,41,0.096,43,0.007,44,0.007,45,3.494,48,1.356,51,0.979,62,0.998,64,0.998,66,1.668,67,1.354,68,1.586,69,1.798,70,1.8,71,2.224,72,1.926,76,1.632,79,1.901,80,2.632,81,1.901,82,2.536,86,2.536,92,2.749,95,2.536,98,2.62,101,2.823,102,1.668,103,1.668,104,1.668,105,1.739,106,2.508,107,1.668,108,0.608,109,1.668,110,1.029,111,2.406,112,3.28,113,1.602,114,1.901,115,1.602,116,2.102,121,1.247,123,1.247,128,1.668,129,1.096,130,1.029,132,3.148,134,1.843,143,3.035,146,1.739,212,2.018,330,3.035,331,3.208,388,4.842,421,3.208,427,3.208,443,2.223,618,2.749,646,2.749,654,2.749,708,2.749,711,3.035,935,4.379,939,4.12,940,4.303,946,6.867,1042,3.413,1305,3.035,1322,4.654,1326,3.035,1386,4.383,1388,3.967,1428,3.035,1429,3.035,1457,3.659,1458,3.035,1459,3.469,1460,3.469,1461,3.469,1462,3.469,1463,3.469,1464,3.469,1465,3.469,1466,3.469,1467,3.763,1468,3.035,1469,3.469,1470,3.469,1471,3.469,1472,3.469,1473,3.469,1474,3.469,1475,3.469]],["title/modules/UserPlanModule.html",[149,1.154,371,2.822]],["body/modules/UserPlanModule.html",[0,0.304,3,0.151,4,0.134,5,0.118,14,0.012,36,0.482,41,0.151,43,0.009,44,0.009,64,1.953,108,0.957,110,1.62,149,1.894,151,2.175,152,2.705,156,3.231,157,2.907,158,2.337,159,2.253,161,3.018,162,3.137,163,2.624,164,2.624,166,2.624,167,2.624,168,2.253,212,1.728,371,5.667,388,3.722,940,3.307,1457,5.404,1467,5.198,1468,4.776,1476,4.776,1477,5.459,1478,4.776,1479,5.459,1480,5.459]],["title/injectables/UserPlanService.html",[169,1.053,1467,2.653]],["body/injectables/UserPlanService.html",[0,0.213,3,0.106,4,0.094,5,0.083,9,0.394,13,0.757,14,0.012,15,1.01,18,1.645,28,0.817,36,0.444,41,0.106,43,0.007,44,0.007,48,1.408,51,1.054,67,1.453,68,1.325,69,1.645,70,2.418,71,2.387,72,2.386,73,2.944,79,1.974,80,2.639,81,1.974,108,0.672,121,1.378,123,1.378,129,1.211,130,1.137,134,1.818,169,1.367,170,1.582,173,3.664,175,1.703,176,1.77,177,2.587,179,2.481,181,3.105,182,4.257,187,3.663,189,4.257,194,3.105,196,1.842,202,1.77,206,1.64,207,1.64,208,1.77,211,2.3,212,1.367,213,3.146,215,1.842,217,3.27,220,2.988,227,2.204,230,2.321,388,5.138,939,4.537,940,4.565,943,2.613,944,2.801,1292,2.456,1386,4.584,1388,4.257,1467,3.443,1481,3.352,1482,3.832,1483,3.832,1484,3.832,1485,3.832,1486,3.832,1487,3.832,1488,3.832,1489,3.832,1490,3.832,1491,6.203,1492,3.832]],["title/classes/UserProfileId.html",[0,0.23,537,2.268]],["body/classes/UserProfileId.html",[0,0.394,2,1.199,3,0.162,4,0.144,5,0.126,9,0.601,10,1.857,13,0.758,14,0.012,15,0.915,16,1.533,28,0.788,36,0.429,39,4.616,40,2.328,41,0.162,43,0.01,44,0.01,212,2.097,382,2.931,446,3.362,537,3.88,603,4.175,1072,4.883,1493,5.113,1494,5.845,1495,5.845]],["title/injectables/UserService.html",[169,1.053,1426,2.653]],["body/injectables/UserService.html",[0,0.154,3,0.077,4,0.068,5,0.06,9,0.285,13,0.751,14,0.012,15,1.033,18,1.652,28,0.8,36,0.436,41,0.077,43,0.006,44,0.006,47,2.322,48,1.396,49,1.389,50,2.865,51,1.14,52,1.232,53,1.389,67,1.146,68,1.269,69,1.297,70,2.071,72,1.067,73,2.322,76,1.382,79,1.957,80,2.231,81,1.957,108,0.486,121,0.997,123,0.997,129,0.876,130,0.823,134,1.769,169,1.078,170,1.144,173,3.651,174,2.889,175,1.232,176,1.281,177,2.215,179,2.375,181,3.021,194,3.749,195,2.027,196,3.272,198,2.426,199,1.451,200,1.389,201,2.889,202,1.281,203,1.89,204,1.89,205,2.197,206,1.187,207,1.187,208,1.281,209,3.358,210,4.563,211,2.465,212,1.078,213,3.405,214,3.489,215,1.333,216,2.197,217,3.021,218,1.957,220,2.559,222,2.197,223,2.889,224,2.437,227,1.595,228,3.358,229,2.197,230,1.68,231,3.358,233,2.197,234,1.883,238,1.187,319,1.333,320,1.519,322,3.296,492,2.027,494,2.426,508,2.426,605,1.777,921,3.69,943,2.889,1042,1.89,1111,4.785,1292,3.296,1382,3.926,1384,3.358,1401,3.707,1402,3.707,1403,3.707,1404,3.707,1405,3.707,1425,2.426,1426,2.716,1496,2.426,1497,2.772,1498,2.772,1499,4.237,1500,2.772,1501,4.237,1502,2.772,1503,2.772,1504,4.237,1505,2.772,1506,4.237,1507,2.772,1508,4.237,1509,2.772,1510,4.237,1511,2.772,1512,2.772,1513,2.772,1514,4.237,1515,2.772,1516,5.143,1517,4.237]],["title/coverage.html",[1518,4.491]],["body/coverage.html",[0,0.47,1,1.836,5,0.058,6,3.283,7,2.51,8,3.866,13,0.288,14,0.012,43,0.006,44,0.006,45,1.111,46,2.356,62,2.19,63,1.968,65,2.356,74,1.836,76,0.878,96,1.836,114,1.475,115,2.619,117,2.134,119,1.726,169,1.977,171,2.356,177,1.036,203,1.836,204,1.836,206,1.152,207,1.152,212,1.442,235,1.294,236,2.356,248,1.968,249,2.356,251,1.152,252,1.726,269,1.836,273,1.726,275,1.726,299,2.356,319,4.181,325,1.968,326,2.356,350,1.726,382,1.943,383,3.81,384,2.825,388,2.825,391,2.356,399,2.356,413,1.968,414,2.356,418,1.726,440,1.836,444,1.409,447,1.726,479,2.356,509,1.968,510,2.356,525,1.836,537,1.475,538,1.836,548,1.726,553,1.836,575,1.836,587,2.356,610,1.549,611,2.356,616,1.968,617,2.356,619,1.726,621,1.631,638,1.836,641,1.726,661,2.356,680,1.549,681,2.356,688,1.968,689,2.356,690,1.726,699,1.836,702,1.726,723,2.356,738,2.356,739,2.356,774,2.134,780,2.356,781,3.283,797,2.356,798,3.283,853,2.356,854,3.283,856,2.356,857,3.283,864,1.726,865,3.283,879,1.726,880,2.356,881,3.691,887,2.134,888,3.634,889,2.356,896,1.726,897,2.356,921,1.726,922,2.356,923,3.283,939,1.726,940,3.709,941,2.356,942,3.283,977,2.356,999,2.356,1003,3.283,1005,2.356,1013,2.356,1022,2.356,1030,1.968,1031,2.356,1069,1.836,1072,1.726,1075,1.726,1102,2.356,1181,2.356,1194,2.356,1201,1.968,1202,2.356,1210,1.836,1213,1.726,1225,2.134,1226,2.356,1227,2.356,1228,1.968,1229,2.356,1238,1.726,1254,2.356,1283,2.356,1292,1.726,1302,1.968,1303,2.356,1312,1.836,1315,1.726,1332,2.356,1356,2.356,1357,2.356,1367,2.356,1370,2.356,1372,2.356,1374,2.356,1376,2.356,1378,2.356,1380,2.356,1382,1.836,1383,2.356,1386,1.836,1387,2.356,1390,2.356,1399,1.968,1400,2.356,1426,1.726,1448,2.356,1449,2.356,1457,1.968,1458,2.356,1467,1.726,1481,2.356,1493,2.356,1496,2.356,1518,2.134,1519,2.692,1520,2.692,1521,2.692,1522,7.132,1523,6.122,1524,6.122,1525,7.282,1526,5.05,1527,7.898,1528,2.692,1529,5.671,1530,5.05,1531,2.692,1532,6.952,1533,2.356,1534,6.465,1535,2.356,1536,2.356,1537,2.356,1538,2.356,1539,2.692,1540,2.356,1541,2.692,1542,6.122,1543,2.356,1544,2.356,1545,2.692,1546,2.692]],["title/dependencies.html",[152,1.985,1547,3.016]],["body/dependencies.html",[0,0.388,14,0.012,38,1.13,40,2.263,43,0.01,44,0.01,108,0.996,110,1.686,152,2.263,168,2.345,200,2.847,201,3.873,349,5.516,578,4.502,987,6.584,1548,7.525,1549,5.681,1550,5.681,1551,5.681,1552,5.681,1553,5.681,1554,5.681,1555,5.681,1556,5.681,1557,5.681,1558,5.681,1559,5.681,1560,5.681,1561,5.681,1562,5.681,1563,4.97,1564,5.681,1565,5.681,1566,5.681,1567,5.681,1568,5.681,1569,5.681,1570,5.681,1571,5.681,1572,5.681,1573,5.681,1574,5.681]],["title/miscellaneous/functions.html",[1575,2.52,1576,4.36]],["body/miscellaneous/functions.html",[9,0.681,14,0.011,43,0.011,44,0.011,1538,5.795,1540,7.025,1575,4.841,1576,5.795,1577,6.623]],["title/index.html",[9,0.354,1578,3.016,1579,3.016]],["body/index.html",[14,0.011,43,0.01,44,0.01,342,5.58,343,4.662,395,6.526,396,5.054,1580,6.378,1581,6.378,1582,6.378,1583,6.378,1584,6.378,1585,6.378,1586,5.58,1587,6.378,1588,6.378,1589,6.378,1590,6.378,1591,6.378,1592,6.378,1593,6.378,1594,6.378]],["title/license.html",[1578,3.016,1579,3.016,1595,2.732]],["body/license.html",[0,0.038,4,0.171,5,0.027,13,0.135,14,0.002,19,1.543,20,1.614,22,1.035,28,0.075,36,0.041,43,0.002,44,0.002,52,0.301,55,0.325,67,0.183,76,1.064,101,0.325,134,0.183,159,0.279,191,4.492,212,1.257,220,0.784,223,1.203,234,0.301,246,0.858,331,0.434,333,0.536,338,1.101,349,0.997,396,2.06,397,1.543,421,0.806,427,0.806,498,0.592,499,0.592,504,1.543,529,0.592,595,0.434,597,2.274,635,2.337,680,1.015,682,4.824,695,0.592,787,5.199,811,1.101,814,1.101,817,0.592,821,4.187,822,0.592,826,0.536,863,2.274,869,3.714,874,2.274,875,1.101,905,3.528,907,0.592,914,1.543,915,0.592,936,3.324,944,1.614,947,2.274,949,4.87,951,1.931,954,1.101,958,0.592,961,0.592,963,0.592,967,4.774,968,0.592,969,1.101,998,0.536,1042,2.591,1156,0.592,1157,1.543,1518,0.997,1563,1.101,1586,0.592,1595,6.354,1596,5.457,1597,5.857,1598,6.024,1599,2.6,1600,0.677,1601,0.677,1602,1.764,1603,6.374,1604,3.544,1605,6.175,1606,2.949,1607,0.677,1608,0.677,1609,2.6,1610,6.024,1611,2.6,1612,1.764,1613,1.764,1614,0.677,1615,1.764,1616,0.677,1617,0.677,1618,1.258,1619,4.44,1620,2.949,1621,0.677,1622,2.949,1623,0.677,1624,3.544,1625,1.258,1626,2.6,1627,0.677,1628,0.677,1629,0.677,1630,4.786,1631,7.153,1632,4.786,1633,1.764,1634,1.764,1635,1.258,1636,7.955,1637,3.262,1638,3.262,1639,4.786,1640,2.949,1641,0.677,1642,0.677,1643,3.544,1644,1.258,1645,3.544,1646,0.677,1647,1.258,1648,0.677,1649,1.764,1650,5.457,1651,2.6,1652,1.258,1653,2.207,1654,0.677,1655,0.677,1656,1.258,1657,2.207,1658,2.207,1659,1.258,1660,4.44,1661,1.258,1662,5.669,1663,1.258,1664,2.207,1665,0.677,1666,3.262,1667,2.274,1668,0.677,1669,3.544,1670,2.949,1671,6.492,1672,1.764,1673,3.262,1674,0.677,1675,0.677,1676,0.677,1677,3.544,1678,1.258,1679,4.245,1680,3.528,1681,1.258,1682,0.677,1683,0.677,1684,4.94,1685,1.258,1686,0.677,1687,0.677,1688,4.62,1689,1.258,1690,0.677,1691,1.764,1692,0.677,1693,0.677,1694,1.258,1695,0.677,1696,0.677,1697,2.58,1698,2.207,1699,3.544,1700,0.677,1701,0.677,1702,0.677,1703,0.677,1704,0.677,1705,0.677,1706,1.258,1707,0.677,1708,0.677,1709,0.677,1710,1.258,1711,0.677,1712,1.764,1713,1.258,1714,0.677,1715,0.677,1716,1.258,1717,1.258,1718,4.786,1719,0.677,1720,1.258,1721,1.258,1722,0.677,1723,0.677,1724,1.258,1725,1.764,1726,1.258,1727,1.764,1728,1.258,1729,0.677,1730,0.677,1731,2.949,1732,0.677,1733,0.677,1734,0.677,1735,2.6,1736,0.677,1737,0.677,1738,2.207,1739,0.677,1740,0.677,1741,1.258,1742,1.764,1743,0.677,1744,4.44,1745,0.677,1746,3.8,1747,0.677,1748,4.786,1749,2.207,1750,2.6,1751,2.949,1752,1.764,1753,0.677,1754,1.764,1755,5.34,1756,1.258,1757,0.677,1758,0.677,1759,0.677,1760,1.764,1761,7.023,1762,0.677,1763,0.677,1764,1.258,1765,1.258,1766,0.677,1767,4.032,1768,0.677,1769,2.207,1770,3.544,1771,0.677,1772,1.764,1773,1.764,1774,1.258,1775,2.949,1776,6.913,1777,1.764,1778,3.8,1779,2.207,1780,3.262,1781,1.258,1782,0.677,1783,1.258,1784,1.764,1785,3.8,1786,4.032,1787,2.207,1788,0.677,1789,1.258,1790,1.258,1791,2.207,1792,2.207,1793,1.764,1794,0.677,1795,6.102,1796,1.258,1797,0.677,1798,3.544,1799,0.677,1800,1.764,1801,2.207,1802,3.544,1803,0.677,1804,4.94,1805,2.207,1806,3.262,1807,1.258,1808,3.544,1809,4.245,1810,2.949,1811,0.677,1812,0.677,1813,0.677,1814,0.677,1815,3.544,1816,0.677,1817,1.258,1818,4.62,1819,0.677,1820,1.764,1821,0.677,1822,0.677,1823,1.764,1824,0.677,1825,0.677,1826,0.677,1827,0.677,1828,4.245,1829,1.764,1830,1.764,1831,0.677,1832,0.677,1833,0.677,1834,1.258,1835,1.764,1836,1.258,1837,4.032,1838,0.677,1839,1.258,1840,0.677,1841,0.677,1842,2.6,1843,1.764,1844,1.764,1845,2.949,1846,1.764,1847,1.764,1848,0.677,1849,0.677,1850,2.6,1851,2.6,1852,2.949,1853,0.677,1854,0.677,1855,0.677,1856,1.258,1857,0.677,1858,1.764,1859,0.677,1860,0.677,1861,1.764,1862,0.677,1863,0.677,1864,0.677,1865,1.258,1866,0.677,1867,5.857,1868,0.677,1869,3.544,1870,0.677,1871,2.949,1872,1.258,1873,0.677,1874,0.677,1875,1.258,1876,1.258,1877,2.207,1878,0.677,1879,0.677,1880,0.677,1881,0.677,1882,1.258,1883,1.764,1884,2.6,1885,0.677,1886,1.258,1887,0.677,1888,2.949,1889,0.677,1890,2.207,1891,0.677,1892,4.032,1893,3.262,1894,2.207,1895,0.677,1896,2.6,1897,0.677,1898,1.258,1899,0.677,1900,0.677,1901,1.764,1902,1.764,1903,0.677,1904,0.677,1905,0.677,1906,1.764,1907,1.764,1908,2.949,1909,0.677,1910,0.677,1911,1.258,1912,1.258,1913,2.6,1914,1.258,1915,0.677,1916,4.62,1917,1.258,1918,0.677,1919,0.677,1920,0.677,1921,0.677,1922,0.677,1923,1.764,1924,0.677,1925,0.677,1926,4.94,1927,0.677,1928,0.677,1929,0.677,1930,2.6,1931,2.6,1932,0.677,1933,0.677,1934,1.764,1935,0.677,1936,0.677,1937,2.207,1938,0.677,1939,1.258,1940,0.677,1941,0.677,1942,0.677,1943,0.677,1944,0.677,1945,0.677,1946,1.258,1947,1.258,1948,0.677,1949,1.764,1950,0.677,1951,0.677,1952,1.258,1953,0.677,1954,0.677,1955,0.677,1956,0.677,1957,1.258,1958,1.258,1959,1.258,1960,1.258,1961,3.8,1962,1.258,1963,2.949,1964,0.677,1965,0.677,1966,1.258,1967,1.764,1968,1.764,1969,2.207,1970,2.207,1971,2.207,1972,1.764,1973,0.677,1974,2.6,1975,2.6,1976,1.543,1977,0.677,1978,1.258,1979,1.258,1980,2.6,1981,1.258,1982,2.207,1983,1.258,1984,1.764,1985,4.786,1986,2.6,1987,0.677,1988,0.677,1989,0.677,1990,1.764,1991,1.764,1992,1.258,1993,1.258,1994,0.677,1995,0.677,1996,0.677,1997,0.677,1998,1.258,1999,0.677,2000,0.677,2001,0.677,2002,1.764,2003,0.677,2004,0.677,2005,1.258,2006,1.764,2007,0.677,2008,1.258,2009,0.677,2010,1.764,2011,0.677,2012,0.677,2013,1.258,2014,1.258,2015,2.949,2016,5.669,2017,1.764,2018,1.258,2019,1.258,2020,1.258,2021,1.258,2022,2.207,2023,2.207,2024,0.677,2025,0.677,2026,0.677,2027,0.677,2028,0.677,2029,3.262,2030,2.949,2031,1.258,2032,0.677,2033,0.677,2034,0.677,2035,0.677,2036,1.258,2037,0.677,2038,1.258,2039,0.677,2040,2.6,2041,3.544,2042,2.207,2043,0.677,2044,0.677,2045,0.677,2046,0.677,2047,0.677,2048,0.677,2049,1.258,2050,0.677,2051,0.677,2052,0.677,2053,1.258,2054,1.764,2055,2.6,2056,2.207,2057,2.207,2058,1.258,2059,0.677,2060,0.677,2061,1.258,2062,0.677,2063,0.677,2064,0.677,2065,1.258,2066,0.677,2067,0.677,2068,1.764,2069,2.207,2070,0.677,2071,1.258,2072,0.677,2073,1.258,2074,0.677,2075,0.677,2076,1.764,2077,0.677,2078,0.677,2079,0.677,2080,0.677,2081,1.258,2082,0.677,2083,0.677,2084,0.677,2085,0.677,2086,0.677,2087,1.764,2088,0.677,2089,0.677,2090,0.677,2091,0.677,2092,0.677,2093,2.6,2094,0.677,2095,0.677,2096,1.258,2097,2.207,2098,3.544,2099,0.677,2100,0.677,2101,0.677,2102,2.207,2103,0.677,2104,0.677,2105,0.677,2106,0.677,2107,0.677,2108,0.677,2109,1.258,2110,3.262,2111,0.677,2112,2.207,2113,0.677,2114,0.677,2115,1.764,2116,0.677,2117,0.677,2118,1.764,2119,0.677,2120,1.258,2121,1.258,2122,0.677,2123,0.677,2124,0.677,2125,0.677,2126,0.677,2127,0.677,2128,0.677,2129,0.677,2130,0.677,2131,0.677,2132,1.258,2133,0.677,2134,0.677,2135,0.677,2136,0.677,2137,1.258,2138,1.258,2139,0.677,2140,0.677,2141,1.764,2142,0.677,2143,1.764,2144,0.677,2145,1.258,2146,1.258,2147,0.677,2148,1.764,2149,3.262,2150,0.677,2151,1.101,2152,1.258,2153,0.677,2154,1.101,2155,0.677,2156,0.677,2157,0.677,2158,0.677,2159,0.677,2160,1.258,2161,0.677,2162,1.258,2163,2.207,2164,0.677,2165,2.6,2166,0.677,2167,0.677,2168,0.677,2169,0.677,2170,0.677,2171,0.677,2172,1.258,2173,1.258,2174,1.258,2175,1.764,2176,0.677,2177,1.258,2178,0.677,2179,1.258,2180,1.764,2181,0.677,2182,1.258,2183,0.677,2184,1.258,2185,0.677,2186,1.764,2187,1.258,2188,0.677,2189,0.677,2190,0.592,2191,1.258,2192,5.857,2193,1.258,2194,0.677,2195,2.6,2196,4.032,2197,1.764,2198,0.677,2199,0.677,2200,0.677,2201,2.207,2202,0.677,2203,0.677,2204,1.764,2205,0.677,2206,1.258,2207,0.677,2208,0.677,2209,0.677,2210,1.258,2211,2.207,2212,0.677,2213,0.677,2214,0.677,2215,0.677,2216,0.677,2217,2.207,2218,1.258,2219,1.258,2220,0.677,2221,0.677,2222,1.764,2223,0.677,2224,1.258,2225,1.764,2226,0.677,2227,1.258,2228,0.677,2229,0.677,2230,0.677,2231,0.677,2232,1.258,2233,1.764,2234,0.677,2235,0.677,2236,0.677,2237,1.258,2238,0.677,2239,1.258,2240,0.677,2241,0.677,2242,0.677,2243,0.677,2244,0.677,2245,1.764,2246,1.258,2247,0.677,2248,0.677,2249,2.207,2250,0.677,2251,1.764,2252,0.677,2253,0.677,2254,0.677,2255,1.258,2256,0.677,2257,0.677,2258,0.677,2259,1.764,2260,1.258,2261,1.258,2262,0.677,2263,3.262,2264,1.258,2265,1.764,2266,2.207,2267,0.677,2268,0.677,2269,1.258,2270,0.677,2271,1.764,2272,0.677,2273,1.258,2274,0.677,2275,0.677,2276,0.677,2277,1.764,2278,0.677,2279,1.764,2280,1.258,2281,0.677,2282,1.258,2283,0.677,2284,0.677,2285,1.258,2286,1.258,2287,0.677,2288,0.677,2289,1.258,2290,0.677,2291,0.677,2292,0.677,2293,0.677,2294,0.677,2295,0.677,2296,0.677,2297,0.677,2298,0.677,2299,0.677,2300,2.207,2301,1.258,2302,1.764,2303,0.677,2304,0.677,2305,0.677,2306,0.677,2307,1.258,2308,0.677,2309,0.677,2310,0.677,2311,0.677,2312,0.677,2313,0.677,2314,0.677,2315,0.677,2316,0.677,2317,0.677,2318,0.592,2319,0.677,2320,0.677,2321,0.677,2322,0.677,2323,2.207,2324,0.677,2325,1.258,2326,0.677,2327,0.677,2328,0.677,2329,0.677,2330,0.677,2331,0.677,2332,0.677,2333,0.677,2334,0.677,2335,0.677,2336,1.764,2337,0.677,2338,0.677,2339,0.592,2340,0.677,2341,0.677,2342,1.258,2343,0.677,2344,0.677,2345,0.677,2346,0.677,2347,0.677,2348,0.677,2349,0.677,2350,1.258,2351,1.258,2352,2.6,2353,1.764,2354,0.677,2355,0.677,2356,0.677,2357,0.677,2358,0.677,2359,0.677,2360,1.764,2361,1.258,2362,0.677,2363,1.258,2364,1.258,2365,1.258,2366,0.677,2367,0.677,2368,0.677,2369,0.677,2370,0.677,2371,0.677,2372,1.258,2373,0.677,2374,0.677,2375,0.677,2376,1.258,2377,0.677,2378,0.677,2379,1.764,2380,0.677,2381,0.677,2382,0.677,2383,0.677,2384,0.677,2385,0.677,2386,0.677,2387,0.677,2388,0.677,2389,0.677,2390,0.677,2391,1.258,2392,0.677,2393,0.677,2394,0.677,2395,0.677,2396,0.677,2397,0.677,2398,0.677,2399,0.677,2400,0.677,2401,0.677,2402,0.677,2403,0.677,2404,0.677,2405,0.677,2406,0.677,2407,0.677,2408,0.677,2409,1.764,2410,1.258,2411,0.677,2412,0.677,2413,0.677,2414,0.677,2415,0.677,2416,0.677,2417,0.677,2418,0.677,2419,0.677,2420,1.258,2421,1.764,2422,1.258,2423,0.677,2424,0.677,2425,0.677,2426,0.677,2427,0.677,2428,0.677,2429,0.677,2430,0.677,2431,1.258,2432,0.677,2433,0.677,2434,0.677,2435,0.677,2436,0.677,2437,0.677,2438,0.677,2439,0.677,2440,0.677,2441,0.677,2442,0.677,2443,0.677,2444,0.677,2445,0.677,2446,0.677,2447,0.677,2448,0.677,2449,0.677,2450,0.677,2451,0.677,2452,0.677,2453,0.677]],["title/modules.html",[151,2.257]],["body/modules.html",[14,0.01,43,0.01,44,0.01,150,3.806,151,2.223,156,2.223,293,3.806,358,4.08,362,3.806,363,3.806,364,3.806,365,3.806,366,3.806,367,3.806,368,3.806,369,3.806,370,3.806,371,3.806,1976,7.531,2454,8.608,2455,8.608,2456,8.608]],["title/overview.html",[2457,4.958]],["body/overview.html",[2,0.765,14,0.012,43,0.007,44,0.007,64,1.073,119,3.918,150,5.099,151,1.486,152,2.099,153,3.263,154,3.263,155,3.263,156,3.318,157,2.256,158,1.596,159,1.539,170,1.539,177,2.877,275,3.918,293,5.099,294,3.263,295,3.263,350,3.918,358,6.272,359,3.263,360,3.263,361,3.263,362,5.099,363,5.296,364,5.099,365,5.099,366,5.099,367,5.099,368,5.099,369,5.099,370,5.099,371,5.099,447,3.918,474,3.263,476,3.263,548,3.918,572,3.263,574,3.263,575,4.168,641,3.918,656,3.263,658,3.263,702,3.918,718,3.263,720,3.263,776,3.263,1075,3.918,1097,3.263,1099,3.263,1175,3.263,1176,3.263,1177,3.263,1213,3.918,1238,3.918,1249,3.263,1251,3.263,1278,3.263,1279,3.263,1315,3.918,1328,3.263,1329,3.263,1426,3.918,1443,3.263,1445,3.263,1467,3.918,1476,3.263,1478,3.263,2151,3.263,2339,3.263,2457,3.263,2458,3.73]],["title/properties.html",[10,1.307,1547,3.016]],["body/properties.html",[10,1.722,14,0.012,42,2.441,43,0.01,44,0.01,967,5.203,1595,5.203,2154,5.744,2459,6.565,2460,6.565]],["title/miscellaneous/variables.html",[1575,2.52,2461,4.36]],["body/miscellaneous/variables.html",[9,0.39,14,0.012,15,0.69,43,0.007,44,0.007,45,2.765,52,2.373,69,1.163,76,2.544,77,6.174,114,2.926,115,3.094,117,4.232,134,1.811,192,6.403,193,6.403,203,3.641,204,2.59,206,2.286,207,1.626,211,3.384,212,1.795,218,3.603,234,2.744,251,2.867,273,3.422,329,5.86,444,2.795,594,4.567,740,3.641,997,5.402,998,4.893,1533,4.672,1535,4.672,1536,4.672,1537,4.672,1543,4.672,1544,4.672,1575,2.777,1667,3.324,1680,5.402,1697,5.86,2190,3.324,2318,3.324,2461,3.324,2462,3.799,2463,6.698,2464,3.799,2465,5.34,2466,3.799,2467,3.799,2468,3.799,2469,6.175,2470,3.799,2471,3.799,2472,3.799,2473,3.799,2474,3.799,2475,3.799,2476,3.799,2477,3.799,2478,3.799,2479,3.799,2480,6.175,2481,6.698,2482,6.698,2483,6.698,2484,6.698,2485,5.34,2486,6.698,2487,3.799,2488,3.799,2489,3.799,2490,3.799,2491,3.799,2492,5.34,2493,3.799,2494,3.799,2495,3.799,2496,3.799]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":319,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"classes/CreateUserPlanDto.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0",{"_index":976,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["0.0.1",{"_index":2459,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1567,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1559,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1530,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1522,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1542,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":839,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["0eee08d7",{"_index":898,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/LoginProfileDto.html":{}}}],["1",{"_index":947,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["1.0.0",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"license.html":{}}}],["100",{"_index":819,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["11",{"_index":1939,"title":{},"body":{"license.html":{}}}],["12",{"_index":749,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["123.123.123",{"_index":748,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["123.456.789",{"_index":927,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["13",{"_index":2339,"title":{},"body":{"license.html":{},"overview.html":{}}}],["14",{"_index":776,"title":{},"body":{"classes/CreateAdminDto.html":{},"overview.html":{}}}],["14)@apiproperty({description",{"_index":747,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["15",{"_index":2151,"title":{},"body":{"license.html":{},"overview.html":{}}}],["16",{"_index":2152,"title":{},"body":{"license.html":{}}}],["1985",{"_index":810,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["1991",{"_index":793,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["1996",{"_index":1945,"title":{},"body":{"license.html":{}}}],["1]?.trim",{"_index":2471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1f0bd61a6987",{"_index":902,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/LoginProfileDto.html":{}}}],["2",{"_index":863,"title":{},"body":{"classes/CreateCountryDto.html":{},"license.html":{}}}],["2)@apiproperty({description",{"_index":859,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["20",{"_index":1943,"title":{},"body":{"license.html":{}}}],["2007",{"_index":1602,"title":{},"body":{"license.html":{}}}],["24h",{"_index":586,"title":{},"body":{"modules/AuthModule.html":{}}}],["28",{"_index":2319,"title":{},"body":{"license.html":{}}}],["29",{"_index":1600,"title":{},"body":{"license.html":{}}}],["3",{"_index":1599,"title":{},"body":{"license.html":{}}}],["3.0.2",{"_index":1569,"title":{},"body":{"dependencies.html":{}}}],["3.15.2",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":2213,"title":{},"body":{"license.html":{}}}],["321.654.987",{"_index":838,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["34e588103949",{"_index":34,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["36e8f88f",{"_index":23,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["37",{"_index":2458,"title":{},"body":{"overview.html":{}}}],["4",{"_index":504,"title":{},"body":{"injectables/ArtistService.html":{},"license.html":{}}}],["4.0.0",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["407e",{"_index":910,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["4202",{"_index":893,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateUserDto.html":{}}}],["43",{"_index":824,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["4470",{"_index":32,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["4751",{"_index":900,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/LoginProfileDto.html":{}}}],["48c0",{"_index":31,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["495e",{"_index":833,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["4cc5",{"_index":25,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["5",{"_index":499,"title":{},"body":{"injectables/ArtistService.html":{},"license.html":{}}}],["5.0.1",{"_index":1557,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":774,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["50)@apiproperty({description",{"_index":755,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["5ec96e39",{"_index":891,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateUserDto.html":{}}}],["60",{"_index":2205,"title":{},"body":{"license.html":{}}}],["6b",{"_index":2037,"title":{},"body":{"license.html":{}}}],["6d",{"_index":2063,"title":{},"body":{"license.html":{}}}],["7",{"_index":1972,"title":{},"body":{"license.html":{}}}],["7.2.0",{"_index":1571,"title":{},"body":{"dependencies.html":{}}}],["76b73966",{"_index":908,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["7a1a",{"_index":892,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateUserDto.html":{}}}],["8.0.0",{"_index":1548,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["8a4b",{"_index":899,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/LoginProfileDto.html":{}}}],["8becfdc625f2",{"_index":835,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["8c35",{"_index":911,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["8cf4",{"_index":33,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["928c",{"_index":909,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["9eee",{"_index":834,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["_",{"_index":2489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_count",{"_index":505,"title":{},"body":{"injectables/ArtistService.html":{}}}],["ab065335",{"_index":831,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["ability",{"_index":2117,"title":{},"body":{"license.html":{}}}],["above",{"_index":2186,"title":{},"body":{"license.html":{}}}],["absence",{"_index":1973,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":2400,"title":{},"body":{"license.html":{}}}],["absolutely",{"_index":2430,"title":{},"body":{"license.html":{}}}],["abuse",{"_index":1709,"title":{},"body":{"license.html":{}}}],["accept",{"_index":2218,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":2217,"title":{},"body":{"license.html":{}}}],["access",{"_index":1697,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":2288,"title":{},"body":{"license.html":{}}}],["accompanied",{"_index":2017,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":2404,"title":{},"body":{"license.html":{}}}],["accord",{"_index":1971,"title":{},"body":{"license.html":{}}}],["according",{"_index":2395,"title":{},"body":{"license.html":{}}}],["account",{"_index":1297,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UserController.html":{}}}],["account')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":1417,"title":{},"body":{"controllers/UserController.html":{}}}],["account')@useguards(undefined)@apibearerauth()@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":1408,"title":{},"body":{"controllers/UserController.html":{}}}],["accounts",{"_index":943,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"injectables/ProfileService.html":{},"classes/UserPlan.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["achieve",{"_index":2408,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":1904,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":2269,"title":{},"body":{"license.html":{}}}],["actions",{"_index":2226,"title":{},"body":{"license.html":{}}}],["activities",{"_index":1793,"title":{},"body":{"license.html":{}}}],["activity",{"_index":2314,"title":{},"body":{"license.html":{}}}],["actual",{"_index":2293,"title":{},"body":{"license.html":{}}}],["actually",{"_index":2086,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":1766,"title":{},"body":{"license.html":{}}}],["add",{"_index":20,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileFavoriteSongController.html":{},"license.html":{}}}],["added",{"_index":1157,"title":{},"body":{"injectables/PlaylistService.html":{},"license.html":{}}}],["addition",{"_index":960,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["additional",{"_index":1985,"title":{},"body":{"license.html":{}}}],["addplaylistfavorite",{"_index":1032,"title":{},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{}}}],["addplaylistfavorite(userid",{"_index":1109,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["addplaylistfavorite(userprofileid",{"_index":1039,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["address",{"_index":2347,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":1763,"title":{},"body":{"license.html":{}}}],["addsongplaylistdto",{"_index":1,"title":{"classes/AddSongPlaylistDto.html":{}},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"coverage.html":{}}}],["addsongtoplaylist",{"_index":1033,"title":{},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{}}}],["addsongtoplaylist(userid",{"_index":1112,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["addsongtoplaylist(userprofileid",{"_index":1045,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["admin",{"_index":45,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"classes/CreateAdminDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateAdminDto.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin(@loggedadmin",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin(admin",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin)'})@httpcode(httpstatus.no_content",{"_index":693,"title":{},"body":{"controllers/CountryController.html":{}}}],["admin.controller",{"_index":165,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.decorator",{"_index":116,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["admin.decorator.ts",{"_index":1533,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.dto",{"_index":122,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["admin.dto.ts",{"_index":739,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["admin.dto.ts:18",{"_index":759,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:27",{"_index":750,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:35",{"_index":753,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:46",{"_index":766,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:54",{"_index":745,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.password",{"_index":608,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["admin.service",{"_index":120,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{}}}],["admin.usercategoryname",{"_index":2485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin/admin.module",{"_index":373,"title":{},"body":{"modules/AppModule.html":{}}}],["admin@admin.com",{"_index":752,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["admincontroller",{"_index":63,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":150,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":90,"title":{},"body":{"controllers/AdminController.html":{}}}],["adminselect",{"_index":172,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminservice",{"_index":119,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adopted",{"_index":1942,"title":{},"body":{"license.html":{}}}],["ads",{"_index":957,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["adversely",{"_index":2126,"title":{},"body":{"license.html":{}}}],["advised",{"_index":2392,"title":{},"body":{"license.html":{}}}],["affects",{"_index":2127,"title":{},"body":{"license.html":{}}}],["affero",{"_index":2336,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":2250,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":1899,"title":{},"body":{"license.html":{}}}],["against",{"_index":1960,"title":{},"body":{"license.html":{}}}],["aggregate",{"_index":2002,"title":{},"body":{"license.html":{}}}],["agree",{"_index":2331,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":2378,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":2279,"title":{},"body":{"license.html":{}}}],["aim",{"_index":1705,"title":{},"body":{"license.html":{}}}],["album",{"_index":235,"title":{"classes/Album.html":{}},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateSongDto.html":{},"injectables/ProfileFavoriteSongService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"coverage.html":{}}}],["album.controller",{"_index":298,"title":{},"body":{"modules/AlbumModule.html":{}}}],["album.dto",{"_index":277,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/UpdateAlbumDto.html":{}}}],["album.dto.ts",{"_index":781,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["album.dto.ts:11",{"_index":790,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:19",{"_index":794,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:27",{"_index":785,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.jpg",{"_index":784,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.service",{"_index":276,"title":{},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{}}}],["album/album.module",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["albumcontroller",{"_index":248,"title":{"controllers/AlbumController.html":{}},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"coverage.html":{}}}],["albumid",{"_index":257,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/CreateSongDto.html":{},"classes/Music.html":{}}}],["albummodule",{"_index":293,"title":{"modules/AlbumModule.html":{}},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["albums",{"_index":262,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"classes/CreateArtistDto.html":{}}}],["albums[0].albums.length",{"_index":318,"title":{},"body":{"injectables/AlbumService.html":{}}}],["albumservice",{"_index":275,"title":{"injectables/AlbumService.html":{}},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"coverage.html":{},"overview.html":{}}}],["algum",{"_index":2474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["algumas",{"_index":1593,"title":{},"body":{"index.html":{}}}],["all')@apioperation({summary",{"_index":88,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/CountryController.html":{}}}],["allcategories",{"_index":674,"title":{},"body":{"injectables/CategoryService.html":{}}}],["allcategories.length",{"_index":675,"title":{},"body":{"injectables/CategoryService.html":{}}}],["allcountries",{"_index":733,"title":{},"body":{"injectables/CountryService.html":{}}}],["allcountries.length",{"_index":734,"title":{},"body":{"injectables/CountryService.html":{}}}],["alleging",{"_index":2258,"title":{},"body":{"license.html":{}}}],["allfavorites",{"_index":1269,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["allfavorites.songs.length",{"_index":1270,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["allow",{"_index":1732,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":1615,"title":{},"body":{"license.html":{}}}],["allusers",{"_index":1514,"title":{},"body":{"injectables/UserService.html":{}}}],["allusers.length",{"_index":1515,"title":{},"body":{"injectables/UserService.html":{}}}],["alone",{"_index":827,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["along",{"_index":1975,"title":{},"body":{"license.html":{}}}],["already",{"_index":1156,"title":{},"body":{"injectables/PlaylistService.html":{},"license.html":{}}}],["alternative",{"_index":2033,"title":{},"body":{"license.html":{}}}],["although",{"_index":1701,"title":{},"body":{"license.html":{}}}],["american",{"_index":802,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["ancillary",{"_index":2220,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":597,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["angeles",{"_index":808,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["anti",{"_index":1929,"title":{},"body":{"license.html":{}}}],["anyone",{"_index":1982,"title":{},"body":{"license.html":{}}}],["anything",{"_index":1779,"title":{},"body":{"license.html":{}}}],["ao",{"_index":2477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":398,"title":{},"body":{"injectables/AppService.html":{}}}],["apibearerauth",{"_index":111,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["apioperation",{"_index":112,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["apiproperty",{"_index":37,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/UpdateAdminDto.html":{}}}],["apiproperty({description",{"_index":1006,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["apitags",{"_index":113,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["apitags('album",{"_index":278,"title":{},"body":{"controllers/AlbumController.html":{}}}],["apitags('artist",{"_index":451,"title":{},"body":{"controllers/ArtistController.html":{}}}],["apitags('auth",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":644,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('country",{"_index":705,"title":{},"body":{"controllers/CountryController.html":{}}}],["apitags('manager",{"_index":127,"title":{},"body":{"controllers/AdminController.html":{}}}],["apitags('playlist",{"_index":1077,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["apitags('profile",{"_index":1215,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["apitags('song",{"_index":1316,"title":{},"body":{"controllers/SongController.html":{}}}],["apitags('status",{"_index":352,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('user",{"_index":1428,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["aplication",{"_index":332,"title":{},"body":{"controllers/AppController.html":{}}}],["aplicação",{"_index":344,"title":{},"body":{"controllers/AppController.html":{}}}],["app",{"_index":1188,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":1193,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":375,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":351,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":325,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":1785,"title":{},"body":{"license.html":{}}}],["applications",{"_index":2447,"title":{},"body":{"license.html":{}}}],["applied",{"_index":1740,"title":{},"body":{"license.html":{}}}],["applies",{"_index":1635,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1639,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":358,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1808,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":1965,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":2399,"title":{},"body":{"license.html":{}}}],["appservice",{"_index":350,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["area",{"_index":1711,"title":{},"body":{"license.html":{}}}],["arise",{"_index":1719,"title":{},"body":{"license.html":{}}}],["arising",{"_index":2382,"title":{},"body":{"license.html":{}}}],["around",{"_index":823,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["arrange",{"_index":2289,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":2302,"title":{},"body":{"license.html":{}}}],["article",{"_index":1938,"title":{},"body":{"license.html":{}}}],["artist",{"_index":251,"title":{"classes/Artist.html":{}},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateArtistDto.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["artist')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{}}}],["artist(@loggedartist",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["artist(artist",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{}}}],["artist)'})@httpcode(httpstatus.no_content",{"_index":259,"title":{},"body":{"controllers/AlbumController.html":{}}}],["artist.controller",{"_index":478,"title":{},"body":{"modules/ArtistModule.html":{}}}],["artist.decorator",{"_index":274,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/SongController.html":{}}}],["artist.decorator.ts",{"_index":1535,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["artist.dto",{"_index":449,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/UpdateArtistDto.html":{}}}],["artist.dto.ts",{"_index":798,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["artist.dto.ts:19",{"_index":846,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:26",{"_index":845,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:36",{"_index":840,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:44",{"_index":842,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:55",{"_index":848,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:63",{"_index":830,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:72",{"_index":828,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:80",{"_index":836,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.password",{"_index":609,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["artist.service",{"_index":448,"title":{},"body":{"controllers/ArtistController.html":{},"modules/ArtistModule.html":{}}}],["artist.usercategoryname",{"_index":2487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artist/:id",{"_index":1324,"title":{},"body":{"controllers/SongController.html":{}}}],["artist/:id')@apioperation({summary",{"_index":1313,"title":{},"body":{"controllers/SongController.html":{}}}],["artist/artist.module",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["artist@gmail.com",{"_index":841,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artistcontroller",{"_index":413,"title":{"controllers/ArtistController.html":{}},"body":{"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"coverage.html":{}}}],["artistdid",{"_index":1346,"title":{},"body":{"injectables/SongService.html":{}}}],["artistid",{"_index":237,"title":{},"body":{"classes/Album.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/Music.html":{},"injectables/SongService.html":{}}}],["artistmodule",{"_index":362,"title":{"modules/ArtistModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules.html":{},"overview.html":{}}}],["artists",{"_index":428,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["artists.length",{"_index":503,"title":{},"body":{"injectables/ArtistService.html":{}}}],["artistservice",{"_index":447,"title":{"injectables/ArtistService.html":{}},"body":{"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"coverage.html":{},"overview.html":{}}}],["asking",{"_index":1655,"title":{},"body":{"license.html":{}}}],["assert",{"_index":1676,"title":{},"body":{"license.html":{}}}],["assets",{"_index":2240,"title":{},"body":{"license.html":{}}}],["associate",{"_index":253,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/SongController.html":{}}}],["associated",{"_index":1878,"title":{},"body":{"license.html":{}}}],["assume",{"_index":2371,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":2403,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":2174,"title":{},"body":{"license.html":{}}}],["assures",{"_index":1743,"title":{},"body":{"license.html":{}}}],["async",{"_index":173,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["attach",{"_index":2410,"title":{},"body":{"license.html":{}}}],["attempt",{"_index":2189,"title":{},"body":{"license.html":{}}}],["attributed",{"_index":1692,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":2155,"title":{},"body":{"license.html":{}}}],["auth",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":579,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":509,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":1011,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["authentication",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":109,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["authmodule",{"_index":363,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2154,"title":{},"body":{"license.html":{},"properties.html":{}}}],["authorization",{"_index":2100,"title":{},"body":{"license.html":{}}}],["authorized",{"_index":998,"title":{},"body":{"injectables/JwtStrategy.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["authorizes",{"_index":2264,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":2305,"title":{},"body":{"license.html":{}}}],["authors",{"_index":1638,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":548,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["automatic",{"_index":2230,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":1890,"title":{},"body":{"license.html":{}}}],["available",{"_index":936,"title":{},"body":{"classes/CreateUserDto.html":{},"license.html":{}}}],["avoid",{"_index":1737,"title":{},"body":{"license.html":{}}}],["await",{"_index":213,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["away",{"_index":1623,"title":{},"body":{"license.html":{}}}],["b",{"_index":1852,"title":{},"body":{"license.html":{}}}],["b593",{"_index":894,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateUserDto.html":{}}}],["b6e9",{"_index":832,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["ba327f4d200c",{"_index":912,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["back",{"_index":1585,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":198,"title":{},"body":{"injectables/AdminService.html":{},"injectables/UserService.html":{}}}],["badrequestexception('the",{"_index":2495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["band",{"_index":805,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["barack",{"_index":884,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["based",{"_index":1775,"title":{},"body":{"license.html":{}}}],["baseurl",{"_index":354,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["basic",{"_index":1891,"title":{},"body":{"license.html":{}}}],["bcrypt",{"_index":201,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(data.password",{"_index":508,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["bcrypt.hash(dto.password",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["bd74",{"_index":26,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["bdfe",{"_index":901,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/LoginProfileDto.html":{}}}],["behalf",{"_index":1918,"title":{},"body":{"license.html":{}}}],["being",{"_index":2061,"title":{},"body":{"license.html":{}}}],["believe",{"_index":2298,"title":{},"body":{"license.html":{}}}],["below",{"_index":1924,"title":{},"body":{"license.html":{}}}],["benefit",{"_index":2292,"title":{},"body":{"license.html":{}}}],["best",{"_index":2407,"title":{},"body":{"license.html":{}}}],["between",{"_index":958,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["beyond",{"_index":2004,"title":{},"body":{"license.html":{}}}],["blue",{"_index":1587,"title":{},"body":{"index.html":{}}}],["body",{"_index":101,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"license.html":{}}}],["boolean",{"_index":871,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"classes/Playlist.html":{}}}],["bootstrap",{"_index":1540,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":1685,"title":{},"body":{"license.html":{}}}],["box",{"_index":2437,"title":{},"body":{"license.html":{}}}],["brings",{"_index":950,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["browse",{"_index":2456,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2454,"title":{},"body":{"modules.html":{}}}],["business",{"_index":2311,"title":{},"body":{"license.html":{}}}],["c",{"_index":1604,"title":{},"body":{"license.html":{}}}],["c079",{"_index":24,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["c6df1b67f0eb",{"_index":895,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateUserDto.html":{}}}],["california",{"_index":809,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["called",{"_index":1773,"title":{},"body":{"license.html":{}}}],["carry",{"_index":1978,"title":{},"body":{"license.html":{}}}],["case",{"_index":1834,"title":{},"body":{"license.html":{}}}],["cases",{"_index":2081,"title":{},"body":{"license.html":{}}}],["catalog",{"_index":952,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["catch(handleerror",{"_index":217,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["categorie",{"_index":627,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories",{"_index":632,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories')@apioperation({summary",{"_index":631,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category",{"_index":610,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateSongDto.html":{},"injectables/SongService.html":{},"coverage.html":{}}}],["category')@apioperation({summary",{"_index":622,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category.controller",{"_index":660,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto",{"_index":643,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":854,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:11",{"_index":855,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.service",{"_index":642,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["category/:categoryid",{"_index":649,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category/:categoryid')@apioperation({summary",{"_index":636,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category/:categoryid')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":626,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category/category.module",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["categorycontroller",{"_index":616,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categoryid",{"_index":624,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateSongDto.html":{},"injectables/SongService.html":{}}}],["categorymodule",{"_index":364,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryservice",{"_index":641,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["categorysongs",{"_index":1350,"title":{},"body":{"injectables/SongService.html":{}}}],["cause",{"_index":2008,"title":{},"body":{"license.html":{}}}],["cease",{"_index":2194,"title":{},"body":{"license.html":{}}}],["certain",{"_index":1658,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":2207,"title":{},"body":{"license.html":{}}}],["change",{"_index":1626,"title":{},"body":{"license.html":{}}}],["changed",{"_index":1690,"title":{},"body":{"license.html":{}}}],["changing",{"_index":1614,"title":{},"body":{"license.html":{}}}],["characterized",{"_index":2114,"title":{},"body":{"license.html":{}}}],["charge",{"_index":1643,"title":{},"body":{"license.html":{}}}],["checkifplaylistisprivate",{"_index":1103,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["checkifplaylistisprivate(playlistid",{"_index":1114,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["choose",{"_index":969,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["choosing",{"_index":2359,"title":{},"body":{"license.html":{}}}],["cinco",{"_index":1583,"title":{},"body":{"index.html":{}}}],["circumstances",{"_index":1922,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":1930,"title":{},"body":{"license.html":{}}}],["civil",{"_index":2402,"title":{},"body":{"license.html":{}}}],["claim",{"_index":2255,"title":{},"body":{"license.html":{}}}],["claims",{"_index":2266,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/ProfileFavoriteSong.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"classes/UserPlan.html":{},"classes/UserProfileId.html":{}},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/ProfileFavoriteSong.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"classes/UserPlan.html":{},"classes/UserProfileId.html":{},"overview.html":{}}}],["clear",{"_index":2046,"title":{},"body":{"license.html":{}}}],["clearly",{"_index":1682,"title":{},"body":{"license.html":{}}}],["closely",{"_index":2398,"title":{},"body":{"license.html":{}}}],["cluster_adminmodule",{"_index":153,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":155,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":154,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_albummodule",{"_index":294,"title":{},"body":{"modules/AlbumModule.html":{},"overview.html":{}}}],["cluster_albummodule_imports",{"_index":296,"title":{},"body":{"modules/AlbumModule.html":{}}}],["cluster_albummodule_providers",{"_index":295,"title":{},"body":{"modules/AlbumModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_artistmodule",{"_index":474,"title":{},"body":{"modules/ArtistModule.html":{},"overview.html":{}}}],["cluster_artistmodule_imports",{"_index":475,"title":{},"body":{"modules/ArtistModule.html":{}}}],["cluster_artistmodule_providers",{"_index":476,"title":{},"body":{"modules/ArtistModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":572,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":573,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":574,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":656,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":657,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":658,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_countrymodule",{"_index":718,"title":{},"body":{"modules/CountryModule.html":{},"overview.html":{}}}],["cluster_countrymodule_imports",{"_index":719,"title":{},"body":{"modules/CountryModule.html":{}}}],["cluster_countrymodule_providers",{"_index":720,"title":{},"body":{"modules/CountryModule.html":{},"overview.html":{}}}],["cluster_playlistmodule",{"_index":1097,"title":{},"body":{"modules/PlaylistModule.html":{},"overview.html":{}}}],["cluster_playlistmodule_imports",{"_index":1098,"title":{},"body":{"modules/PlaylistModule.html":{}}}],["cluster_playlistmodule_providers",{"_index":1099,"title":{},"body":{"modules/PlaylistModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1175,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1176,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1177,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_profilefavoritesongmodule",{"_index":1249,"title":{},"body":{"modules/ProfileFavoriteSongModule.html":{},"overview.html":{}}}],["cluster_profilefavoritesongmodule_imports",{"_index":1250,"title":{},"body":{"modules/ProfileFavoriteSongModule.html":{}}}],["cluster_profilefavoritesongmodule_providers",{"_index":1251,"title":{},"body":{"modules/ProfileFavoriteSongModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":1278,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_imports",{"_index":1280,"title":{},"body":{"modules/ProfileModule.html":{}}}],["cluster_profilemodule_providers",{"_index":1279,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_songmodule",{"_index":1328,"title":{},"body":{"modules/SongModule.html":{},"overview.html":{}}}],["cluster_songmodule_imports",{"_index":1330,"title":{},"body":{"modules/SongModule.html":{}}}],["cluster_songmodule_providers",{"_index":1329,"title":{},"body":{"modules/SongModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1443,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1444,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1445,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userplanmodule",{"_index":1476,"title":{},"body":{"modules/UserPlanModule.html":{},"overview.html":{}}}],["cluster_userplanmodule_imports",{"_index":1477,"title":{},"body":{"modules/UserPlanModule.html":{}}}],["cluster_userplanmodule_providers",{"_index":1478,"title":{},"body":{"modules/UserPlanModule.html":{},"overview.html":{}}}],["code",{"_index":682,"title":{},"body":{"classes/Country.html":{},"injectables/CountryService.html":{},"classes/CreateCountryDto.html":{},"license.html":{}}}],["collect",{"_index":2333,"title":{},"body":{"license.html":{}}}],["com",{"_index":345,"title":{},"body":{"controllers/AppController.html":{}}}],["combination",{"_index":2341,"title":{},"body":{"license.html":{}}}],["combine",{"_index":2338,"title":{},"body":{"license.html":{}}}],["combined",{"_index":1998,"title":{},"body":{"license.html":{}}}],["comes",{"_index":1983,"title":{},"body":{"license.html":{}}}],["commands",{"_index":1820,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":2091,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":2280,"title":{},"body":{"license.html":{}}}],["common",{"_index":2085,"title":{},"body":{"license.html":{}}}],["communication",{"_index":1886,"title":{},"body":{"license.html":{}}}],["compilation",{"_index":1993,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":2003,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":2316,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":1864,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":2236,"title":{},"body":{"license.html":{}}}],["comply",{"_index":1915,"title":{},"body":{"license.html":{}}}],["component",{"_index":1851,"title":{},"body":{"license.html":{}}}],["computer",{"_index":1789,"title":{},"body":{"license.html":{}}}],["computers",{"_index":1736,"title":{},"body":{"license.html":{}}}],["concerning",{"_index":2340,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":2348,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":2310,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":1748,"title":{},"body":{"license.html":{}}}],["confirmation",{"_index":829,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{}}}],["confirmação",{"_index":742,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["confirmpassword",{"_index":740,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"miscellaneous/variables.html":{}}}],["connect",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["connection",{"_index":2300,"title":{},"body":{"license.html":{}}}],["consequence",{"_index":2222,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":2381,"title":{},"body":{"license.html":{}}}],["consider",{"_index":2445,"title":{},"body":{"license.html":{}}}],["considered",{"_index":2176,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":2273,"title":{},"body":{"license.html":{}}}],["console.error(error",{"_index":2472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conspicuously",{"_index":1964,"title":{},"body":{"license.html":{}}}],["const",{"_index":211,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constantly",{"_index":1730,"title":{},"body":{"license.html":{}}}],["constitutes",{"_index":1903,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":175,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["constructor(prisma",{"_index":176,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":129,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["construed",{"_index":2321,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":2069,"title":{},"body":{"license.html":{}}}],["contact",{"_index":2423,"title":{},"body":{"license.html":{}}}],["contain",{"_index":2317,"title":{},"body":{"license.html":{}}}],["containing",{"_index":2157,"title":{},"body":{"license.html":{}}}],["contains",{"_index":2179,"title":{},"body":{"license.html":{}}}],["content",{"_index":963,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["contents",{"_index":2276,"title":{},"body":{"license.html":{}}}],["context",{"_index":1857,"title":{},"body":{"license.html":{}}}],["continue",{"_index":2120,"title":{},"body":{"license.html":{}}}],["continued",{"_index":2105,"title":{},"body":{"license.html":{}}}],["contractual",{"_index":2173,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":2327,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":1627,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":2263,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":2265,"title":{},"body":{"license.html":{}}}],["control",{"_index":1871,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":2268,"title":{},"body":{"license.html":{}}}],["controller",{"_index":62,"title":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":126,"title":{},"body":{"controllers/AdminController.html":{}}}],["controller('album",{"_index":279,"title":{},"body":{"controllers/AlbumController.html":{}}}],["controller('artist",{"_index":452,"title":{},"body":{"controllers/ArtistController.html":{}}}],["controller('auth",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('category",{"_index":645,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('country",{"_index":706,"title":{},"body":{"controllers/CountryController.html":{}}}],["controller('playlist",{"_index":1078,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["controller('profile",{"_index":1216,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('song",{"_index":1317,"title":{},"body":{"controllers/SongController.html":{}}}],["controller('tracks",{"_index":1240,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["controller('user",{"_index":1429,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["controllers",{"_index":64,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"overview.html":{}}}],["convenient",{"_index":1811,"title":{},"body":{"license.html":{}}}],["convey",{"_index":1795,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":2304,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":2115,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":1804,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":2172,"title":{},"body":{"license.html":{}}}],["copies",{"_index":821,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{}}}],["copy",{"_index":1610,"title":{},"body":{"license.html":{}}}],["copying",{"_index":1749,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":1617,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1603,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":1759,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":1920,"title":{},"body":{"license.html":{}}}],["correction",{"_index":2375,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":1867,"title":{},"body":{"license.html":{}}}],["cost",{"_index":2031,"title":{},"body":{"license.html":{}}}],["counterclaim",{"_index":2256,"title":{},"body":{"license.html":{}}}],["countries",{"_index":695,"title":{},"body":{"controllers/CountryController.html":{},"license.html":{}}}],["country",{"_index":680,"title":{"classes/Country.html":{}},"body":{"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCountryDto.html":{},"coverage.html":{},"license.html":{}}}],["country,controller",{"_index":722,"title":{},"body":{"modules/CountryModule.html":{}}}],["country.dto",{"_index":704,"title":{},"body":{"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/UpdateCountryDto.html":{}}}],["country.dto.ts",{"_index":857,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["country.dto.ts:11",{"_index":861,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:20",{"_index":860,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.service",{"_index":703,"title":{},"body":{"controllers/CountryController.html":{},"modules/CountryModule.html":{}}}],["country/country.module",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["countrycontroller",{"_index":688,"title":{"controllers/CountryController.html":{}},"body":{"controllers/CountryController.html":{},"modules/CountryModule.html":{},"coverage.html":{}}}],["countryid",{"_index":400,"title":{},"body":{"classes/Artist.html":{},"classes/CreateArtistDto.html":{}}}],["countrymodule",{"_index":365,"title":{"modules/CountryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CountryModule.html":{},"modules.html":{},"overview.html":{}}}],["countryrelacion",{"_index":496,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/AuthService.html":{}}}],["countryservice",{"_index":702,"title":{"injectables/CountryService.html":{}},"body":{"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"coverage.html":{},"overview.html":{}}}],["course",{"_index":2435,"title":{},"body":{"license.html":{}}}],["court",{"_index":2326,"title":{},"body":{"license.html":{}}}],["courts",{"_index":2397,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":2283,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1518,"title":{"coverage.html":{}},"body":{"coverage.html":{},"license.html":{}}}],["covered",{"_index":1776,"title":{},"body":{"license.html":{}}}],["cpf",{"_index":47,"title":{},"body":{"classes/Admin.html":{},"injectables/AdminService.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["create",{"_index":68,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateSongDto.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["create(/*@loggedmanager",{"_index":133,"title":{},"body":{"controllers/AdminController.html":{}}}],["create(@body",{"_index":453,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/UserController.html":{}}}],["create(@loggedadmin",{"_index":646,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["create(@loggedartist",{"_index":280,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/SongController.html":{}}}],["create(admin",{"_index":618,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["create(artist",{"_index":250,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/SongController.html":{}}}],["create(artistid",{"_index":302,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/SongService.html":{}}}],["create(dto",{"_index":73,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"controllers/UserController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["create(userid",{"_index":1116,"title":{},"body":{"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["create(userprofileid",{"_index":1050,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["createadmindto",{"_index":74,"title":{"classes/CreateAdminDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["createalbumdto",{"_index":252,"title":{"classes/CreateAlbumDto.html":{}},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/CreateAlbumDto.html":{},"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["createartistdto",{"_index":418,"title":{"classes/CreateArtistDto.html":{}},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/CreateArtistDto.html":{},"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["createcategorydto",{"_index":619,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createcountrydto",{"_index":690,"title":{"classes/CreateCountryDto.html":{}},"body":{"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["created",{"_index":254,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/SongController.html":{}}}],["createdat",{"_index":49,"title":{},"body":{"classes/Admin.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/User.html":{},"classes/UserPlan.html":{},"injectables/UserService.html":{}}}],["createmany",{"_index":1351,"title":{},"body":{"injectables/SongService.html":{}}}],["createparamdecorator",{"_index":2488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createparamdecorator((_",{"_index":2480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createplaylistdto",{"_index":864,"title":{"classes/CreatePlaylistDto.html":{}},"body":{"classes/CreatePlaylistDto.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"classes/UpdatePlaylistDto.html":{},"coverage.html":{}}}],["createprofiledto",{"_index":879,"title":{"classes/CreateProfileDto.html":{}},"body":{"classes/CreateProfileDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["createprofilefavoritesongdto",{"_index":887,"title":{"classes/CreateProfileFavoriteSongDto.html":{}},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"coverage.html":{}}}],["createsongdto",{"_index":896,"title":{"classes/CreateSongDto.html":{}},"body":{"classes/CreateSongDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":921,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserplandto",{"_index":939,"title":{"classes/CreateUserPlanDto.html":{}},"body":{"classes/CreateUserPlanDto.html":{},"classes/UpdateUserPlanDto.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"coverage.html":{}}}],["criterion",{"_index":1826,"title":{},"body":{"license.html":{}}}],["cross",{"_index":2254,"title":{},"body":{"license.html":{}}}],["ctx",{"_index":2481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cure",{"_index":2212,"title":{},"body":{"license.html":{}}}],["curso",{"_index":1584,"title":{},"body":{"index.html":{}}}],["customarily",{"_index":2020,"title":{},"body":{"license.html":{}}}],["customer",{"_index":2026,"title":{},"body":{"license.html":{}}}],["d",{"_index":1991,"title":{},"body":{"license.html":{}}}],["d450edf0",{"_index":30,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["da",{"_index":343,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{},"index.html":{}}}],["damages",{"_index":2379,"title":{},"body":{"license.html":{}}}],["danger",{"_index":1739,"title":{},"body":{"license.html":{}}}],["data",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"classes/LoginUserResponseDto.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["data.password",{"_index":231,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["date",{"_index":55,"title":{},"body":{"classes/Admin.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/CreateArtistDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/User.html":{},"classes/UserPlan.html":{},"license.html":{}}}],["days",{"_index":2206,"title":{},"body":{"license.html":{}}}],["de",{"_index":342,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["december",{"_index":1944,"title":{},"body":{"license.html":{}}}],["decide",{"_index":2356,"title":{},"body":{"license.html":{}}}],["declining",{"_index":2164,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"classes/UpdateAdminDto.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"classes/UserProfileId.html":{}}}],["deemed",{"_index":1932,"title":{},"body":{"license.html":{}}}],["default",{"_index":192,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":167,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["defective",{"_index":2370,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":2324,"title":{},"body":{"license.html":{}}}],["defined",{"_index":28,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"license.html":{}}}],["definition",{"_index":1876,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":1753,"title":{},"body":{"license.html":{}}}],["delete",{"_index":69,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["delete('/delete",{"_index":468,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/UserController.html":{}}}],["delete('/delete')@useguards(undefined)@apibearerauth()@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":420,"title":{},"body":{"controllers/ArtistController.html":{}}}],["delete('/delete/:adminid",{"_index":145,"title":{},"body":{"controllers/AdminController.html":{}}}],["delete('/delete/:adminid')@apioperation({summary",{"_index":83,"title":{},"body":{"controllers/AdminController.html":{}}}],["delete('/delete/:artistid",{"_index":470,"title":{},"body":{"controllers/ArtistController.html":{}}}],["delete('/delete/:artistid')@useguards(undefined)@apibearerauth()@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":424,"title":{},"body":{"controllers/ArtistController.html":{}}}],["delete('/delete/:countryid",{"_index":716,"title":{},"body":{"controllers/CountryController.html":{}}}],["delete('/delete/:countryid')@apioperation({summary",{"_index":692,"title":{},"body":{"controllers/CountryController.html":{}}}],["delete(':id",{"_index":1326,"title":{},"body":{"controllers/SongController.html":{},"controllers/UserPlanController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":1305,"title":{},"body":{"controllers/SongController.html":{},"controllers/UserPlanController.html":{}}}],["delete('delete",{"_index":1057,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["delete('delete/:albumid",{"_index":290,"title":{},"body":{"controllers/AlbumController.html":{}}}],["delete('delete/:albumid')@apioperation({summary",{"_index":258,"title":{},"body":{"controllers/AlbumController.html":{}}}],["delete('delete/:id",{"_index":1440,"title":{},"body":{"controllers/UserController.html":{}}}],["delete('delete/:id')@useguards(undefined)@apibearerauth()@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":1411,"title":{},"body":{"controllers/UserController.html":{}}}],["delete('delete/:playlistid",{"_index":1089,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["delete('delete/:playlistid')@apioperation({summary",{"_index":1053,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["delete('delete/:profileid",{"_index":1223,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete('delete/:profileid')@apioperation({summary",{"_index":1205,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete('delete/:songid",{"_index":1247,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["delete('delete/:songid')@apioperation({summary",{"_index":1234,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["delete('remove",{"_index":625,"title":{},"body":{"controllers/CategoryController.html":{}}}],["delete(@loggedadmin",{"_index":654,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["delete(@loggedartist",{"_index":291,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/SongController.html":{}}}],["delete(@loggedmanager",{"_index":147,"title":{},"body":{"controllers/AdminController.html":{}}}],["delete(admin",{"_index":82,"title":{},"body":{"controllers/AdminController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["delete(artist",{"_index":256,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/SongController.html":{}}}],["delete(artistid",{"_index":304,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/SongService.html":{}}}],["delete(categoryid",{"_index":664,"title":{},"body":{"injectables/CategoryService.html":{}}}],["delete(id",{"_index":182,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CountryService.html":{},"injectables/UserPlanService.html":{}}}],["delete(userid",{"_index":1118,"title":{},"body":{"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["delete(userprofileid",{"_index":1052,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["deleteartist",{"_index":415,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["deleteartist(@loggedadmin",{"_index":471,"title":{},"body":{"controllers/ArtistController.html":{}}}],["deleteartist(admin",{"_index":423,"title":{},"body":{"controllers/ArtistController.html":{}}}],["deleteartist(id",{"_index":483,"title":{},"body":{"injectables/ArtistService.html":{}}}],["deletemyaccount",{"_index":1401,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletemyaccount(@loggeduser",{"_index":1438,"title":{},"body":{"controllers/UserController.html":{}}}],["deletemyaccount(userid",{"_index":1499,"title":{},"body":{"injectables/UserService.html":{}}}],["deletemyaccount(userprofileid",{"_index":1407,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteplaylistfavorite",{"_index":1034,"title":{},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{}}}],["deleteplaylistfavorite(userid",{"_index":1120,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["deleteplaylistfavorite(userprofileid",{"_index":1056,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["deletesongtoplaylist",{"_index":1035,"title":{},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{}}}],["deletesongtoplaylist(userid",{"_index":1122,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["deletesongtoplaylist(userprofileid",{"_index":1059,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["deleteuser",{"_index":1402,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@loggedadmin",{"_index":1441,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(admin",{"_index":1410,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":1501,"title":{},"body":{"injectables/UserService.html":{}}}],["denied",{"_index":2123,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":2281,"title":{},"body":{"license.html":{}}}],["deny",{"_index":1696,"title":{},"body":{"license.html":{}}}],["denying",{"_index":1654,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":152,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprive",{"_index":2290,"title":{},"body":{"license.html":{}}}],["description",{"_index":42,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/AppController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UserPlan.html":{},"properties.html":{}}}],["desenvolver",{"_index":1592,"title":{},"body":{"index.html":{}}}],["desenvolvido",{"_index":1581,"title":{},"body":{"index.html":{}}}],["designated",{"_index":2039,"title":{},"body":{"license.html":{}}}],["designed",{"_index":1622,"title":{},"body":{"license.html":{}}}],["detail",{"_index":2346,"title":{},"body":{"license.html":{}}}],["details",{"_index":2422,"title":{},"body":{"license.html":{}}}],["details.the",{"_index":2433,"title":{},"body":{"license.html":{}}}],["determining",{"_index":2079,"title":{},"body":{"license.html":{}}}],["develop",{"_index":2405,"title":{},"body":{"license.html":{}}}],["developers",{"_index":1672,"title":{},"body":{"license.html":{}}}],["development",{"_index":1734,"title":{},"body":{"license.html":{}}}],["devices",{"_index":1695,"title":{},"body":{"license.html":{}}}],["differ",{"_index":2345,"title":{},"body":{"license.html":{}}}],["different",{"_index":2042,"title":{},"body":{"license.html":{}}}],["differently",{"_index":2150,"title":{},"body":{"license.html":{}}}],["direction",{"_index":1919,"title":{},"body":{"license.html":{}}}],["directions",{"_index":2047,"title":{},"body":{"license.html":{}}}],["directly",{"_index":1781,"title":{},"body":{"license.html":{}}}],["disclaim",{"_index":1955,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":2360,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":2147,"title":{},"body":{"license.html":{}}}],["discriminatory",{"_index":2307,"title":{},"body":{"license.html":{}}}],["display",{"_index":1992,"title":{},"body":{"license.html":{}}}],["displayed",{"_index":2156,"title":{},"body":{"license.html":{}}}],["displays",{"_index":1807,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":2349,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":1611,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2418,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":2312,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1750,"title":{},"body":{"license.html":{}}}],["docs",{"_index":394,"title":{},"body":{"injectables/AppService.html":{}}}],["document",{"_index":1613,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["documentação",{"_index":347,"title":{},"body":{"controllers/AppController.html":{}}}],["documented",{"_index":2133,"title":{},"body":{"license.html":{}}}],["domains",{"_index":1721,"title":{},"body":{"license.html":{}}}],["door",{"_index":916,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["doubtful",{"_index":2080,"title":{},"body":{"license.html":{}}}],["download",{"_index":962,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["downstream",{"_index":2232,"title":{},"body":{"license.html":{}}}],["dto",{"_index":80,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["dto.about",{"_index":495,"title":{},"body":{"injectables/ArtistService.html":{}}}],["dto.albumid",{"_index":1349,"title":{},"body":{"injectables/SongService.html":{}}}],["dto.categoryid.map((categoryid",{"_index":1352,"title":{},"body":{"injectables/SongService.html":{}}}],["dto.confirmpassword",{"_index":210,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["dto.countryid",{"_index":497,"title":{},"body":{"injectables/ArtistService.html":{}}}],["dto.cpf",{"_index":494,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["dto.email",{"_index":216,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["dto.image",{"_index":493,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/PlaylistService.html":{}}}],["dto.name",{"_index":492,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/PlaylistService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["dto.password",{"_index":229,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["dto.private",{"_index":1140,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["dto.songurl",{"_index":1348,"title":{},"body":{"injectables/SongService.html":{}}}],["dto.userplanid",{"_index":1513,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/create",{"_index":121,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["dto/logged",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/login",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/login.dto",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":123,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["durable",{"_index":2019,"title":{},"body":{"license.html":{}}}],["dwelling",{"_index":2078,"title":{},"body":{"license.html":{}}}],["dynamically",{"_index":1880,"title":{},"body":{"license.html":{}}}],["e",{"_index":338,"title":{},"body":{"controllers/AppController.html":{},"license.html":{}}}],["each",{"_index":905,"title":{},"body":{"classes/CreateSongDto.html":{},"license.html":{}}}],["earlier",{"_index":1774,"title":{},"body":{"license.html":{}}}],["edit",{"_index":98,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["edtech",{"_index":1588,"title":{},"body":{"index.html":{}}}],["effect",{"_index":2394,"title":{},"body":{"license.html":{}}}],["effected",{"_index":1953,"title":{},"body":{"license.html":{}}}],["effective",{"_index":1933,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":1741,"title":{},"body":{"license.html":{}}}],["efforts",{"_index":2248,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":2424,"title":{},"body":{"license.html":{}}}],["email",{"_index":50,"title":{},"body":{"classes/Admin.html":{},"injectables/AdminService.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateAdminDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["embodied",{"_index":2014,"title":{},"body":{"license.html":{}}}],["employer",{"_index":2438,"title":{},"body":{"license.html":{}}}],["enable",{"_index":1854,"title":{},"body":{"license.html":{}}}],["enables",{"_index":1797,"title":{},"body":{"license.html":{}}}],["enableshutdownhooks",{"_index":1183,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1185,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":1586,"title":{},"body":{"index.html":{},"license.html":{}}}],["enforce",{"_index":2282,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":1959,"title":{},"body":{"license.html":{}}}],["ensure",{"_index":2053,"title":{},"body":{"license.html":{}}}],["entered",{"_index":2318,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["entire",{"_index":951,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["entirely",{"_index":2335,"title":{},"body":{"license.html":{}}}],["entities/admin.entity",{"_index":125,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["entities/album.entity",{"_index":314,"title":{},"body":{"injectables/AlbumService.html":{}}}],["entities/artist.entity",{"_index":450,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["entities/country,entity",{"_index":731,"title":{},"body":{"injectables/CountryService.html":{}}}],["entities/profile.entity",{"_index":1291,"title":{},"body":{"injectables/ProfileService.html":{}}}],["entities/user",{"_index":1488,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["entities/user.entity",{"_index":1425,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":2237,"title":{},"body":{"license.html":{}}}],["eps",{"_index":815,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["equivalent",{"_index":1906,"title":{},"body":{"license.html":{}}}],["erro",{"_index":2475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["erroneously",{"_index":1693,"title":{},"body":{"license.html":{}}}],["error",{"_index":2465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error.message?.split('\\n",{"_index":2468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error.util",{"_index":208,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["error.util.ts",{"_index":1544,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorlines",{"_index":2467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errorlines[errorlines.length",{"_index":2470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["essential",{"_index":1858,"title":{},"body":{"license.html":{}}}],["even",{"_index":2391,"title":{},"body":{"license.html":{}}}],["event",{"_index":2377,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":875,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"license.html":{}}}],["exact",{"_index":1771,"title":{},"body":{"license.html":{}}}],["example",{"_index":22,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/UpdateAdminDto.html":{},"license.html":{}}}],["except",{"_index":1787,"title":{},"body":{"license.html":{}}}],["exceptions",{"_index":2138,"title":{},"body":{"license.html":{}}}],["excluded",{"_index":2067,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":2322,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":2414,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":2274,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":1912,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":2328,"title":{},"body":{"license.html":{}}}],["executable",{"_index":1844,"title":{},"body":{"license.html":{}}}],["executar",{"_index":2478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execute",{"_index":2103,"title":{},"body":{"license.html":{}}}],["executing",{"_index":1788,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":2482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise",{"_index":2249,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1954,"title":{},"body":{"license.html":{}}}],["expected",{"_index":2089,"title":{},"body":{"license.html":{}}}],["expects",{"_index":2088,"title":{},"body":{"license.html":{}}}],["expiresin",{"_index":585,"title":{},"body":{"modules/AuthModule.html":{}}}],["explains",{"_index":1683,"title":{},"body":{"license.html":{}}}],["explicitly",{"_index":1898,"title":{},"body":{"license.html":{}}}],["export",{"_index":41,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":1179,"title":{},"body":{"modules/PrismaModule.html":{}}}],["express",{"_index":349,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":2362,"title":{},"body":{"license.html":{}}}],["expressly",{"_index":2188,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1724,"title":{},"body":{"license.html":{}}}],["extended",{"_index":2306,"title":{},"body":{"license.html":{}}}],["extends",{"_index":988,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{}}}],["extensions",{"_index":1997,"title":{},"body":{"license.html":{}}}],["extent",{"_index":1810,"title":{},"body":{"license.html":{}}}],["extractjwt",{"_index":985,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":992,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjuawnrbmftzsi6imd1dhmilcjpyxqioje2ntq4mjqwmdusimv4cci6mty1ndkxmdqwnx0.d3wiqiyk5lqumcybyl",{"_index":1008,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["f",{"_index":2170,"title":{},"body":{"license.html":{}}}],["f8e87669ec99",{"_index":27,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["facilities",{"_index":1914,"title":{},"body":{"license.html":{}}}],["fails",{"_index":2202,"title":{},"body":{"license.html":{}}}],["failure",{"_index":2389,"title":{},"body":{"license.html":{}}}],["fair",{"_index":1905,"title":{},"body":{"license.html":{}}}],["false",{"_index":876,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"injectables/JwtStrategy.html":{}}}],["family",{"_index":2074,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":1768,"title":{},"body":{"license.html":{}}}],["favor",{"_index":2083,"title":{},"body":{"license.html":{}}}],["favorite",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"coverage.html":{}}}],["favorite/:playlistid",{"_index":1093,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["favorite/:playlistid')@apioperation({summary",{"_index":1041,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["favorited",{"_index":890,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"injectables/PlaylistService.html":{}}}],["favoriteplaylist",{"_index":1166,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["favoriteplaylists",{"_index":1144,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["favoritesongservice",{"_index":1241,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["feature",{"_index":1814,"title":{},"body":{"license.html":{}}}],["fee",{"_index":1664,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":89,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"coverage.html":{},"license.html":{}}}],["files",{"_index":1877,"title":{},"body":{"license.html":{}}}],["finally",{"_index":1728,"title":{},"body":{"license.html":{}}}],["find",{"_index":2049,"title":{},"body":{"license.html":{}}}],["findall",{"_index":70,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["findall(@loggedadmin",{"_index":708,"title":{},"body":{"controllers/CountryController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["findall(@loggedartist",{"_index":282,"title":{},"body":{"controllers/AlbumController.html":{}}}],["findall(@loggedmanager",{"_index":136,"title":{},"body":{"controllers/AdminController.html":{}}}],["findall(@loggeduser",{"_index":1218,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{}}}],["findall(admin",{"_index":86,"title":{},"body":{"controllers/AdminController.html":{},"controllers/CountryController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["findall(artist",{"_index":261,"title":{},"body":{"controllers/AlbumController.html":{}}}],["findall(artistid",{"_index":306,"title":{},"body":{"injectables/AlbumService.html":{}}}],["findall(user",{"_index":1307,"title":{},"body":{"controllers/SongController.html":{}}}],["findall(userid",{"_index":1260,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["findall(userprofileid",{"_index":1207,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["findallplaylistprofile",{"_index":1036,"title":{},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{}}}],["findallplaylistprofile(@loggeduser",{"_index":1082,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["findallplaylistprofile(userid",{"_index":1124,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["findallplaylistprofile(userprofileid",{"_index":1062,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["findbyid",{"_index":174,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["findbyid(artistid",{"_index":1338,"title":{},"body":{"injectables/SongService.html":{}}}],["findbyid(categoryid",{"_index":667,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findbyid(id",{"_index":185,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CountryService.html":{}}}],["findbyid(userid",{"_index":1504,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyidprofileuser",{"_index":1255,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["findbyidprofileuser(userid",{"_index":1262,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["findbyidsonginprofile",{"_index":1256,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["findbyidsonginprofile(profileid",{"_index":1264,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["findmany",{"_index":227,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["findmyaccount",{"_index":1403,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findmyaccount(@loggeduser",{"_index":1432,"title":{},"body":{"controllers/UserController.html":{}}}],["findmyaccount(userid",{"_index":1506,"title":{},"body":{"injectables/UserService.html":{}}}],["findmyaccount(userprofileid",{"_index":1415,"title":{},"body":{"controllers/UserController.html":{}}}],["findone",{"_index":71,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{}}}],["findone(@loggedadmin",{"_index":711,"title":{},"body":{"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["findone(@loggedartist",{"_index":285,"title":{},"body":{"controllers/AlbumController.html":{}}}],["findone(@loggedmanager",{"_index":139,"title":{},"body":{"controllers/AdminController.html":{}}}],["findone(@loggeduser",{"_index":1321,"title":{},"body":{"controllers/SongController.html":{}}}],["findone(@param('artistid",{"_index":461,"title":{},"body":{"controllers/ArtistController.html":{}}}],["findone(@param('categoryid",{"_index":650,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findone(admin",{"_index":92,"title":{},"body":{"controllers/AdminController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["findone(artist",{"_index":264,"title":{},"body":{"controllers/AlbumController.html":{}}}],["findone(artistid",{"_index":308,"title":{},"body":{"injectables/AlbumService.html":{}}}],["findone(categoryid",{"_index":634,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findone(id",{"_index":187,"title":{},"body":{"injectables/AdminService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/CountryService.html":{},"injectables/UserPlanService.html":{}}}],["findone(songid",{"_index":1340,"title":{},"body":{"injectables/SongService.html":{}}}],["findone(user",{"_index":1309,"title":{},"body":{"controllers/SongController.html":{}}}],["findonealbuminartist",{"_index":300,"title":{},"body":{"injectables/AlbumService.html":{}}}],["findonealbuminartist(artistid",{"_index":310,"title":{},"body":{"injectables/AlbumService.html":{}}}],["findonebyartist",{"_index":416,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["findonebyartist(@param('artistid",{"_index":464,"title":{},"body":{"controllers/ArtistController.html":{}}}],["findonebyartist(artistid",{"_index":433,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["findonebyartsit",{"_index":1333,"title":{},"body":{"injectables/SongService.html":{}}}],["findonebyartsit(artistid",{"_index":1342,"title":{},"body":{"injectables/SongService.html":{}}}],["findoneplaylist",{"_index":1037,"title":{},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{}}}],["findoneplaylist(profileid",{"_index":1126,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["findoneplaylist(userprofileid",{"_index":1065,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["findoneplaylistinprofile",{"_index":1104,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["findoneplaylistinprofile(profileid",{"_index":1128,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["findoneprofileinuser",{"_index":1105,"title":{},"body":{"injectables/PlaylistService.html":{},"injectables/ProfileService.html":{}}}],["findoneprofileinuser(userid",{"_index":1130,"title":{},"body":{"injectables/PlaylistService.html":{},"injectables/ProfileService.html":{}}}],["findonesong",{"_index":1106,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["findonesong(songid",{"_index":1132,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["findoneuser",{"_index":1404,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findoneuser(@loggedadmin",{"_index":1435,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuser(admin",{"_index":1419,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuser(id",{"_index":1508,"title":{},"body":{"injectables/UserService.html":{}}}],["findunique",{"_index":215,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["first",{"_index":2210,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":2365,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":2018,"title":{},"body":{"license.html":{}}}],["flow",{"_index":1887,"title":{},"body":{"license.html":{}}}],["follow",{"_index":1752,"title":{},"body":{"license.html":{}}}],["following",{"_index":2277,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":1952,"title":{},"body":{"license.html":{}}}],["force",{"_index":1909,"title":{},"body":{"license.html":{}}}],["form",{"_index":1828,"title":{},"body":{"license.html":{}}}],["format",{"_index":2131,"title":{},"body":{"license.html":{}}}],["formed",{"_index":806,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["forms",{"_index":2009,"title":{},"body":{"license.html":{}}}],["found",{"_index":234,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["foundation",{"_index":1606,"title":{},"body":{"license.html":{}}}],["fraca",{"_index":779,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["fraca'})@apiproperty({description",{"_index":765,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["free",{"_index":949,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["freedom",{"_index":1624,"title":{},"body":{"license.html":{}}}],["freedoms",{"_index":1668,"title":{},"body":{"license.html":{}}}],["fulfilling",{"_index":1936,"title":{},"body":{"license.html":{}}}],["full",{"_index":2417,"title":{},"body":{"license.html":{}}}],["funcionalidades",{"_index":1594,"title":{},"body":{"index.html":{}}}],["function",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["functioning",{"_index":2106,"title":{},"body":{"license.html":{}}}],["functions",{"_index":1576,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fundamentally",{"_index":1703,"title":{},"body":{"license.html":{}}}],["further",{"_index":2041,"title":{},"body":{"license.html":{}}}],["future",{"_index":1726,"title":{},"body":{"license.html":{}}}],["general",{"_index":1597,"title":{},"body":{"license.html":{}}}],["generally",{"_index":1874,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1868,"title":{},"body":{"license.html":{}}}],["generated",{"_index":1007,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["get('/:artistid",{"_index":460,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/:artistid')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":431,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/:artistid/discography",{"_index":463,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/:artistid/discography')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":434,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/:playlistid",{"_index":1084,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["get('/:playlistid')@apioperation({summary",{"_index":1066,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["get('/:songid",{"_index":1320,"title":{},"body":{"controllers/SongController.html":{}}}],["get('/:songid')@apioperation({summary",{"_index":1310,"title":{},"body":{"controllers/SongController.html":{}}}],["get('/admin",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/admin')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/all",{"_index":458,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{}}}],["get('/all')@apioperation({summary",{"_index":1063,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{}}}],["get('/all')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":426,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/artist",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/artist')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/find",{"_index":87,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/CountryController.html":{}}}],["get('/home",{"_index":455,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/home')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":438,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/my",{"_index":1416,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/search/:id",{"_index":1434,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/search/:id')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":1420,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/user",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/user')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":1471,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["get(':id')@apioperation({summary",{"_index":1463,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["get('all",{"_index":1245,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{},"controllers/UserController.html":{}}}],["get('all')@apioperation({summary",{"_index":1236,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["get('all')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":1413,"title":{},"body":{"controllers/UserController.html":{}}}],["get('find",{"_index":629,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get()@apioperation({summary",{"_index":330,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserPlanController.html":{}}}],["getappstatus",{"_index":327,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getappstatus(@req",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["getappstatus(baseurl",{"_index":392,"title":{},"body":{"injectables/AppService.html":{}}}],["getappstatus(req",{"_index":328,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":1578,"title":{"index.html":{},"license.html":{}},"body":{}}],["give",{"_index":1974,"title":{},"body":{"license.html":{}}}],["given",{"_index":1902,"title":{},"body":{"license.html":{}}}],["gives",{"_index":1988,"title":{},"body":{"license.html":{}}}],["giving",{"_index":1678,"title":{},"body":{"license.html":{}}}],["gnu",{"_index":1596,"title":{},"body":{"license.html":{}}}],["governed",{"_index":2141,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":1673,"title":{},"body":{"license.html":{}}}],["grant",{"_index":2165,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1893,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2225,"title":{},"body":{"license.html":{}}}],["gratis",{"_index":1663,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":2406,"title":{},"body":{"license.html":{}}}],["guarantee",{"_index":1629,"title":{},"body":{"license.html":{}}}],["gui",{"_index":2436,"title":{},"body":{"license.html":{}}}],["guns",{"_index":799,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["gustavo",{"_index":931,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["handleerror",{"_index":206,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hard",{"_index":803,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["hasn't",{"_index":1169,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["having",{"_index":1911,"title":{},"body":{"license.html":{}}}],["hell",{"_index":917,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["hereafter",{"_index":2270,"title":{},"body":{"license.html":{}}}],["holder",{"_index":2196,"title":{},"body":{"license.html":{}}}],["holders",{"_index":2146,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":417,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["homepage(@loggedartist",{"_index":456,"title":{},"body":{"controllers/ArtistController.html":{}}}],["homepage(artist",{"_index":437,"title":{},"body":{"controllers/ArtistController.html":{}}}],["homepage(artistid",{"_index":488,"title":{},"body":{"injectables/ArtistService.html":{}}}],["hope",{"_index":2419,"title":{},"body":{"license.html":{}}}],["hosts",{"_index":2050,"title":{},"body":{"license.html":{}}}],["household",{"_index":2075,"title":{},"body":{"license.html":{}}}],["httpcode",{"_index":102,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["httpcode(httpstatus.created",{"_index":1094,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":146,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["httpcode(httpstatus.ok",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://fsf.org",{"_index":1608,"title":{},"body":{"license.html":{}}}],["https://i.scdn.co/image/ab6761610000e5eb50defaf9fc059a1efc541f4c",{"_index":844,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["https://image",{"_index":783,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["https://playlistimage.jpg",{"_index":867,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["https://profileimage.jpg",{"_index":882,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["https://www.gnu.org/licenses",{"_index":2442,"title":{},"body":{"license.html":{}}}],["https://www.gnu.org/licenses/why",{"_index":2452,"title":{},"body":{"license.html":{}}}],["https://youtu.be/zqo7j2yfofs",{"_index":919,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["httpstatus",{"_index":103,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["hypothetical",{"_index":2434,"title":{},"body":{"license.html":{}}}],["id",{"_index":18,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"injectables/AlbumService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginProfileDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["identifiable",{"_index":2296,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":1520,"title":{},"body":{"coverage.html":{}}}],["if(record.songs.length",{"_index":502,"title":{},"body":{"injectables/ArtistService.html":{}}}],["ignoreexpiration",{"_index":993,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["illusion",{"_index":789,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["image",{"_index":238,"title":{},"body":{"classes/Album.html":{},"injectables/AlbumService.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/Playlist.html":{},"injectables/PlaylistService.html":{},"classes/Profile.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["implement",{"_index":1855,"title":{},"body":{"license.html":{}}}],["implementation",{"_index":1856,"title":{},"body":{"license.html":{}}}],["implements",{"_index":1190,"title":{},"body":{"injectables/PrismaService.html":{}}}],["implied",{"_index":2323,"title":{},"body":{"license.html":{}}}],["import",{"_index":36,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"license.html":{}}}],["importing",{"_index":2262,"title":{},"body":{"license.html":{}}}],["imports",{"_index":162,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["impose",{"_index":2175,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":2325,"title":{},"body":{"license.html":{}}}],["inability",{"_index":2383,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":2386,"title":{},"body":{"license.html":{}}}],["inc",{"_index":1607,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":2380,"title":{},"body":{"license.html":{}}}],["include",{"_index":1845,"title":{},"body":{"license.html":{}}}],["included",{"_index":1847,"title":{},"body":{"license.html":{}}}],["includes",{"_index":1792,"title":{},"body":{"license.html":{}}}],["including",{"_index":1869,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":2007,"title":{},"body":{"license.html":{}}}],["incompatible",{"_index":1704,"title":{},"body":{"license.html":{}}}],["incorporating",{"_index":2443,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":2077,"title":{},"body":{"license.html":{}}}],["indemnification",{"_index":2171,"title":{},"body":{"license.html":{}}}],["independent",{"_index":1995,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":2229,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":2185,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2005,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":1713,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":2092,"title":{},"body":{"license.html":{}}}],["inestapplication",{"_index":1186,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{}}}],["inform",{"_index":2059,"title":{},"body":{"license.html":{}}}],["information",{"_index":2098,"title":{},"body":{"license.html":{}}}],["infringe",{"_index":2227,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":2259,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1784,"title":{},"body":{"license.html":{}}}],["initiate",{"_index":2252,"title":{},"body":{"license.html":{}}}],["injectable",{"_index":169,"title":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/AppService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/AppService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/AppService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inside",{"_index":1700,"title":{},"body":{"license.html":{}}}],["install",{"_index":1698,"title":{},"body":{"license.html":{}}}],["installation",{"_index":2097,"title":{},"body":{"license.html":{}}}],["installed",{"_index":2118,"title":{},"body":{"license.html":{}}}],["instead",{"_index":2449,"title":{},"body":{"license.html":{}}}],["intact",{"_index":1968,"title":{},"body":{"license.html":{}}}],["intended",{"_index":1628,"title":{},"body":{"license.html":{}}}],["intention",{"_index":1956,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":1800,"title":{},"body":{"license.html":{}}}],["interactive",{"_index":1805,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":2021,"title":{},"body":{"license.html":{}}}],["interest",{"_index":2246,"title":{},"body":{"license.html":{}}}],["interface",{"_index":1806,"title":{},"body":{"license.html":{}}}],["interfaces",{"_index":1835,"title":{},"body":{"license.html":{}}}],["interfered",{"_index":2108,"title":{},"body":{"license.html":{}}}],["interpretation",{"_index":2393,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":1866,"title":{},"body":{"license.html":{}}}],["intimate",{"_index":1885,"title":{},"body":{"license.html":{}}}],["invalidate",{"_index":1989,"title":{},"body":{"license.html":{}}}],["irrevocable",{"_index":1895,"title":{},"body":{"license.html":{}}}],["isboolean",{"_index":878,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["isboolean()@apiproperty({description",{"_index":872,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["isemail",{"_index":767,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UpdateAdminDto.html":{}}}],["isemail()@isnotempty()@apiproperty({description",{"_index":751,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["ishashvalid",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":768,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/UpdateAdminDto.html":{}}}],["isnotempty()@isnumber()@apiproperty({description",{"_index":791,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["isnotempty()@isstring()@apiproperty({description",{"_index":786,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{}}}],["isnotempty()@isurl()@apiproperty({description",{"_index":782,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{}}}],["isnumber",{"_index":795,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateUserPlanDto.html":{}}}],["isnumber()@isnotempty()@apiproperty({description",{"_index":945,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["isoptional",{"_index":1366,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["isoptional()@isemail()@isnotempty()@apiproperty({description",{"_index":1360,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["isoptional()@isstring()@isnotempty()@apiproperty({description",{"_index":1358,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["isoptional()@isstring()@length(3",{"_index":1362,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["isoptional()@isstring()@minlength(8)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":1364,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["isstring",{"_index":769,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/UpdateAdminDto.html":{}}}],["isstring()@apiproperty({description",{"_index":925,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":741,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{}}}],["isstring()@isnotempty()@length(13",{"_index":746,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["isstring()@isnotempty()@length(2",{"_index":858,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["isstring()@isnotempty()@minlength(11)@maxlength(14)@apiproperty({description",{"_index":837,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@length(3",{"_index":754,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["isstring()@minlength(8)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":760,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{}}}],["isurl",{"_index":796,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{}}}],["isurl()@apiproperty({description",{"_index":843,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateSongDto.html":{}}}],["isuuid",{"_index":39,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginProfileDto.html":{},"classes/UserProfileId.html":{}}}],["isuuid()@apiproperty({description",{"_index":17,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginProfileDto.html":{}}}],["isuuid(undefined",{"_index":904,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["item",{"_index":1824,"title":{},"body":{"license.html":{}}}],["itself",{"_index":2124,"title":{},"body":{"license.html":{}}}],["june",{"_index":1601,"title":{},"body":{"license.html":{}}}],["jwt",{"_index":168,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserResponseDto.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":580,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":991,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":577,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":581,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":575,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keep",{"_index":1967,"title":{},"body":{"license.html":{}}}],["kernel",{"_index":1859,"title":{},"body":{"license.html":{}}}],["key",{"_index":2134,"title":{},"body":{"license.html":{}}}],["keys",{"_index":2101,"title":{},"body":{"license.html":{}}}],["kind",{"_index":1796,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":1618,"title":{},"body":{"license.html":{}}}],["know",{"_index":1647,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":2285,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":2294,"title":{},"body":{"license.html":{}}}],["language",{"_index":1839,"title":{},"body":{"license.html":{}}}],["larger",{"_index":1999,"title":{},"body":{"license.html":{}}}],["lasterrorline",{"_index":2469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":2352,"title":{},"body":{"license.html":{}}}],["law",{"_index":1786,"title":{},"body":{"license.html":{}}}],["laws",{"_index":1756,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":2257,"title":{},"body":{"license.html":{}}}],["legal",{"_index":1679,"title":{},"body":{"license.html":{}}}],["length",{"_index":770,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateAdminDto.html":{}}}],["length(13",{"_index":775,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["length(2",{"_index":862,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["length(3",{"_index":773,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["lesser",{"_index":2448,"title":{},"body":{"license.html":{}}}],["lgpl.html",{"_index":2453,"title":{},"body":{"license.html":{}}}],["liability",{"_index":2149,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1783,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":1843,"title":{},"body":{"license.html":{}}}],["library",{"_index":2068,"title":{},"body":{"license.html":{}}}],["license",{"_index":1595,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licensed",{"_index":1760,"title":{},"body":{"license.html":{}}}],["licensee",{"_index":1762,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":1764,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":1620,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":2231,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":2163,"title":{},"body":{"license.html":{}}}],["likewise",{"_index":2223,"title":{},"body":{"license.html":{}}}],["limit",{"_index":1957,"title":{},"body":{"license.html":{}}}],["limitation",{"_index":2376,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2363,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":2148,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1295,"title":{},"body":{"injectables/ProfileService.html":{}}}],["line",{"_index":2415,"title":{},"body":{"license.html":{}}}],["link",{"_index":2337,"title":{},"body":{"license.html":{}}}],["linked",{"_index":1881,"title":{},"body":{"license.html":{}}}],["linking",{"_index":2446,"title":{},"body":{"license.html":{}}}],["list",{"_index":427,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"license.html":{}}}],["literal",{"_index":981,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["litigation",{"_index":2253,"title":{},"body":{"license.html":{}}}],["live",{"_index":816,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["local",{"_index":1563,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["log",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{}}}],["logged",{"_index":99,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["loggedadmin",{"_index":114,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggedartist",{"_index":273,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/SongController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggedmanager",{"_index":117,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggeduser",{"_index":444,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":1001,"title":{},"body":{"classes/LoginDto.html":{},"classes/LoginUserResponseDto.html":{}}}],["loginadmin",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginadmin(@body",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginadmin(logindto",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginartist",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginartist(@body",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginartist(logindto",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":525,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["loginprofile",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginprofile(user",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginprofiledto",{"_index":538,"title":{"classes/LoginProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginProfileDto.html":{},"coverage.html":{}}}],["loginprofiledto.profileid",{"_index":604,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginuser(@body",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(logindto",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginuserresponsedto",{"_index":553,"title":{"classes/LoginUserResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserResponseDto.html":{},"coverage.html":{}}}],["long",{"_index":1907,"title":{},"body":{"license.html":{}}}],["los",{"_index":807,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["loss",{"_index":2384,"title":{},"body":{"license.html":{}}}],["losses",{"_index":2387,"title":{},"body":{"license.html":{}}}],["machine",{"_index":2011,"title":{},"body":{"license.html":{}}}],["made",{"_index":2109,"title":{},"body":{"license.html":{}}}],["mail",{"_index":2426,"title":{},"body":{"license.html":{}}}],["maintain",{"_index":2045,"title":{},"body":{"license.html":{}}}],["major",{"_index":1850,"title":{},"body":{"license.html":{}}}],["make",{"_index":1632,"title":{},"body":{"license.html":{}}}],["makes",{"_index":1927,"title":{},"body":{"license.html":{}}}],["making",{"_index":1770,"title":{},"body":{"license.html":{}}}],["manager",{"_index":77,"title":{},"body":{"controllers/AdminController.html":{},"miscellaneous/variables.html":{}}}],["manager)'})@httpcode(httpstatus.no_content",{"_index":84,"title":{},"body":{"controllers/AdminController.html":{}}}],["manager.decorator",{"_index":118,"title":{},"body":{"controllers/AdminController.html":{}}}],["manager.decorator.ts",{"_index":1536,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.usercategoryname",{"_index":2490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manageradmin.dto",{"_index":124,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["manageradmin.dto.ts",{"_index":1357,"title":{},"body":{"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["manageradmin.dto.ts:20",{"_index":1363,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["manageradmin.dto.ts:29",{"_index":1361,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["manageradmin.dto.ts:41",{"_index":1365,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["manageradmin.dto.ts:50",{"_index":1359,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["manner",{"_index":2271,"title":{},"body":{"license.html":{}}}],["manufacturer",{"_index":1702,"title":{},"body":{"license.html":{}}}],["march",{"_index":2320,"title":{},"body":{"license.html":{}}}],["maria",{"_index":757,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["marked",{"_index":1689,"title":{},"body":{"license.html":{}}}],["marks",{"_index":2169,"title":{},"body":{"license.html":{}}}],["martins",{"_index":932,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["masks",{"_index":1758,"title":{},"body":{"license.html":{}}}],["matches",{"_index":771,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":778,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{}}}],["matching",{"_index":44,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1916,"title":{},"body":{"license.html":{}}}],["materially",{"_index":2125,"title":{},"body":{"license.html":{}}}],["maxlength",{"_index":849,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(14",{"_index":851,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{}}}],["meaning",{"_index":2178,"title":{},"body":{"license.html":{}}}],["means",{"_index":1755,"title":{},"body":{"license.html":{}}}],["measure",{"_index":1935,"title":{},"body":{"license.html":{}}}],["measures",{"_index":1949,"title":{},"body":{"license.html":{}}}],["medium",{"_index":1963,"title":{},"body":{"license.html":{}}}],["meet",{"_index":1977,"title":{},"body":{"license.html":{}}}],["meets",{"_index":1825,"title":{},"body":{"license.html":{}}}],["menu",{"_index":1822,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":2364,"title":{},"body":{"license.html":{}}}],["mere",{"_index":1799,"title":{},"body":{"license.html":{}}}],["merging",{"_index":2242,"title":{},"body":{"license.html":{}}}],["message",{"_index":763,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{}}}],["met",{"_index":1897,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1566,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":67,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["million",{"_index":820,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["minlength",{"_index":772,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{}}}],["minlength(11",{"_index":850,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":777,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{}}}],["miscellaneous",{"_index":1575,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misrepresentation",{"_index":2158,"title":{},"body":{"license.html":{}}}],["mobile",{"_index":966,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["mode",{"_index":2096,"title":{},"body":{"license.html":{}}}],["model",{"_index":2027,"title":{},"body":{"license.html":{}}}],["modification",{"_index":1751,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":1829,"title":{},"body":{"license.html":{}}}],["modified",{"_index":1688,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":1981,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1660,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":1790,"title":{},"body":{"license.html":{}}}],["module",{"_index":149,"title":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["modules",{"_index":151,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2029,"title":{},"body":{"license.html":{}}}],["moreover",{"_index":2208,"title":{},"body":{"license.html":{}}}],["muito",{"_index":764,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["music",{"_index":621,"title":{"classes/Music.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/Music.html":{},"coverage.html":{}}}],["musics",{"_index":630,"title":{},"body":{"controllers/CategoryController.html":{}}}],["musicurl",{"_index":1014,"title":{},"body":{"classes/Music.html":{}}}],["módulo",{"_index":1582,"title":{},"body":{"index.html":{}}}],["n",{"_index":800,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["name",{"_index":51,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["names",{"_index":2162,"title":{},"body":{"license.html":{}}}],["nature",{"_index":1996,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":2372,"title":{},"body":{"license.html":{}}}],["need",{"_index":1651,"title":{},"body":{"license.html":{}}}],["needed",{"_index":1727,"title":{},"body":{"license.html":{}}}],["nestjs/common",{"_index":108,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1549,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":578,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":110,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":38,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"dependencies.html":{}}}],["network",{"_index":1802,"title":{},"body":{"license.html":{}}}],["new",{"_index":76,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":915,"title":{},"body":{"classes/CreateSongDto.html":{},"license.html":{}}}],["nome",{"_index":756,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["non",{"_index":1746,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":2035,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1848,"title":{},"body":{"license.html":{}}}],["normally",{"_index":2073,"title":{},"body":{"license.html":{}}}],["notable",{"_index":955,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["notfoundexception",{"_index":199,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('no",{"_index":320,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('playlist",{"_index":1148,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["notfoundexception('profile",{"_index":1275,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["notfoundexception('song",{"_index":1155,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["notfoundexception(`album",{"_index":324,"title":{},"body":{"injectables/AlbumService.html":{}}}],["notfoundexception(`country",{"_index":737,"title":{},"body":{"injectables/CountryService.html":{}}}],["notfoundexception(`profile",{"_index":1171,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["notfoundexception(`record",{"_index":233,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["notfoundexception(`song",{"_index":1174,"title":{},"body":{"injectables/PlaylistService.html":{},"injectables/SongService.html":{}}}],["notfoundexception(`this",{"_index":1168,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["nothing",{"_index":2224,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1815,"title":{},"body":{"license.html":{}}}],["notices",{"_index":1809,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":2209,"title":{},"body":{"license.html":{}}}],["notify",{"_index":2203,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":2145,"title":{},"body":{"license.html":{}}}],["now",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{}}}],["number",{"_index":246,"title":{},"body":{"classes/Album.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/UserPlan.html":{},"license.html":{}}}],["numbered",{"_index":2351,"title":{},"body":{"license.html":{}}}],["o",{"_index":1590,"title":{},"body":{"index.html":{}}}],["obama",{"_index":885,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["object",{"_index":191,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AppController.html":{},"license.html":{}}}],["objeto",{"_index":341,"title":{},"body":{"controllers/AppController.html":{}}}],["obligate",{"_index":2332,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":2052,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":1937,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":2034,"title":{},"body":{"license.html":{}}}],["occurring",{"_index":2221,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":1710,"title":{},"body":{"license.html":{}}}],["ocorreu",{"_index":2476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offer",{"_index":1677,"title":{},"body":{"license.html":{}}}],["offered",{"_index":2062,"title":{},"body":{"license.html":{}}}],["offering",{"_index":2038,"title":{},"body":{"license.html":{}}}],["official",{"_index":1831,"title":{},"body":{"license.html":{}}}],["offline",{"_index":964,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["onde",{"_index":1589,"title":{},"body":{"index.html":{}}}],["one",{"_index":635,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CreateArtistDto.html":{},"license.html":{}}}],["one/:adminid",{"_index":138,"title":{},"body":{"controllers/AdminController.html":{}}}],["one/:adminid')@apioperation({summary",{"_index":93,"title":{},"body":{"controllers/AdminController.html":{}}}],["one/:albumid",{"_index":284,"title":{},"body":{"controllers/AlbumController.html":{}}}],["one/:albumid')@apioperation({summary",{"_index":265,"title":{},"body":{"controllers/AlbumController.html":{}}}],["one/:countryid",{"_index":710,"title":{},"body":{"controllers/CountryController.html":{}}}],["one/:countryid')@apioperation({summary",{"_index":697,"title":{},"body":{"controllers/CountryController.html":{}}}],["onmoduleinit",{"_index":1184,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":429,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"classes/CreatePlaylistDto.html":{}}}],["operate",{"_index":2390,"title":{},"body":{"license.html":{}}}],["operated",{"_index":2043,"title":{},"body":{"license.html":{}}}],["operating",{"_index":1862,"title":{},"body":{"license.html":{}}}],["operation",{"_index":1958,"title":{},"body":{"license.html":{}}}],["operação",{"_index":2479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option",{"_index":2143,"title":{},"body":{"license.html":{}}}],["optional",{"_index":48,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["options",{"_index":1821,"title":{},"body":{"license.html":{}}}],["order",{"_index":2219,"title":{},"body":{"license.html":{}}}],["organization",{"_index":2239,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":1765,"title":{},"body":{"license.html":{}}}],["origin",{"_index":2159,"title":{},"body":{"license.html":{}}}],["original",{"_index":2160,"title":{},"body":{"license.html":{}}}],["others",{"_index":1653,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":1908,"title":{},"body":{"license.html":{}}}],["out",{"_index":159,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":1901,"title":{},"body":{"license.html":{}}}],["outside",{"_index":1921,"title":{},"body":{"license.html":{}}}],["over",{"_index":818,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["overview",{"_index":2457,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":2267,"title":{},"body":{"license.html":{}}}],["package",{"_index":1547,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packaged",{"_index":1987,"title":{},"body":{"license.html":{}}}],["packaging",{"_index":1849,"title":{},"body":{"license.html":{}}}],["paper",{"_index":2425,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":2193,"title":{},"body":{"license.html":{}}}],["paragraphs",{"_index":2278,"title":{},"body":{"license.html":{}}}],["param",{"_index":104,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["param('adminid",{"_index":140,"title":{},"body":{"controllers/AdminController.html":{}}}],["param('albumid",{"_index":286,"title":{},"body":{"controllers/AlbumController.html":{}}}],["param('artistid",{"_index":472,"title":{},"body":{"controllers/ArtistController.html":{}}}],["param('categoryid",{"_index":652,"title":{},"body":{"controllers/CategoryController.html":{}}}],["param('countryid",{"_index":712,"title":{},"body":{"controllers/CountryController.html":{}}}],["param('id",{"_index":1322,"title":{},"body":{"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["param('playlistid",{"_index":1085,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["param('profileid",{"_index":1221,"title":{},"body":{"controllers/ProfileController.html":{}}}],["param('songid",{"_index":1243,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["parameters",{"_index":79,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["part",{"_index":1767,"title":{},"body":{"license.html":{}}}],["partial",{"_index":230,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/CountryService.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":1368,"title":{},"body":{"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{}}}],["partialtype(createalbumdto",{"_index":1369,"title":{},"body":{"classes/UpdateAlbumDto.html":{}}}],["partialtype(createartistdto",{"_index":1371,"title":{},"body":{"classes/UpdateArtistDto.html":{}}}],["partialtype(createcategorydto",{"_index":1373,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createcountrydto",{"_index":1375,"title":{},"body":{"classes/UpdateCountryDto.html":{}}}],["partialtype(createplaylistdto",{"_index":1377,"title":{},"body":{"classes/UpdatePlaylistDto.html":{}}}],["partialtype(createprofiledto",{"_index":1379,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["partialtype(createsongdto",{"_index":1381,"title":{},"body":{"classes/UpdateSongDto.html":{}}}],["partialtype(createuserdto",{"_index":1385,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserplandto",{"_index":1389,"title":{},"body":{"classes/UpdateUserPlanDto.html":{}}}],["particular",{"_index":1837,"title":{},"body":{"license.html":{}}}],["parties",{"_index":1798,"title":{},"body":{"license.html":{}}}],["parts",{"_index":1888,"title":{},"body":{"license.html":{}}}],["party",{"_index":869,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"license.html":{}}}],["party's",{"_index":2244,"title":{},"body":{"license.html":{}}}],["pass",{"_index":1665,"title":{},"body":{"license.html":{}}}],["passport",{"_index":987,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":163,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["passportmodule.register",{"_index":166,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["passportstrategy",{"_index":984,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":989,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":52,"title":{},"body":{"classes/Admin.html":{},"injectables/AdminService.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UpdateAdminDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["password.ultil",{"_index":205,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["password.ultil.ts",{"_index":1543,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":2496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":105,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["patch('/update",{"_index":142,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ArtistController.html":{},"controllers/SongController.html":{}}}],["patch('/update')@apioperation({summary",{"_index":97,"title":{},"body":{"controllers/AdminController.html":{}}}],["patch('/update')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":441,"title":{},"body":{"controllers/ArtistController.html":{}}}],["patch('/update/:countryid",{"_index":714,"title":{},"body":{"controllers/CountryController.html":{}}}],["patch('/update/:countryid')@apioperation({summary",{"_index":700,"title":{},"body":{"controllers/CountryController.html":{}}}],["patch(':id",{"_index":1473,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":1465,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["patch('add",{"_index":1040,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["patch('add/:songid",{"_index":1242,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["patch('add/:songid')@apioperation({summary",{"_index":1231,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["patch('delete",{"_index":1060,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["patch('edit",{"_index":639,"title":{},"body":{"controllers/CategoryController.html":{}}}],["patch('update",{"_index":1423,"title":{},"body":{"controllers/UserController.html":{}}}],["patch('update/:albumid",{"_index":288,"title":{},"body":{"controllers/AlbumController.html":{}}}],["patch('update/:albumid')@apioperation({summary",{"_index":270,"title":{},"body":{"controllers/AlbumController.html":{}}}],["patch('update/:playlistid",{"_index":1087,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["patch('update/:playlistid')@apioperation({summary",{"_index":1070,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["patch('update/:profileid",{"_index":1220,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patch('update/:profileid')@apioperation({summary",{"_index":1211,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patent",{"_index":2192,"title":{},"body":{"license.html":{}}}],["patents",{"_index":1731,"title":{},"body":{"license.html":{}}}],["pattern",{"_index":1708,"title":{},"body":{"license.html":{}}}],["payload",{"_index":983,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":996,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.profileid",{"_index":995,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payment",{"_index":2313,"title":{},"body":{"license.html":{}}}],["peer",{"_index":2057,"title":{},"body":{"license.html":{}}}],["peers",{"_index":2060,"title":{},"body":{"license.html":{}}}],["performance",{"_index":2368,"title":{},"body":{"license.html":{}}}],["performing",{"_index":1875,"title":{},"body":{"license.html":{}}}],["permanently",{"_index":2201,"title":{},"body":{"license.html":{}}}],["permission",{"_index":1680,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["permissions",{"_index":1892,"title":{},"body":{"license.html":{}}}],["permissive",{"_index":1970,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2006,"title":{},"body":{"license.html":{}}}],["permits",{"_index":2181,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":1609,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":2113,"title":{},"body":{"license.html":{}}}],["personal",{"_index":2071,"title":{},"body":{"license.html":{}}}],["pertinent",{"_index":2330,"title":{},"body":{"license.html":{}}}],["pessssrmission",{"_index":2491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["physical",{"_index":2015,"title":{},"body":{"license.html":{}}}],["physically",{"_index":2032,"title":{},"body":{"license.html":{}}}],["picture",{"_index":866,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{}}}],["pieces",{"_index":1646,"title":{},"body":{"license.html":{}}}],["place",{"_index":2040,"title":{},"body":{"license.html":{}}}],["plan",{"_index":946,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"controllers/UserPlanController.html":{}}}],["plan.controller",{"_index":1480,"title":{},"body":{"modules/UserPlanModule.html":{}}}],["plan.controller.ts",{"_index":1458,"title":{},"body":{"controllers/UserPlanController.html":{},"coverage.html":{}}}],["plan.controller.ts:32",{"_index":1460,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["plan.controller.ts:40",{"_index":1462,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["plan.controller.ts:48",{"_index":1464,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["plan.controller.ts:56",{"_index":1466,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["plan.controller.ts:65",{"_index":1461,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["plan.dto",{"_index":1388,"title":{},"body":{"classes/UpdateUserPlanDto.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{}}}],["plan.dto.ts",{"_index":942,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"classes/UpdateUserPlanDto.html":{},"coverage.html":{}}}],["plan.dto.ts:11",{"_index":974,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["plan.dto.ts:19",{"_index":975,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["plan.dto.ts:27",{"_index":948,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["plan.dto.ts:36",{"_index":973,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["plan.entity",{"_index":1489,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.entity.ts",{"_index":1449,"title":{},"body":{"classes/UserPlan.html":{},"coverage.html":{}}}],["plan.entity.ts:2",{"_index":1453,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:3",{"_index":1454,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:4",{"_index":1455,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:5",{"_index":1450,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:6",{"_index":1452,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:7",{"_index":1451,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:8",{"_index":1456,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.module",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["plan.module.ts",{"_index":1479,"title":{},"body":{"modules/UserPlanModule.html":{}}}],["plan.service",{"_index":1468,"title":{},"body":{"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{}}}],["plan.service.ts",{"_index":1481,"title":{},"body":{"injectables/UserPlanService.html":{},"coverage.html":{}}}],["plan.service.ts:12",{"_index":1483,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:20",{"_index":1485,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:33",{"_index":1486,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:41",{"_index":1487,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:52",{"_index":1484,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:9",{"_index":1482,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan/dto/create",{"_index":941,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"coverage.html":{}}}],["plan/dto/update",{"_index":1387,"title":{},"body":{"classes/UpdateUserPlanDto.html":{},"coverage.html":{}}}],["plan/entities/user",{"_index":1448,"title":{},"body":{"classes/UserPlan.html":{},"coverage.html":{}}}],["plan/user",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"coverage.html":{}}}],["plans",{"_index":935,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UserPlanController.html":{}}}],["platform",{"_index":937,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{}}}],["playback",{"_index":965,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["played",{"_index":970,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["playlist",{"_index":7,"title":{"classes/Playlist.html":{}},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"coverage.html":{}}}],["playlist.controller",{"_index":1101,"title":{},"body":{"modules/PlaylistModule.html":{}}}],["playlist.dto",{"_index":1074,"title":{},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"classes/UpdatePlaylistDto.html":{}}}],["playlist.dto.ts",{"_index":865,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"classes/UpdatePlaylistDto.html":{},"coverage.html":{}}}],["playlist.dto.ts:17",{"_index":870,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["playlist.dto.ts:25",{"_index":868,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["playlist.dto.ts:32",{"_index":877,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["playlist.playlists.length",{"_index":1161,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["playlist.private",{"_index":1146,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["playlist.profile.id",{"_index":1147,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["playlist.service",{"_index":1076,"title":{},"body":{"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{}}}],["playlist/playlist.module",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["playlistcontroller",{"_index":1030,"title":{"controllers/PlaylistController.html":{}},"body":{"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"coverage.html":{}}}],["playlistid",{"_index":11,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{}}}],["playlistid_songid",{"_index":1160,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["playlistmodule",{"_index":366,"title":{"modules/PlaylistModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlaylistModule.html":{},"modules.html":{},"overview.html":{}}}],["playlists",{"_index":972,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{}}}],["playlistservice",{"_index":1075,"title":{"injectables/PlaylistService.html":{}},"body":{"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"coverage.html":{},"overview.html":{}}}],["playlistsong",{"_index":1046,"title":{},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{}}}],["playlistsong.playlistid",{"_index":1150,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["playlistsong.songid",{"_index":1153,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["please",{"_index":2450,"title":{},"body":{"license.html":{}}}],["plus",{"_index":2247,"title":{},"body":{"license.html":{}}}],["podcasts",{"_index":953,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["pointer",{"_index":2416,"title":{},"body":{"license.html":{}}}],["portion",{"_index":2065,"title":{},"body":{"license.html":{}}}],["possesses",{"_index":2028,"title":{},"body":{"license.html":{}}}],["possession",{"_index":1984,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":968,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["possible",{"_index":961,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["post",{"_index":106,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["post('/create",{"_index":131,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/SongController.html":{}}}],["post('/create')@apioperation({summary",{"_index":75,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/SongController.html":{}}}],["post('/sign",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('add",{"_index":1047,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["post('create",{"_index":620,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["post('create')@apioperation({summary",{"_index":1203,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["post()@apioperation({summary",{"_index":1459,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["power",{"_index":1951,"title":{},"body":{"license.html":{}}}],["practical",{"_index":1621,"title":{},"body":{"license.html":{}}}],["practice",{"_index":1717,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":1616,"title":{},"body":{"license.html":{}}}],["precise",{"_index":1747,"title":{},"body":{"license.html":{}}}],["precisely",{"_index":1714,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":2245,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":1827,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":66,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["presence",{"_index":956,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["present",{"_index":2344,"title":{},"body":{"license.html":{}}}],["presents",{"_index":1819,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":2153,"title":{},"body":{"license.html":{}}}],["prevent",{"_index":1652,"title":{},"body":{"license.html":{}}}],["prevented",{"_index":2107,"title":{},"body":{"license.html":{}}}],["previous",{"_index":1694,"title":{},"body":{"license.html":{}}}],["price",{"_index":944,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"classes/UserPlan.html":{},"injectables/UserPlanService.html":{},"license.html":{}}}],["primarily",{"_index":2315,"title":{},"body":{"license.html":{}}}],["prior",{"_index":2204,"title":{},"body":{"license.html":{}}}],["prisma",{"_index":179,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["prisma.admincreateinput",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{}}}],["prisma.albumcreateinput",{"_index":315,"title":{},"body":{"injectables/AlbumService.html":{}}}],["prisma.artistcreateinput",{"_index":491,"title":{},"body":{"injectables/ArtistService.html":{}}}],["prisma.categorycreateinput",{"_index":672,"title":{},"body":{"injectables/CategoryService.html":{}}}],["prisma.categoryupdateinput",{"_index":678,"title":{},"body":{"injectables/CategoryService.html":{}}}],["prisma.playlistcreateinput",{"_index":1139,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["prisma.playlistsongcreateinput",{"_index":1158,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["prisma.profilecreateinput",{"_index":1298,"title":{},"body":{"injectables/ProfileService.html":{}}}],["prisma.profilefavoriteplaylistcreateinput",{"_index":1164,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["prisma.profilefavoritesongcreateinput",{"_index":1267,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["prisma.service",{"_index":1180,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.songcreateinput",{"_index":1347,"title":{},"body":{"injectables/SongService.html":{}}}],["prisma.usercreateinput",{"_index":1512,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":200,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":1182,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":156,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":177,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":595,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePlaylistDto.html":{},"classes/Playlist.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileFavoriteSongController.html":{},"license.html":{}}}],["problems",{"_index":1691,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":2099,"title":{},"body":{"license.html":{}}}],["process.env.jwt_secret",{"_index":583,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["procuring",{"_index":2303,"title":{},"body":{"license.html":{}}}],["produce",{"_index":1865,"title":{},"body":{"license.html":{}}}],["product",{"_index":2016,"title":{},"body":{"license.html":{}}}],["products",{"_index":1712,"title":{},"body":{"license.html":{}}}],["profile",{"_index":382,"title":{"classes/Profile.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/LoginProfileDto.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"classes/UserProfileId.html":{},"coverage.html":{}}}],["profile')@httpcode(httpstatus.ok)@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile.controller",{"_index":1282,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.dto",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{}}}],["profile.dto.ts",{"_index":881,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/LoginProfileDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:10",{"_index":1004,"title":{},"body":{"classes/LoginProfileDto.html":{}}}],["profile.dto.ts:11",{"_index":886,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:19",{"_index":883,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.profiles.length",{"_index":606,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile.service",{"_index":1214,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/profile.module",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["profilecontroller",{"_index":1201,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilefavoritesong",{"_index":1225,"title":{"classes/ProfileFavoriteSong.html":{}},"body":{"classes/ProfileFavoriteSong.html":{},"coverage.html":{}}}],["profilefavoritesongcontroller",{"_index":1228,"title":{"controllers/ProfileFavoriteSongController.html":{}},"body":{"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"coverage.html":{}}}],["profilefavoritesongmodule",{"_index":367,"title":{"modules/ProfileFavoriteSongModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules.html":{},"overview.html":{}}}],["profilefavoritesongservice",{"_index":1238,"title":{"injectables/ProfileFavoriteSongService.html":{}},"body":{"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"coverage.html":{},"overview.html":{}}}],["profileid",{"_index":603,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginProfileDto.html":{},"classes/Playlist.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"classes/UserProfileId.html":{}}}],["profileid_playlistid",{"_index":1167,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["profileid_songid",{"_index":1272,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["profilemodule",{"_index":368,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profileplaylists",{"_index":1142,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["profiles",{"_index":605,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["profileservice",{"_index":1213,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profileuser",{"_index":1273,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["profileuser.profiles.length",{"_index":1274,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["program",{"_index":1631,"title":{},"body":{"license.html":{}}}],["program's",{"_index":1962,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":2439,"title":{},"body":{"license.html":{}}}],["programming",{"_index":1838,"title":{},"body":{"license.html":{}}}],["programs",{"_index":1640,"title":{},"body":{"license.html":{}}}],["prohibit",{"_index":1716,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":1947,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":2309,"title":{},"body":{"license.html":{}}}],["projeto",{"_index":1580,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":1823,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":1812,"title":{},"body":{"license.html":{}}}],["promise",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["propagate",{"_index":1778,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":2228,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":1791,"title":{},"body":{"license.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/UpdateAdminDto.html":{},"classes/User.html":{},"classes/UserPlan.html":{},"classes/UserProfileId.html":{},"properties.html":{}}}],["property",{"_index":2072,"title":{},"body":{"license.html":{}}}],["proprietary",{"_index":1742,"title":{},"body":{"license.html":{}}}],["propósito",{"_index":1591,"title":{},"body":{"index.html":{}}}],["protect",{"_index":1649,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":1706,"title":{},"body":{"license.html":{}}}],["protection",{"_index":1681,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":2130,"title":{},"body":{"license.html":{}}}],["prove",{"_index":2369,"title":{},"body":{"license.html":{}}}],["provide",{"_index":1913,"title":{},"body":{"license.html":{}}}],["provided",{"_index":1818,"title":{},"body":{"license.html":{}}}],["providers",{"_index":161,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["provision",{"_index":1725,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":2198,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":2355,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":2357,"title":{},"body":{"license.html":{}}}],["public",{"_index":1598,"title":{},"body":{"license.html":{}}}],["publicity",{"_index":2161,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":2132,"title":{},"body":{"license.html":{}}}],["publish",{"_index":1966,"title":{},"body":{"license.html":{}}}],["published",{"_index":2353,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1735,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":2076,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":2299,"title":{},"body":{"license.html":{}}}],["qualify",{"_index":2216,"title":{},"body":{"license.html":{}}}],["quality",{"_index":2367,"title":{},"body":{"license.html":{}}}],["reached",{"_index":1296,"title":{},"body":{"injectables/ProfileService.html":{}}}],["read",{"_index":2451,"title":{},"body":{"license.html":{}}}],["readable",{"_index":2012,"title":{},"body":{"license.html":{}}}],["readily",{"_index":2287,"title":{},"body":{"license.html":{}}}],["reading",{"_index":2136,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":130,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["ready",{"_index":1723,"title":{},"body":{"license.html":{}}}],["reason",{"_index":2297,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2030,"title":{},"body":{"license.html":{}}}],["recebe",{"_index":335,"title":{},"body":{"controllers/AppController.html":{}}}],["receipt",{"_index":2214,"title":{},"body":{"license.html":{}}}],["receive",{"_index":1645,"title":{},"body":{"license.html":{}}}],["received",{"_index":1669,"title":{},"body":{"license.html":{}}}],["receives",{"_index":2233,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{},"license.html":{}}}],["recipient",{"_index":2112,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":2295,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":1666,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":1832,"title":{},"body":{"license.html":{}}}],["record",{"_index":322,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/PlaylistService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["record.albums.length",{"_index":323,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{}}}],["record.profiles.length",{"_index":1170,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["record.songs.length",{"_index":1353,"title":{},"body":{"injectables/SongService.html":{}}}],["redistribute",{"_index":2409,"title":{},"body":{"license.html":{}}}],["referring",{"_index":1642,"title":{},"body":{"license.html":{}}}],["refers",{"_index":1754,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["refrain",{"_index":2334,"title":{},"body":{"license.html":{}}}],["regard",{"_index":2142,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":1986,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":1889,"title":{},"body":{"license.html":{}}}],["reinstated",{"_index":2197,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":907,"title":{},"body":{"classes/CreateSongDto.html":{},"license.html":{}}}],["release",{"_index":792,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["released",{"_index":811,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{}}}],["relevant",{"_index":1979,"title":{},"body":{"license.html":{}}}],["relicensing",{"_index":2182,"title":{},"body":{"license.html":{}}}],["relying",{"_index":2286,"title":{},"body":{"license.html":{}}}],["remain",{"_index":2051,"title":{},"body":{"license.html":{}}}],["remains",{"_index":1634,"title":{},"body":{"license.html":{}}}],["removal",{"_index":2144,"title":{},"body":{"license.html":{}}}],["remove",{"_index":421,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"license.html":{}}}],["render",{"_index":1745,"title":{},"body":{"license.html":{}}}],["rendered",{"_index":2385,"title":{},"body":{"license.html":{}}}],["repair",{"_index":2374,"title":{},"body":{"license.html":{}}}],["represent",{"_index":2094,"title":{},"body":{"license.html":{}}}],["req",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["req.get('host",{"_index":356,"title":{},"body":{"controllers/AppController.html":{}}}],["req.protocol",{"_index":355,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":329,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":2484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require",{"_index":1884,"title":{},"body":{"license.html":{}}}],["required",{"_index":2102,"title":{},"body":{"license.html":{}}}],["requirement",{"_index":1980,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":2055,"title":{},"body":{"license.html":{}}}],["requires",{"_index":1687,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":1769,"title":{},"body":{"license.html":{}}}],["requisição",{"_index":337,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":158,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"overview.html":{}}}],["resolved",{"_index":2082,"title":{},"body":{"license.html":{}}}],["respect",{"_index":1661,"title":{},"body":{"license.html":{}}}],["response.dto",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["response.dto.ts",{"_index":1005,"title":{},"body":{"classes/LoginUserResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":1010,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1012,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["responsibilities",{"_index":1659,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":2235,"title":{},"body":{"license.html":{}}}],["restrict",{"_index":1733,"title":{},"body":{"license.html":{}}}],["restricting",{"_index":1948,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":2180,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":954,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["result",{"_index":2358,"title":{},"body":{"license.html":{}}}],["resulting",{"_index":1772,"title":{},"body":{"license.html":{}}}],["results",{"_index":43,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":2116,"title":{},"body":{"license.html":{}}}],["retorna",{"_index":339,"title":{},"body":{"controllers/AppController.html":{}}}],["return",{"_index":134,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":81,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["reviewing",{"_index":2396,"title":{},"body":{"license.html":{}}}],["revised",{"_index":2342,"title":{},"body":{"license.html":{}}}],["right",{"_index":914,"title":{},"body":{"classes/CreateSongDto.html":{},"license.html":{}}}],["rights",{"_index":1650,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1568,"title":{},"body":{"dependencies.html":{}}}],["risk",{"_index":2366,"title":{},"body":{"license.html":{}}}],["rock",{"_index":804,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{}}}],["rom",{"_index":2119,"title":{},"body":{"license.html":{}}}],["roses",{"_index":801,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["route",{"_index":2486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["royalty",{"_index":2251,"title":{},"body":{"license.html":{}}}],["rules",{"_index":2129,"title":{},"body":{"license.html":{}}}],["run",{"_index":1699,"title":{},"body":{"license.html":{}}}],["running",{"_index":397,"title":{},"body":{"injectables/AppService.html":{},"license.html":{}}}],["runs",{"_index":1863,"title":{},"body":{"license.html":{}}}],["rxjs",{"_index":1570,"title":{},"body":{"dependencies.html":{}}}],["safest",{"_index":2411,"title":{},"body":{"license.html":{}}}],["sake",{"_index":1686,"title":{},"body":{"license.html":{}}}],["sale",{"_index":2261,"title":{},"body":{"license.html":{}}}],["same",{"_index":1667,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["satisfy",{"_index":2054,"title":{},"body":{"license.html":{}}}],["saying",{"_index":2048,"title":{},"body":{"license.html":{}}}],["school",{"_index":2440,"title":{},"body":{"license.html":{}}}],["scope",{"_index":2308,"title":{},"body":{"license.html":{}}}],["scripts",{"_index":1870,"title":{},"body":{"license.html":{}}}],["search",{"_index":266,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{}}}],["searchforfavoriteplaylistfromprofile",{"_index":1107,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["searchforfavoriteplaylistfromprofile(profileid",{"_index":1134,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["secondarily",{"_index":1782,"title":{},"body":{"license.html":{}}}],["secret",{"_index":582,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":994,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":1926,"title":{},"body":{"license.html":{}}}],["sections",{"_index":2010,"title":{},"body":{"license.html":{}}}],["see",{"_index":2421,"title":{},"body":{"license.html":{}}}],["select",{"_index":196,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["selected",{"_index":971,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["sell",{"_index":2275,"title":{},"body":{"license.html":{}}}],["selling",{"_index":2260,"title":{},"body":{"license.html":{}}}],["semiconductor",{"_index":1757,"title":{},"body":{"license.html":{}}}],["senha",{"_index":743,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["separable",{"_index":2064,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1994,"title":{},"body":{"license.html":{}}}],["separately",{"_index":1990,"title":{},"body":{"license.html":{}}}],["server",{"_index":396,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"license.html":{}}}],["serves",{"_index":1853,"title":{},"body":{"license.html":{}}}],["service",{"_index":2121,"title":{},"body":{"license.html":{}}}],["servicing",{"_index":2373,"title":{},"body":{"license.html":{}}}],["set",{"_index":873,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["shall",{"_index":1931,"title":{},"body":{"license.html":{}}}],["share",{"_index":1625,"title":{},"body":{"license.html":{}}}],["shared",{"_index":1879,"title":{},"body":{"license.html":{}}}],["short",{"_index":2428,"title":{},"body":{"license.html":{}}}],["show",{"_index":1670,"title":{},"body":{"license.html":{}}}],["sign",{"_index":2441,"title":{},"body":{"license.html":{}}}],["significant",{"_index":2095,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":584,"title":{},"body":{"modules/AuthModule.html":{}}}],["silva",{"_index":758,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["similar",{"_index":1946,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":2329,"title":{},"body":{"license.html":{}}}],["single",{"_index":2301,"title":{},"body":{"license.html":{}}}],["six",{"_index":812,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["skip",{"_index":500,"title":{},"body":{"injectables/ArtistService.html":{}}}],["software",{"_index":1605,"title":{},"body":{"license.html":{}}}],["sold",{"_index":817,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{}}}],["sole",{"_index":1910,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1923,"title":{},"body":{"license.html":{}}}],["song",{"_index":21,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"injectables/ArtistService.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{}}}],["song')@apioperation({summary",{"_index":1048,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["song.controller",{"_index":1253,"title":{},"body":{"modules/ProfileFavoriteSongModule.html":{},"modules/SongModule.html":{}}}],["song.controller.ts",{"_index":1229,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{},"coverage.html":{}}}],["song.controller.ts:30",{"_index":1232,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["song.controller.ts:45",{"_index":1237,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["song.controller.ts:57",{"_index":1235,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["song.dto",{"_index":1073,"title":{},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{}}}],["song.dto.ts",{"_index":8,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["song.dto.ts:10",{"_index":29,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{}}}],["song.dto.ts:11",{"_index":918,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["song.dto.ts:17",{"_index":35,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["song.dto.ts:18",{"_index":920,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["song.dto.ts:25",{"_index":903,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["song.dto.ts:32",{"_index":913,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["song.entity.ts",{"_index":1227,"title":{},"body":{"classes/ProfileFavoriteSong.html":{},"coverage.html":{}}}],["song.module",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["song.module.ts",{"_index":1252,"title":{},"body":{"modules/ProfileFavoriteSongModule.html":{}}}],["song.service",{"_index":1239,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{}}}],["song.service.ts",{"_index":1254,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"coverage.html":{}}}],["song.service.ts:10",{"_index":1258,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:102",{"_index":1259,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:117",{"_index":1263,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:137",{"_index":1265,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:60",{"_index":1261,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:7",{"_index":1257,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song/dto/create",{"_index":889,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"coverage.html":{}}}],["song/entities/profile",{"_index":1226,"title":{},"body":{"classes/ProfileFavoriteSong.html":{},"coverage.html":{}}}],["song/profile",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"coverage.html":{}}}],["song/song.module",{"_index":387,"title":{},"body":{"modules/AppModule.html":{}}}],["songcontroller",{"_index":1302,"title":{"controllers/SongController.html":{}},"body":{"controllers/SongController.html":{},"modules/SongModule.html":{},"coverage.html":{}}}],["songid",{"_index":12,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{}}}],["songidd",{"_index":1230,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{}}}],["songiddto",{"_index":1233,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["songinplaylist",{"_index":1152,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["songinplaylist.songs.length",{"_index":1154,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["songmodule",{"_index":369,"title":{"modules/SongModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SongModule.html":{},"modules.html":{},"overview.html":{}}}],["songprofile",{"_index":1276,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["songprofile.songs.length",{"_index":1277,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["songs",{"_index":435,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/CreateUserPlanDto.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{}}}],["songs.length",{"_index":506,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/SongService.html":{}}}],["songservice",{"_index":1315,"title":{"injectables/SongService.html":{}},"body":{"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"coverage.html":{},"overview.html":{}}}],["songurl",{"_index":501,"title":{},"body":{"injectables/ArtistService.html":{},"classes/CreateSongDto.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/SongService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"injectables/PlaylistService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"license.html":{}}}],["spare",{"_index":2025,"title":{},"body":{"license.html":{}}}],["speak",{"_index":1641,"title":{},"body":{"license.html":{}}}],["special",{"_index":1738,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1861,"title":{},"body":{"license.html":{}}}],["specifically",{"_index":1883,"title":{},"body":{"license.html":{}}}],["specified",{"_index":1836,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":2350,"title":{},"body":{"license.html":{}}}],["specify",{"_index":2354,"title":{},"body":{"license.html":{}}}],["spirit",{"_index":2343,"title":{},"body":{"license.html":{}}}],["spotify",{"_index":395,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["src/.../confirm",{"_index":2464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../handle",{"_index":2462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logged",{"_index":2463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1577,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/admin/admin.controller.ts",{"_index":65,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:33",{"_index":78,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:41",{"_index":91,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:49",{"_index":94,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:57",{"_index":100,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:67",{"_index":85,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.module.ts",{"_index":160,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/admin.service.ts",{"_index":171,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/admin/admin.service.ts:16",{"_index":178,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:19",{"_index":197,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:31",{"_index":180,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:61",{"_index":184,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:67",{"_index":188,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:71",{"_index":190,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:92",{"_index":183,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:97",{"_index":186,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/dto/create",{"_index":738,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["src/admin/dto/update",{"_index":1356,"title":{},"body":{"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["src/admin/entities/admin.entity",{"_index":443,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["src/admin/entities/admin.entity.ts",{"_index":46,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/admin/entities/admin.entity.ts:2",{"_index":58,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:3",{"_index":59,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:4",{"_index":54,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:5",{"_index":60,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:6",{"_index":57,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:7",{"_index":56,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:8",{"_index":61,"title":{},"body":{"classes/Admin.html":{}}}],["src/album/album.controller.ts",{"_index":249,"title":{},"body":{"controllers/AlbumController.html":{},"coverage.html":{}}}],["src/album/album.controller.ts:33",{"_index":255,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:41",{"_index":263,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:49",{"_index":267,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:57",{"_index":271,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:70",{"_index":260,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.module.ts",{"_index":297,"title":{},"body":{"modules/AlbumModule.html":{}}}],["src/album/album.service.ts",{"_index":299,"title":{},"body":{"injectables/AlbumService.html":{},"coverage.html":{}}}],["src/album/album.service.ts:10",{"_index":301,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:12",{"_index":303,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:40",{"_index":307,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:64",{"_index":309,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:68",{"_index":313,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:83",{"_index":305,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:90",{"_index":311,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/dto/create",{"_index":780,"title":{},"body":{"classes/CreateAlbumDto.html":{},"coverage.html":{}}}],["src/album/dto/update",{"_index":1367,"title":{},"body":{"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["src/album/entities/album.entity.ts",{"_index":236,"title":{},"body":{"classes/Album.html":{},"coverage.html":{}}}],["src/album/entities/album.entity.ts:2",{"_index":242,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:3",{"_index":244,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:4",{"_index":247,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:5",{"_index":243,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:6",{"_index":240,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:7",{"_index":241,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:8",{"_index":245,"title":{},"body":{"classes/Album.html":{}}}],["src/app.controller.ts",{"_index":326,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:21",{"_index":334,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":372,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":391,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":393,"title":{},"body":{"injectables/AppService.html":{}}}],["src/artist/artist.controller.ts",{"_index":414,"title":{},"body":{"controllers/ArtistController.html":{},"coverage.html":{}}}],["src/artist/artist.controller.ts:106",{"_index":425,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:34",{"_index":419,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:44",{"_index":439,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:54",{"_index":430,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:64",{"_index":432,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:74",{"_index":436,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:84",{"_index":442,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:95",{"_index":422,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.module.ts",{"_index":477,"title":{},"body":{"modules/ArtistModule.html":{}}}],["src/artist/artist.service.ts",{"_index":479,"title":{},"body":{"injectables/ArtistService.html":{},"coverage.html":{}}}],["src/artist/artist.service.ts:108",{"_index":486,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:12",{"_index":480,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:15",{"_index":481,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:151",{"_index":487,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:185",{"_index":490,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:207",{"_index":482,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:213",{"_index":484,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:59",{"_index":489,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:91",{"_index":485,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/dto/create",{"_index":797,"title":{},"body":{"classes/CreateArtistDto.html":{},"coverage.html":{}}}],["src/artist/dto/update",{"_index":1370,"title":{},"body":{"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["src/artist/entities/artist.entity",{"_index":272,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"controllers/SongController.html":{}}}],["src/artist/entities/artist.entity.ts",{"_index":399,"title":{},"body":{"classes/Artist.html":{},"coverage.html":{}}}],["src/artist/entities/artist.entity.ts:10",{"_index":403,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:11",{"_index":405,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:12",{"_index":411,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:2",{"_index":407,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:3",{"_index":409,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:4",{"_index":408,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:5",{"_index":404,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:6",{"_index":406,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:7",{"_index":410,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:8",{"_index":402,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:9",{"_index":412,"title":{},"body":{"classes/Artist.html":{}}}],["src/auth/auth.controller.ts",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:45",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:57",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:66",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:76",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:86",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:96",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":576,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:108",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:13",{"_index":589,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:44",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:70",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/logged",{"_index":1072,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/UserController.html":{},"classes/UserProfileId.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":1003,"title":{},"body":{"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":999,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:11",{"_index":1000,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:19",{"_index":1002,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":977,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:17",{"_index":982,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":979,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/logged",{"_index":115,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/category/category.controller.ts",{"_index":617,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/category/category.controller.ts:34",{"_index":623,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:42",{"_index":633,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:50",{"_index":637,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:58",{"_index":640,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:71",{"_index":628,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.module.ts",{"_index":659,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/category/category.service.ts",{"_index":661,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/category/category.service.ts:12",{"_index":663,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:24",{"_index":666,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:41",{"_index":668,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:61",{"_index":669,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:65",{"_index":671,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:82",{"_index":665,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:9",{"_index":662,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/dto/create",{"_index":853,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/category/dto/update",{"_index":1372,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/category/entities/category.entity.ts",{"_index":611,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/category/entities/category.entity.ts:2",{"_index":613,"title":{},"body":{"classes/Category.html":{}}}],["src/category/entities/category.entity.ts:3",{"_index":614,"title":{},"body":{"classes/Category.html":{}}}],["src/category/entities/category.entity.ts:4",{"_index":612,"title":{},"body":{"classes/Category.html":{}}}],["src/category/entities/category.entity.ts:5",{"_index":615,"title":{},"body":{"classes/Category.html":{}}}],["src/country/country,controller.ts",{"_index":689,"title":{},"body":{"controllers/CountryController.html":{},"coverage.html":{}}}],["src/country/country,controller.ts:32",{"_index":691,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/country/country,controller.ts:40",{"_index":696,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/country/country,controller.ts:48",{"_index":698,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/country/country,controller.ts:56",{"_index":701,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/country/country,controller.ts:69",{"_index":694,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/country/country.module.ts",{"_index":721,"title":{},"body":{"modules/CountryModule.html":{}}}],["src/country/country.service.ts",{"_index":723,"title":{},"body":{"injectables/CountryService.html":{},"coverage.html":{}}}],["src/country/country.service.ts:12",{"_index":725,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:27",{"_index":727,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:44",{"_index":729,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:48",{"_index":730,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:65",{"_index":726,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:70",{"_index":728,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:9",{"_index":724,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/dto/create",{"_index":856,"title":{},"body":{"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["src/country/dto/update",{"_index":1374,"title":{},"body":{"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["src/country/entities/country,entity.ts",{"_index":681,"title":{},"body":{"classes/Country.html":{},"coverage.html":{}}}],["src/country/entities/country,entity.ts:2",{"_index":685,"title":{},"body":{"classes/Country.html":{}}}],["src/country/entities/country,entity.ts:3",{"_index":686,"title":{},"body":{"classes/Country.html":{}}}],["src/country/entities/country,entity.ts:4",{"_index":683,"title":{},"body":{"classes/Country.html":{}}}],["src/country/entities/country,entity.ts:5",{"_index":684,"title":{},"body":{"classes/Country.html":{}}}],["src/country/entities/country,entity.ts:6",{"_index":687,"title":{},"body":{"classes/Country.html":{}}}],["src/main.ts",{"_index":1538,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/playlist/dto/create",{"_index":6,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreatePlaylistDto.html":{},"coverage.html":{}}}],["src/playlist/dto/update",{"_index":1376,"title":{},"body":{"classes/UpdatePlaylistDto.html":{},"coverage.html":{}}}],["src/playlist/entities/playlist.entity.ts",{"_index":1022,"title":{},"body":{"classes/Playlist.html":{},"coverage.html":{}}}],["src/playlist/entities/playlist.entity.ts:2",{"_index":1024,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:3",{"_index":1026,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:4",{"_index":1025,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:5",{"_index":1027,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:6",{"_index":1028,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:7",{"_index":1023,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:8",{"_index":1029,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/playlist.controller.ts",{"_index":1031,"title":{},"body":{"controllers/PlaylistController.html":{},"coverage.html":{}}}],["src/playlist/playlist.controller.ts:109",{"_index":1049,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:125",{"_index":1061,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:142",{"_index":1044,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:158",{"_index":1058,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:33",{"_index":1051,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:48",{"_index":1064,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:60",{"_index":1067,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:75",{"_index":1071,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:94",{"_index":1055,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.module.ts",{"_index":1100,"title":{},"body":{"modules/PlaylistModule.html":{}}}],["src/playlist/playlist.service.ts",{"_index":1102,"title":{},"body":{"injectables/PlaylistService.html":{},"coverage.html":{}}}],["src/playlist/playlist.service.ts:110",{"_index":1137,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:135",{"_index":1119,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:14",{"_index":1108,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:144",{"_index":1113,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:17",{"_index":1117,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:208",{"_index":1123,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:249",{"_index":1110,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:311",{"_index":1121,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:344",{"_index":1131,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:363",{"_index":1129,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:382",{"_index":1135,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:402",{"_index":1115,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:416",{"_index":1133,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:48",{"_index":1125,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/playlist/playlist.service.ts:72",{"_index":1127,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["src/prisma/prisma.module",{"_index":164,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":1178,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":202,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":1181,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":1187,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":1189,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/profile",{"_index":888,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"coverage.html":{}}}],["src/profile/dto/create",{"_index":880,"title":{},"body":{"classes/CreateProfileDto.html":{},"coverage.html":{}}}],["src/profile/dto/update",{"_index":1378,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/profile/entities/profile.entity.ts",{"_index":1194,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/profile/entities/profile.entity.ts:2",{"_index":1196,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:3",{"_index":1198,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:4",{"_index":1197,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:5",{"_index":1200,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:6",{"_index":1195,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:7",{"_index":1199,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/profile.controller.ts",{"_index":1202,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/profile/profile.controller.ts:33",{"_index":1204,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:44",{"_index":1208,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:52",{"_index":1212,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:65",{"_index":1206,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.module.ts",{"_index":1281,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/profile/profile.service.ts",{"_index":1283,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/profile/profile.service.ts:109",{"_index":1286,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:116",{"_index":1288,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:14",{"_index":1284,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:17",{"_index":1285,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:69",{"_index":1287,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:91",{"_index":1290,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/song/dto/create",{"_index":897,"title":{},"body":{"classes/CreateSongDto.html":{},"coverage.html":{}}}],["src/song/dto/update",{"_index":1380,"title":{},"body":{"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["src/song/entities/song.entity.ts",{"_index":1013,"title":{},"body":{"classes/Music.html":{},"coverage.html":{}}}],["src/song/entities/song.entity.ts:2",{"_index":1018,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:3",{"_index":1020,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:4",{"_index":1019,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:5",{"_index":1015,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:6",{"_index":1016,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:7",{"_index":1017,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:8",{"_index":1021,"title":{},"body":{"classes/Music.html":{}}}],["src/song/song.controller.ts",{"_index":1303,"title":{},"body":{"controllers/SongController.html":{},"coverage.html":{}}}],["src/song/song.controller.ts:35",{"_index":1304,"title":{},"body":{"controllers/SongController.html":{}}}],["src/song/song.controller.ts:43",{"_index":1308,"title":{},"body":{"controllers/SongController.html":{}}}],["src/song/song.controller.ts:51",{"_index":1311,"title":{},"body":{"controllers/SongController.html":{}}}],["src/song/song.controller.ts:59",{"_index":1314,"title":{},"body":{"controllers/SongController.html":{}}}],["src/song/song.controller.ts:72",{"_index":1306,"title":{},"body":{"controllers/SongController.html":{}}}],["src/song/song.module.ts",{"_index":1331,"title":{},"body":{"modules/SongModule.html":{}}}],["src/song/song.service.ts",{"_index":1332,"title":{},"body":{"injectables/SongService.html":{},"coverage.html":{}}}],["src/song/song.service.ts:12",{"_index":1335,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:125",{"_index":1341,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:161",{"_index":1343,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:184",{"_index":1345,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:199",{"_index":1336,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:69",{"_index":1337,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:9",{"_index":1334,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:93",{"_index":1339,"title":{},"body":{"injectables/SongService.html":{}}}],["src/user",{"_index":940,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"coverage.html":{}}}],["src/user/dto/create",{"_index":922,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":1383,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":446,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/LoginUserResponseDto.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{},"classes/UserProfileId.html":{}}}],["src/user/entities/user.entity.ts",{"_index":1390,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:2",{"_index":1394,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:3",{"_index":1395,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:4",{"_index":1391,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:5",{"_index":1393,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:6",{"_index":1396,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:7",{"_index":1398,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:8",{"_index":1392,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:9",{"_index":1397,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":1400,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:33",{"_index":1406,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:43",{"_index":1414,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:53",{"_index":1418,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:63",{"_index":1421,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:73",{"_index":1424,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":1409,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:98",{"_index":1412,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":1446,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1496,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:107",{"_index":1507,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:111",{"_index":1509,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:115",{"_index":1511,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:144",{"_index":1500,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:149",{"_index":1502,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:16",{"_index":1497,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":1498,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:58",{"_index":1503,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:76",{"_index":1505,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/confirm",{"_index":204,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/handle",{"_index":207,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stand",{"_index":1722,"title":{},"body":{"license.html":{}}}],["standard",{"_index":1830,"title":{},"body":{"license.html":{}}}],["standards",{"_index":1833,"title":{},"body":{"license.html":{}}}],["start",{"_index":2412,"title":{},"body":{"license.html":{}}}],["started",{"_index":1579,"title":{"index.html":{},"license.html":{}},"body":{}}],["starts",{"_index":2429,"title":{},"body":{"license.html":{}}}],["state",{"_index":2413,"title":{},"body":{"license.html":{}}}],["stated",{"_index":1896,"title":{},"body":{"license.html":{}}}],["statement",{"_index":2184,"title":{},"body":{"license.html":{}}}],["statements",{"_index":1521,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":826,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateCountryDto.html":{},"license.html":{}}}],["stating",{"_index":1969,"title":{},"body":{"license.html":{}}}],["status",{"_index":333,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"license.html":{}}}],["steps",{"_index":1675,"title":{},"body":{"license.html":{}}}],["storage",{"_index":2001,"title":{},"body":{"license.html":{}}}],["strategy",{"_index":986,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["studio",{"_index":813,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["subdividing",{"_index":2241,"title":{},"body":{"license.html":{}}}],["subject",{"_index":2234,"title":{},"body":{"license.html":{}}}],["sublicenses",{"_index":2272,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":1925,"title":{},"body":{"license.html":{}}}],["subprograms",{"_index":1882,"title":{},"body":{"license.html":{}}}],["subroutine",{"_index":2444,"title":{},"body":{"license.html":{}}}],["subsection",{"_index":2036,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2090,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":1720,"title":{},"body":{"license.html":{}}}],["such",{"_index":1662,"title":{},"body":{"license.html":{}}}],["sue",{"_index":2284,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":2104,"title":{},"body":{"license.html":{}}}],["summary",{"_index":132,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["super",{"_index":990,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["supplement",{"_index":2137,"title":{},"body":{"license.html":{}}}],["support",{"_index":1976,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supports",{"_index":2044,"title":{},"body":{"license.html":{}}}],["sure",{"_index":1633,"title":{},"body":{"license.html":{}}}],["surrender",{"_index":1656,"title":{},"body":{"license.html":{}}}],["survive",{"_index":2183,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":2388,"title":{},"body":{"license.html":{}}}],["svg",{"_index":2455,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["system",{"_index":1842,"title":{},"body":{"license.html":{}}}],["systematic",{"_index":1707,"title":{},"body":{"license.html":{}}}],["table",{"_index":1546,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1545,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":498,"title":{},"body":{"injectables/ArtistService.html":{},"license.html":{}}}],["tangible",{"_index":2070,"title":{},"body":{"license.html":{}}}],["technological",{"_index":1934,"title":{},"body":{"license.html":{}}}],["tells",{"_index":1816,"title":{},"body":{"license.html":{}}}],["term",{"_index":1894,"title":{},"body":{"license.html":{}}}],["terminal",{"_index":2427,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":2191,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":2215,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":2200,"title":{},"body":{"license.html":{}}}],["termination",{"_index":2187,"title":{},"body":{"license.html":{}}}],["terms",{"_index":1671,"title":{},"body":{"license.html":{}}}],["therefore",{"_index":1657,"title":{},"body":{"license.html":{}}}],["things",{"_index":1648,"title":{},"body":{"license.html":{}}}],["third",{"_index":1961,"title":{},"body":{"license.html":{}}}],["this.$connect",{"_index":1191,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1192,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.adminselect",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.adminservice.create(dto",{"_index":135,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.delete(id",{"_index":148,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.findall",{"_index":137,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.findone(id",{"_index":141,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.update(admin.id",{"_index":144,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.albumservice.create(artist.id",{"_index":281,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.delete(artist.id",{"_index":292,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.findall(artist.id",{"_index":283,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.findone(artist.id",{"_index":287,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.update(artist.id",{"_index":289,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.appservice.getappstatus(baseurl",{"_index":357,"title":{},"body":{"controllers/AppController.html":{}}}],["this.artistservice.create(dto",{"_index":454,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.delete(artist.id",{"_index":469,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.deleteartist(id",{"_index":473,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.findall",{"_index":459,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.findone(id",{"_index":462,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.findonebyartist(artistid",{"_index":465,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.homepage(artist.id",{"_index":457,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.update(artist.id",{"_index":467,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.authservice.loginadmin(logindto",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginartist(logindto",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginprofile(user",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginuser(logindto",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.categoryservice.create(dto",{"_index":647,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.delete(categoryid",{"_index":655,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall",{"_index":648,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(categoryid",{"_index":651,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(categoryid",{"_index":653,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.checkifplaylistisprivate(playlistid",{"_index":1163,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["this.countryservice.create(dto",{"_index":707,"title":{},"body":{"controllers/CountryController.html":{}}}],["this.countryservice.delete(id",{"_index":717,"title":{},"body":{"controllers/CountryController.html":{}}}],["this.countryservice.findall",{"_index":709,"title":{},"body":{"controllers/CountryController.html":{}}}],["this.countryservice.findone(id",{"_index":713,"title":{},"body":{"controllers/CountryController.html":{}}}],["this.countryservice.update(id",{"_index":715,"title":{},"body":{"controllers/CountryController.html":{}}}],["this.favoritesongservice.create",{"_index":1244,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["this.favoritesongservice.delete",{"_index":1248,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["this.favoritesongservice.findall",{"_index":1246,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["this.findbyid(artistdid",{"_index":1354,"title":{},"body":{"injectables/SongService.html":{}}}],["this.findbyid(artistid",{"_index":1355,"title":{},"body":{"injectables/SongService.html":{}}}],["this.findbyid(categoryid",{"_index":677,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.findbyid(categoryid).catch(handleerror",{"_index":676,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.findbyid(id",{"_index":228,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CountryService.html":{},"injectables/UserService.html":{}}}],["this.findbyid(userid",{"_index":1516,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findbyidprofileuser(userid",{"_index":1266,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["this.findbyidsonginprofile(profileid",{"_index":1271,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["this.findonealbuminartist(artistid",{"_index":321,"title":{},"body":{"injectables/AlbumService.html":{}}}],["this.findoneplaylistinprofile(profileid",{"_index":1149,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["this.findoneprofileinuser(userid",{"_index":1138,"title":{},"body":{"injectables/PlaylistService.html":{},"injectables/ProfileService.html":{}}}],["this.findonesong(playlistsong.songid",{"_index":1151,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["this.jwt.sign",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.playlistservice.addplaylistfavorite",{"_index":1095,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.addsongtoplaylist",{"_index":1091,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.create",{"_index":1079,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.delete",{"_index":1090,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.deleteplaylistfavorite",{"_index":1096,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.deletesongtoplaylist",{"_index":1092,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.findallplaylistprofile",{"_index":1083,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.findoneplaylist",{"_index":1086,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.updateplaylist",{"_index":1088,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.prisma.admin",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.prisma.admin.delete",{"_index":232,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.prisma.album",{"_index":316,"title":{},"body":{"injectables/AlbumService.html":{}}}],["this.prisma.artist",{"_index":317,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SongService.html":{}}}],["this.prisma.artist.findunique",{"_index":507,"title":{},"body":{"injectables/ArtistService.html":{}}}],["this.prisma.category",{"_index":673,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.update",{"_index":679,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.country",{"_index":732,"title":{},"body":{"injectables/CountryService.html":{}}}],["this.prisma.country.delete",{"_index":735,"title":{},"body":{"injectables/CountryService.html":{}}}],["this.prisma.country.findunique",{"_index":736,"title":{},"body":{"injectables/CountryService.html":{}}}],["this.prisma.playlist",{"_index":1141,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["this.prisma.playlistsong",{"_index":1159,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["this.prisma.profile",{"_index":1143,"title":{},"body":{"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["this.prisma.profilefavoriteplaylist",{"_index":1165,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["this.prisma.profilefavoriteplaylist.findmany",{"_index":1172,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["this.prisma.profilefavoritesong",{"_index":1268,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["this.prisma.song",{"_index":1173,"title":{},"body":{"injectables/PlaylistService.html":{},"injectables/SongService.html":{}}}],["this.prisma.user",{"_index":214,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":1517,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.userplan",{"_index":1491,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["this.prisma.userplan.create",{"_index":1490,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["this.prisma.userplan.delete",{"_index":1492,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["this.profileservice.create(userprofileid.user.id",{"_index":1217,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.delete(userprofileid.user.id",{"_index":1224,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.findall(userprofileid.user.id",{"_index":1219,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.update(userprofileid.user.id",{"_index":1222,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.searchforfavoriteplaylistfromprofile",{"_index":1145,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["this.songservice.create(artist.id",{"_index":1318,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.delete(artist.id",{"_index":1327,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.findall",{"_index":1319,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.findone(songid",{"_index":1323,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.update(artist.id",{"_index":1325,"title":{},"body":{"controllers/SongController.html":{}}}],["this.userplanservice.create(dto",{"_index":1469,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["this.userplanservice.delete(id",{"_index":1475,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["this.userplanservice.findall",{"_index":1470,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["this.userplanservice.findone(id",{"_index":1472,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["this.userplanservice.update(id",{"_index":1474,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["this.userservice.create(dto",{"_index":1430,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deletemyaccount(userprofileid.user.id",{"_index":1439,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(id",{"_index":1442,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1431,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findmyaccount(userprofileid.user.id",{"_index":1433,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findoneuser(id",{"_index":1436,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatemyaccount(userprofileid.user.id",{"_index":1437,"title":{},"body":{"controllers/UserController.html":{}}}],["those",{"_index":1718,"title":{},"body":{"license.html":{}}}],["though",{"_index":2140,"title":{},"body":{"license.html":{}}}],["threatened",{"_index":1729,"title":{},"body":{"license.html":{}}}],["three",{"_index":814,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{}}}],["through",{"_index":1801,"title":{},"body":{"license.html":{}}}],["throw",{"_index":218,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["thus",{"_index":1917,"title":{},"body":{"license.html":{}}}],["time",{"_index":2211,"title":{},"body":{"license.html":{}}}],["token",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserResponseDto.html":{}}}],["tools",{"_index":1873,"title":{},"body":{"license.html":{}}}],["tracks",{"_index":959,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["trade",{"_index":2167,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":2166,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":2168,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":2110,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1803,"title":{},"body":{"license.html":{}}}],["transferred",{"_index":2111,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":2238,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":1558,"title":{},"body":{"dependencies.html":{}}}],["transmission",{"_index":2058,"title":{},"body":{"license.html":{}}}],["treated",{"_index":2139,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":1941,"title":{},"body":{"license.html":{}}}],["true",{"_index":194,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"classes/CreateSongDto.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["true})@apiproperty({description",{"_index":906,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["two",{"_index":1674,"title":{},"body":{"license.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"coverage.html":{},"license.html":{}}}],["type.ts",{"_index":1493,"title":{},"body":{"classes/UserProfileId.html":{},"coverage.html":{}}}],["type.ts:5",{"_index":1495,"title":{},"body":{"classes/UserProfileId.html":{}}}],["type.ts:8",{"_index":1494,"title":{},"body":{"classes/UserProfileId.html":{}}}],["types",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["typical",{"_index":2084,"title":{},"body":{"license.html":{}}}],["ui",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["um",{"_index":340,"title":{},"body":{"controllers/AppController.html":{}}}],["uma",{"_index":336,"title":{},"body":{"controllers/AppController.html":{}}}],["unable",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{}}}],["unacceptable",{"_index":1715,"title":{},"body":{"license.html":{}}}],["unauthorizedexception",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception('invalid",{"_index":596,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('profile",{"_index":607,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":997,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception(`can't",{"_index":1162,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["undefined",{"_index":2466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["under",{"_index":1761,"title":{},"body":{"license.html":{}}}],["united",{"_index":825,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateCountryDto.html":{}}}],["unknown",{"_index":181,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlaylistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["unless",{"_index":2093,"title":{},"body":{"license.html":{}}}],["unlicensed",{"_index":2460,"title":{},"body":{"properties.html":{}}}],["unlimited",{"_index":1900,"title":{},"body":{"license.html":{}}}],["unmodified",{"_index":1777,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":1928,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":2135,"title":{},"body":{"license.html":{}}}],["unprocessableentityexception",{"_index":2473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["until",{"_index":2199,"title":{},"body":{"license.html":{}}}],["update",{"_index":72,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/PlaylistService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["update(@loggedadmin",{"_index":143,"title":{},"body":{"controllers/AdminController.html":{},"controllers/UserPlanController.html":{}}}],["update(@loggedartist",{"_index":466,"title":{},"body":{"controllers/ArtistController.html":{}}}],["update(admin",{"_index":95,"title":{},"body":{"controllers/AdminController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["update(artist",{"_index":268,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/SongController.html":{}}}],["update(artistdid",{"_index":1344,"title":{},"body":{"injectables/SongService.html":{}}}],["update(artistid",{"_index":312,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{}}}],["update(categoryid",{"_index":670,"title":{},"body":{"injectables/CategoryService.html":{}}}],["update(id",{"_index":189,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CountryService.html":{},"injectables/UserPlanService.html":{}}}],["update(userid",{"_index":1289,"title":{},"body":{"injectables/ProfileService.html":{}}}],["update(userprofileid",{"_index":1209,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updateadmindto",{"_index":96,"title":{"classes/UpdateAdminDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["updatealbumdto",{"_index":269,"title":{"classes/UpdateAlbumDto.html":{}},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["updateartistdto",{"_index":440,"title":{"classes/UpdateArtistDto.html":{}},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["updatecategorydto",{"_index":638,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecountrydto",{"_index":699,"title":{"classes/UpdateCountryDto.html":{}},"body":{"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":53,"title":{},"body":{"classes/Admin.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/User.html":{},"classes/UserPlan.html":{},"injectables/UserService.html":{}}}],["updatemyaccount",{"_index":1405,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatemyaccount(userid",{"_index":1510,"title":{},"body":{"injectables/UserService.html":{}}}],["updatemyaccount(userprofileid",{"_index":1422,"title":{},"body":{"controllers/UserController.html":{}}}],["updateplaylist",{"_index":1038,"title":{},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{}}}],["updateplaylist(userid",{"_index":1136,"title":{},"body":{"injectables/PlaylistService.html":{}}}],["updateplaylist(userprofileid",{"_index":1068,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["updateplaylistdto",{"_index":1069,"title":{"classes/UpdatePlaylistDto.html":{}},"body":{"controllers/PlaylistController.html":{},"injectables/PlaylistService.html":{},"classes/UpdatePlaylistDto.html":{},"coverage.html":{}}}],["updateprofiledto",{"_index":1210,"title":{"classes/UpdateProfileDto.html":{}},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updates",{"_index":2122,"title":{},"body":{"license.html":{}}}],["updatesongdto",{"_index":1312,"title":{"classes/UpdateSongDto.html":{}},"body":{"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1382,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserplandto",{"_index":1386,"title":{"classes/UpdateUserPlanDto.html":{}},"body":{"classes/UpdateUserPlanDto.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"coverage.html":{}}}],["url",{"_index":346,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateAlbumDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{}}}],["use",{"_index":787,"title":{},"body":{"classes/CreateAlbumDto.html":{},"license.html":{}}}],["used",{"_index":1744,"title":{},"body":{"license.html":{}}}],["useful",{"_index":2420,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":107,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["useguards(authguard",{"_index":128,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["user",{"_index":212,"title":{"classes/User.html":{}},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserResponseDto.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user#5678",{"_index":744,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UpdateAdminDto.html":{}}}],["user')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{}}}],["user(@loggeduser",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["user(user",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{}}}],["user)'})@httpcode(httpstatus.created",{"_index":1043,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["user)'})@httpcode(httpstatus.no_content",{"_index":1054,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["user.controller",{"_index":1447,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":445,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["user.decorator.ts",{"_index":1537,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1384,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":923,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:19",{"_index":933,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":928,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":930,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":934,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:55",{"_index":926,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:62",{"_index":938,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.password",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.profiles.length",{"_index":1293,"title":{},"body":{"injectables/ProfileService.html":{}}}],["user.service",{"_index":1427,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.user.email",{"_index":602,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.userplan.accounts",{"_index":1294,"title":{},"body":{"injectables/ProfileService.html":{}}}],["user/user.module",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["user@gmail.com",{"_index":929,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["usercategory",{"_index":195,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["usercategoryname",{"_index":401,"title":{},"body":{"classes/Artist.html":{}}}],["usercontroller",{"_index":1399,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":1111,"title":{},"body":{"injectables/PlaylistService.html":{},"classes/Profile.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":370,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userobject",{"_index":2492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userobject.user.password",{"_index":2494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userobject.user.usercategoryname",{"_index":2493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userplan",{"_index":1292,"title":{"classes/UserPlan.html":{}},"body":{"injectables/ProfileService.html":{},"classes/UserPlan.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userplancontroller",{"_index":1457,"title":{"controllers/UserPlanController.html":{}},"body":{"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"coverage.html":{}}}],["userplanid",{"_index":924,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["userplanmodule",{"_index":371,"title":{"modules/UserPlanModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserPlanModule.html":{},"modules.html":{},"overview.html":{}}}],["userplanservice",{"_index":1467,"title":{"injectables/UserPlanService.html":{}},"body":{"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"coverage.html":{},"overview.html":{}}}],["userprofile",{"_index":1299,"title":{},"body":{"injectables/ProfileService.html":{}}}],["userprofile.profiles",{"_index":1301,"title":{},"body":{"injectables/ProfileService.html":{}}}],["userprofile.profiles.length",{"_index":1300,"title":{},"body":{"injectables/ProfileService.html":{}}}],["userprofileid",{"_index":537,"title":{"classes/UserProfileId.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/UserController.html":{},"classes/UserProfileId.html":{},"coverage.html":{}}}],["userprofileid.profileid",{"_index":1081,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["userprofileid.user.id",{"_index":1080,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["users",{"_index":1042,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserService.html":{},"license.html":{}}}],["userservice",{"_index":1426,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":2087,"title":{},"body":{"license.html":{}}}],["using",{"_index":2056,"title":{},"body":{"license.html":{}}}],["valid",{"_index":2023,"title":{},"body":{"license.html":{}}}],["validate",{"_index":978,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":980,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validation",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{}}}],["validator",{"_index":40,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginDto.html":{},"classes/LoginProfileDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UserProfileId.html":{},"dependencies.html":{}}}],["value",{"_index":193,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1534,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2461,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbatim",{"_index":1612,"title":{},"body":{"license.html":{}}}],["verifyconfirmpassword",{"_index":203,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["verifyconfirmpassword(dto.password",{"_index":209,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["version",{"_index":967,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{},"properties.html":{}}}],["versions",{"_index":1630,"title":{},"body":{"license.html":{}}}],["view",{"_index":331,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"license.html":{}}}],["violates",{"_index":2128,"title":{},"body":{"license.html":{}}}],["violation",{"_index":2195,"title":{},"body":{"license.html":{}}}],["visible",{"_index":1813,"title":{},"body":{"license.html":{}}}],["void",{"_index":2190,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["volume",{"_index":2000,"title":{},"body":{"license.html":{}}}],["w",{"_index":2431,"title":{},"body":{"license.html":{}}}],["waive",{"_index":1950,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":2401,"title":{},"body":{"license.html":{}}}],["want",{"_index":19,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"license.html":{}}}],["warranties",{"_index":1817,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1684,"title":{},"body":{"license.html":{}}}],["way",{"_index":1637,"title":{},"body":{"license.html":{}}}],["ways",{"_index":2013,"title":{},"body":{"license.html":{}}}],["weak",{"_index":852,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{}}}],["weak'})@apiproperty({description",{"_index":847,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{}}}],["welcome",{"_index":2432,"title":{},"body":{"license.html":{}}}],["well",{"_index":1794,"title":{},"body":{"license.html":{}}}],["whatever",{"_index":2243,"title":{},"body":{"license.html":{}}}],["whether",{"_index":874,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"license.html":{}}}],["whole",{"_index":1846,"title":{},"body":{"license.html":{}}}],["whose",{"_index":2066,"title":{},"body":{"license.html":{}}}],["widely",{"_index":1840,"title":{},"body":{"license.html":{}}}],["window",{"_index":1860,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":1940,"title":{},"body":{"license.html":{}}}],["wish",{"_index":1644,"title":{},"body":{"license.html":{}}}],["within",{"_index":2177,"title":{},"body":{"license.html":{}}}],["without",{"_index":1780,"title":{},"body":{"license.html":{}}}],["work",{"_index":1636,"title":{},"body":{"license.html":{}}}],["work's",{"_index":1872,"title":{},"body":{"license.html":{}}}],["working",{"_index":1841,"title":{},"body":{"license.html":{}}}],["works",{"_index":1619,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":822,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{}}}],["writing",{"_index":2361,"title":{},"body":{"license.html":{}}}],["written",{"_index":2022,"title":{},"body":{"license.html":{}}}],["year",{"_index":239,"title":{},"body":{"classes/Album.html":{},"injectables/ArtistService.html":{},"classes/CreateAlbumDto.html":{}}}],["years",{"_index":2024,"title":{},"body":{"license.html":{}}}],["yoru",{"_index":788,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["yourself",{"_index":2291,"title":{},"body":{"license.html":{}}}],["yunyne7jyhmfkmyqp0jon00w",{"_index":1009,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["z",{"_index":762,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{}}}],["z])(?=.*[a",{"_index":761,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{}}}],["zoom",{"_index":157,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddSongPlaylistDto.html":{"url":"classes/AddSongPlaylistDto.html","title":"class - AddSongPlaylistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddSongPlaylistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/dto/create-playlist-song.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                playlistId\n                            \n                            \n                                songId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        playlistId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'id of the playlist you want to add the song to', example: '36e8f88f-c079-4cc5-bd74-f8e87669ec99'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/playlist/dto/create-playlist-song.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        songId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'Id of the song you want to add to the playlist', example: 'd450edf0-48c0-4470-8cf4-34e588103949'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/playlist/dto/create-playlist-song.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID } from 'class-validator';\n\nexport class AddSongPlaylistDto {\n  @IsUUID()\n  @ApiProperty({\n    description: 'id of the playlist you want to add the song to',\n    example: '36e8f88f-c079-4cc5-bd74-f8e87669ec99',\n  })\n  playlistId: string;\n\n  @IsUUID()\n  @ApiProperty({\n    description: 'Id of the song you want to add to the playlist',\n    example: 'd450edf0-48c0-4470-8cf4-34e588103949',\n  })\n  songId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {\n  id?: string;\n  name: string;\n  cpf: string;\n  password: string;\n  email: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiOperation({summary: 'Create a new Admin - (MANAGER)'})\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:adminID')@ApiOperation({summary: 'Delete an admin by ID - (MANAGER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(admin: Admin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find-all')@ApiOperation({summary: 'Fetch all Admins - (MANAGER)'})\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find-one/:adminID')@ApiOperation({summary: 'Fetch an admin by ID - (MANAGER)'})\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(admin: Admin, dto: UpdateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update')@ApiOperation({summary: 'Edit an admin logged - (ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { LoggedManager } from 'src/auth/logged-manager.decorator';\nimport { AdminService } from './admin.service';\nimport { CreateAdminDto } from './dto/create-admin.dto';\nimport { UpdateAdminDto } from './dto/update-managerAdmin.dto';\nimport { Admin } from './entities/admin.entity';\n\n@Controller('admin')\n@ApiTags('manager-admin')\n// @UseGuards(AuthGuard())\n// @ApiBearerAuth()\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  @Post('/create')\n  @ApiOperation({\n    summary: 'Create a new Admin - (MANAGER)',\n  })\n  create(/*@LoggedManager() admin: Admin, */ @Body() dto: CreateAdminDto) {\n    return this.adminService.create(dto);\n  }\n\n  @Get('/find-all')\n  @ApiOperation({\n    summary: 'Fetch all Admins - (MANAGER)',\n  })\n  findAll(@LoggedManager() admin: Admin) {\n    return this.adminService.findAll();\n  }\n\n  @Get('/find-one/:adminID')\n  @ApiOperation({\n    summary: 'Fetch an admin by ID - (MANAGER)',\n  })\n  findOne(@LoggedManager() admin: Admin, @Param('adminID') id: string) {\n    return this.adminService.findOne(id);\n  }\n\n  @Patch('/update')\n  @ApiOperation({\n    summary: 'Edit an admin logged - (ADMIN)',\n  })\n  update(@LoggedAdmin() admin: Admin, @Body() dto: UpdateAdminDto) {\n    return this.adminService.update(admin.id, dto);\n  }\n\n  @Delete('/delete/:adminID')\n  @ApiOperation({\n    summary:\n      'Delete an admin by ID - (MANAGER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(@LoggedManager() admin: Admin, @Param('adminID') id: string) {\n    return this.adminService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AdminModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nPrismaModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { AdminController } from './admin.controller';\nimport { AdminService } from './admin.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [AdminController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                adminSelect\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/admin/admin.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateAdminDto)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, dto: UpdateAdminDto)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        adminSelect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: true,\n    name: true,\n    email: true,\n    cpf: true,\n    userCategory: {\n      select: {\n        name: true,\n      },\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/admin/admin.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { verifyConfirmPassword } from 'src/utils/confirm-password.ultil';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateAdminDto } from './dto/create-admin.dto';\nimport { UpdateAdminDto } from './dto/update-managerAdmin.dto';\nimport { Admin } from './entities/admin.entity';\n\n@Injectable()\nexport class AdminService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  adminSelect = {\n    id: true,\n    name: true,\n    email: true,\n    cpf: true,\n    userCategory: {\n      select: {\n        name: true,\n      },\n    },\n  };\n\n  async create(dto: CreateAdminDto) {\n    verifyConfirmPassword(dto.password, dto.confirmPassword);\n    const user = await this.prisma.user\n      .findUnique({\n        where: { email: dto.email },\n      })\n      .catch(handleError);\n\n    if (user) {\n      throw new BadRequestException(\n        'Unable to create an admin with a user email',\n      );\n    }\n    delete dto.confirmPassword;\n\n    const data: Prisma.AdminCreateInput = {\n      ...dto,\n      password: await bcrypt.hash(dto.password, 10),\n      userCategory: {\n        connect: {\n          name: 'admin',\n        },\n      },\n    };\n\n    return await this.prisma.admin\n      .create({ data, select: this.adminSelect })\n      .catch(handleError);\n  }\n\n  async findAll() {\n    return await this.prisma.admin\n      .findMany({ select: this.adminSelect })\n      .catch(handleError);\n  }\n\n  async findOne(id: string) {\n    return await this.findById(id);\n  }\n\n  async update(id: string, dto: UpdateAdminDto) {\n    if (dto.password) {\n      verifyConfirmPassword(dto.password, dto.confirmPassword);\n    }\n    delete dto.confirmPassword;\n\n    const data: Partial = { ...dto };\n\n    if (data.password) {\n      data.password = await bcrypt.hash(dto.password, 10);\n    }\n\n    return await this.prisma.admin\n      .update({\n        where: { id },\n        data,\n        select: this.adminSelect,\n      })\n      .catch(handleError);\n  }\n\n  async delete(id: string) {\n    await this.findById(id);\n    await this.prisma.admin.delete({ where: { id } }).catch(handleError);\n  }\n\n  async findById(id: string) {\n    const admin = await this.prisma.admin\n      .findUnique({ where: { id }, select: this.adminSelect })\n      .catch(handleError);\n\n    if (!admin) {\n      throw new NotFoundException(`Record with ID '${id}' not found`);\n    }\n    return admin;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Album.html":{"url":"classes/Album.html","title":"class - Album","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Album\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/entities/album.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                artistId\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        artistId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Album {\n  id?: string;\n  name: string;\n  year: number;\n  image: string;\n  artistId: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AlbumController.html":{"url":"controllers/AlbumController.html","title":"controller - AlbumController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AlbumController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/album.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                album\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(artist: Artist, dto: CreateAlbumDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiOperation({summary: 'Create an album and associate it with the artist who created it - (ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateAlbumDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(artist: Artist, albumId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:albumID')@ApiOperation({summary: 'Delete an album of the artist who is logged in - (ARTIST)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(artist: Artist)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find-all')@ApiOperation({summary: 'Fetch all albums of the artist who is logged in - (ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(artist: Artist, albumId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find-one/:albumID')@ApiOperation({summary: 'Search for an album by the artist who is logged in - (ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(artist: Artist, albumId: string, dto: UpdateAlbumDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update/:albumID')@ApiOperation({summary: 'Edit an album of the artist who is logged - (ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateAlbumDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Artist } from 'src/artist/entities/artist.entity';\nimport { LoggedArtist } from 'src/auth/logged-artist.decorator';\nimport { AlbumService } from './album.service';\nimport { CreateAlbumDto } from './dto/create-album.dto';\nimport { UpdateAlbumDto } from './dto/update-album.dto';\n\n@ApiTags('album')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('album')\nexport class AlbumController {\n  constructor(private readonly albumService: AlbumService) {}\n\n  @Post('/create')\n  @ApiOperation({\n    summary:\n      'Create an album and associate it with the artist who created it - (ARTIST)',\n  })\n  create(@LoggedArtist() artist: Artist, @Body() dto: CreateAlbumDto) {\n    return this.albumService.create(artist.id, dto);\n  }\n\n  @Get('/find-all')\n  @ApiOperation({\n    summary: 'Fetch all albums of the artist who is logged in - (ARTIST)',\n  })\n  findAll(@LoggedArtist() artist: Artist) {\n    return this.albumService.findAll(artist.id);\n  }\n\n  @Get('/find-one/:albumID')\n  @ApiOperation({\n    summary: 'Search for an album by the artist who is logged in - (ARTIST)',\n  })\n  findOne(@LoggedArtist() artist: Artist, @Param('albumID') albumId: string) {\n    return this.albumService.findOne(artist.id, albumId);\n  }\n\n  @Patch('update/:albumID')\n  @ApiOperation({\n    summary: 'Edit an album of the artist who is logged - (ARTIST)',\n  })\n  update(\n    @LoggedArtist() artist: Artist,\n    @Param('albumID') albumId: string,\n    @Body() dto: UpdateAlbumDto,\n  ) {\n    return this.albumService.update(artist.id, albumId, dto);\n  }\n\n  @Delete('delete/:albumID')\n  @ApiOperation({\n    summary: 'Delete an album of the artist who is logged in - (ARTIST)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(@LoggedArtist() artist: Artist, @Param('albumID') albumId: string) {\n    return this.albumService.delete(artist.id, albumId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AlbumModule.html":{"url":"modules/AlbumModule.html","title":"module - AlbumModule","body":"\n                   \n\n\n\n\n    Modules\n    AlbumModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AlbumModule\n\n\n\ncluster_AlbumModule_providers\n\n\n\ncluster_AlbumModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAlbumModule\n\nAlbumModule\n\nAlbumModule -->\n\nPrismaModule->AlbumModule\n\n\n\n\n\nAlbumService\n\nAlbumService\n\nAlbumModule -->\n\nAlbumService->AlbumModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/album/album.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AlbumService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AlbumController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AlbumService } from './album.service';\nimport { AlbumController } from './album.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [AlbumController],\n  providers: [AlbumService],\n})\nexport class AlbumModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AlbumService.html":{"url":"injectables/AlbumService.html","title":"injectable - AlbumService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AlbumService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/album.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneAlbumInArtist\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/album/album.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(artistId: string, dto: CreateAlbumDto)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateAlbumDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(artistId: string, albumId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(artistId: string, albumId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneAlbumInArtist\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneAlbumInArtist(artistId: string, albumId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(artistId: string, albumId: string, dto: UpdateAlbumDto)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateAlbumDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateAlbumDto } from './dto/create-album.dto';\nimport { UpdateAlbumDto } from './dto/update-album.dto';\nimport { Album } from './entities/album.entity';\n\n@Injectable()\nexport class AlbumService {\n  constructor(private readonly prisma: PrismaService) {}\n  async create(artistId: string, dto: CreateAlbumDto) {\n    const data: Prisma.AlbumCreateInput = {\n      ...dto,\n      artist: {\n        connect: {\n          id: artistId,\n        },\n      },\n    };\n\n    return await this.prisma.album\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          image: true,\n          artist: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll(artistId: string) {\n    const albums = await this.prisma.artist\n      .findMany({\n        where: { id: artistId },\n        select: {\n          name: true,\n          albums: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (albums[0].albums.length === 0) {\n      throw new NotFoundException('No album found');\n    }\n\n    return albums;\n  }\n\n  async findOne(artistId: string, albumId: string) {\n    return await this.findOneAlbumInArtist(artistId, albumId);\n  }\n\n  async update(artistId: string, albumId: string, dto: UpdateAlbumDto) {\n    await this.findOneAlbumInArtist(artistId, albumId);\n    return await this.prisma.album\n      .update({\n        where: { id: albumId },\n        data: { ...dto },\n        select: {\n          id: true,\n          name: true,\n          image: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async delete(artistId: string, albumId: string) {\n    await this.findOneAlbumInArtist(artistId, albumId);\n    return await this.prisma.album\n      .delete({ where: { id: albumId } })\n      .catch(handleError);\n  }\n\n  async findOneAlbumInArtist(artistId: string, albumId: string) {\n    const record = await this.prisma.artist\n      .findUnique({\n        where: { id: artistId },\n        select: {\n          albums: {\n            where: {\n              id: albumId,\n            },\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (record.albums.length === 0) {\n      throw new NotFoundException(`Album with ID '${albumId}' not found`);\n    }\n    return record;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAppStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAppStatus\n                        \n                    \n                \n            \n            \n                \ngetAppStatus(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'View aplication status'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:21\n                \n            \n\n\n            \n                \n                    Recebe uma requisição GET e retorna um objeto de status\nda aplicação com a URL de documentação\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Objeto de Request do Express\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Object\n\n                    \n                    \n                        Objeto de status da aplicação\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { AppService } from './app.service';\n\n@ApiTags('status')\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n    /**\n   * Recebe uma requisição GET e retorna um objeto de status\n   * da aplicação com a URL de documentação\n   * @param req Objeto de Request do Express\n   * @returns Objeto de status da aplicação\n   */\n  @Get()\n  @ApiOperation({\n    summary: 'View aplication status',\n  })\n  getAppStatus(@Req() req: Request): Object {\n    const baseUrl = req.protocol + '://' + req.get('host');\n    return this.appService.getAppStatus(baseUrl);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAlbumModule\n\nAlbumModule\n\nAppModule -->\n\nAlbumModule->AppModule\n\n\n\n\n\nArtistModule\n\nArtistModule\n\nAppModule -->\n\nArtistModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCountryModule\n\nCountryModule\n\nAppModule -->\n\nCountryModule->AppModule\n\n\n\n\n\nPlaylistModule\n\nPlaylistModule\n\nAppModule -->\n\nPlaylistModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProfileFavoriteSongModule\n\nProfileFavoriteSongModule\n\nAppModule -->\n\nProfileFavoriteSongModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nSongModule\n\nSongModule\n\nAppModule -->\n\nSongModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserPlanModule\n\nUserPlanModule\n\nAppModule -->\n\nUserPlanModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AlbumModule\n                        \n                        \n                            ArtistModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            CountryModule\n                        \n                        \n                            PlaylistModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProfileFavoriteSongModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            SongModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserPlanModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminModule } from './admin/admin.module';\nimport { AlbumModule } from './album/album.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ArtistModule } from './artist/artist.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CategoryModule } from './category/category.module';\nimport { CountryModule } from './country/country.module';\nimport { PlaylistModule } from './playlist/playlist.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ProfileFavoriteSongModule } from './profile-favorite-song/profile-favorite-song.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { SongModule } from './song/song.module';\nimport { UserPlanModule } from './user-plan/user-plan.module';\nimport { UserModule } from './user/user.module';\n\n@Module({\n  imports: [\n    PrismaModule,\n    AuthModule,\n    UserModule,\n    AdminModule,\n    UserPlanModule,\n    ProfileModule,\n    ArtistModule,\n    CountryModule,\n    AlbumModule,\n    SongModule,\n    ProfileFavoriteSongModule,\n    CategoryModule,\n    PlaylistModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAppStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAppStatus\n                        \n                    \n                \n            \n            \n                \ngetAppStatus(baseUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    baseUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; docs: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getAppStatus(baseUrl: string) {\n    return {\n      status: 'Spotify Server is running! 🚀🔊🎵🎧',\n      docs: baseUrl + '/api',\n    };\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Artist.html":{"url":"classes/Artist.html","title":"class - Artist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Artist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/entities/artist.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                about\n                            \n                            \n                                countryId\n                            \n                            \n                                cpf\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                userCategoryName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        about\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userCategoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Artist {\n  id?: string\n  name: string\n  image: string\n  cpf: string\n  email: string\n  password: string\n  about: string\n  userCategoryName: string\n  countryId: string\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArtistController.html":{"url":"controllers/ArtistController.html","title":"controller - ArtistController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArtistController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/artist.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                artist\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                deleteArtist\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                findOneByArtist\n                            \n                            \n                                homePage\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateArtistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiOperation({summary: 'Create a new artist'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateArtistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(artist: Artist)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete')@UseGuards(undefined)@ApiBearerAuth()@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove artist logged - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteArtist\n                        \n                    \n                \n            \n            \n                \ndeleteArtist(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:artistID')@UseGuards(undefined)@ApiBearerAuth()@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove a artist by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'List all artists - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:artistID')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Fetch a artist by Id - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByArtist\n                        \n                    \n                \n            \n            \n                \nfindOneByArtist(artistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:artistID/discography')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'View all songs by an artist - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        homePage\n                        \n                    \n                \n            \n            \n                \nhomePage(artist: Artist)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/home')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Fetch all data of the artist who is logged in - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(artist: Artist, dto: UpdateArtistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Edit artist logged - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateArtistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { LoggedArtist } from 'src/auth/logged-artist.decorator';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { User } from 'src/user/entities/user.entity';\nimport { ArtistService } from './artist.service';\nimport { CreateArtistDto } from './dto/create-artist.dto';\nimport { UpdateArtistDto } from './dto/update-artist.dto';\nimport { Artist } from './entities/artist.entity';\n\n@ApiTags('artist')\n@Controller('artist')\nexport class ArtistController {\n  constructor(private readonly artistService: ArtistService) {}\n\n  @Post('/create')\n  @ApiOperation({\n    summary: 'Create a new artist',\n  })\n  create(@Body() dto: CreateArtistDto) {\n    return this.artistService.create(dto);\n  }\n\n  @Get('/home')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Fetch all data of the artist who is logged in - (ONLY ARTIST)',\n  })\n  homePage(@LoggedArtist() artist: Artist) {\n    return this.artistService.homePage(artist.id);\n  }\n\n  @Get('/all')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'List all artists - (OPEN)',\n  })\n  findAll() {\n    return this.artistService.findAll();\n  }\n\n  @Get('/:artistID')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Fetch a artist by Id - (OPEN)',\n  })\n  findOne(@Param('artistID') id: string) {\n    return this.artistService.findOne(id);\n  }\n\n  @Get('/:artistID/discography')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'View all songs by an artist - (ONLY USER)',\n  })\n  findOneByArtist(@Param('artistID') artistId: string) {\n    return this.artistService.findOneByArtist(artistId);\n  }\n\n  @Patch('/update')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Edit artist logged - (ONLY ARTIST)',\n  })\n  update(@LoggedArtist() artist: Artist, @Body() dto: UpdateArtistDto) {\n    return this.artistService.update(artist.id, dto);\n  }\n\n  @Delete('/delete')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove artist logged - (ONLY ARTIST)',\n  })\n  delete(@LoggedArtist() artist: Artist) {\n    return this.artistService.delete(artist.id);\n  }\n\n  @Delete('/delete/:artistID')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove a artist by Id - (ONLY ADMIN)',\n  })\n  deleteArtist(@LoggedAdmin() admin: Admin, @Param('artistID') id: string) {\n    return this.artistService.deleteArtist(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArtistModule.html":{"url":"modules/ArtistModule.html","title":"module - ArtistModule","body":"\n                   \n\n\n\n\n    Modules\n    ArtistModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ArtistModule\n\n\n\ncluster_ArtistModule_imports\n\n\n\ncluster_ArtistModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nArtistModule\n\nArtistModule\n\nArtistModule -->\n\nPrismaModule->ArtistModule\n\n\n\n\n\nArtistService\n\nArtistService\n\nArtistModule -->\n\nArtistService->ArtistModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/artist/artist.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArtistService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArtistController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ArtistService } from './artist.service';\nimport { ArtistController } from './artist.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [ArtistController],\n  providers: [ArtistService]\n})\nexport class ArtistModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArtistService.html":{"url":"injectables/ArtistService.html","title":"injectable - ArtistService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArtistService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/artist.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                deleteArtist\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByArtist\n                            \n                            \n                                    Async\n                                homePage\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/artist/artist.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateArtistDto)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateArtistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArtist\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArtist(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:213\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByArtist\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByArtist(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        homePage\n                        \n                    \n                \n            \n            \n                \n                    \n                    homePage(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(artistId: string, dto: UpdateArtistDto)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateArtistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { verifyConfirmPassword } from 'src/utils/confirm-password.ultil';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateArtistDto } from './dto/create-artist.dto';\nimport { UpdateArtistDto } from './dto/update-artist.dto';\nimport { Artist } from './entities/artist.entity';\n\n@Injectable()\nexport class ArtistService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreateArtistDto) {\n    verifyConfirmPassword(dto.password, dto.confirmPassword);\n    delete dto.confirmPassword;\n    const data: Prisma.ArtistCreateInput = {\n      name: dto.name,\n      image: dto.image,\n      cpf: dto.cpf,\n      email: dto.email,\n      password: await bcrypt.hash(dto.password, 10),\n      about: dto.about,\n      userCategory: {\n        connect: {\n          name: 'artist',\n        },\n      },\n      countryRelacion: {\n        connect: {\n          id: dto.countryId,\n        },\n      },\n    };\n    return await this.prisma.artist\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          image: true,\n          email: true,\n          userCategory: {\n            select: {\n              name: true,\n            },\n          },\n          countryRelacion: {\n            select: {\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async homePage(artistId: string) {\n    const record = await this.prisma.artist\n      .findUnique({\n        where: { id: artistId },\n        select: {\n          songs: {\n            take: 5,\n            skip: 0,\n            select: {\n              id: true,\n              name: true,\n              songUrl: true,\n            },\n          },\n          albums: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if(record.songs.length === 0 && record.albums.length === 0) {\n      throw new NotFoundException('No song or album found')\n    }\n\n    return record;\n  }\n\n  async findAll() {\n    const artists = await this.prisma.artist\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n          image: true,\n        },\n      })\n      .catch(handleError);\n\n    if (artists.length === 0) {\n      throw new NotFoundException('No a artists found');\n    }\n    return artists;\n  }\n\n  async findOne(id: string) {\n    const record = await this.prisma.artist\n      .findUnique({\n        where: { id },\n        select: {\n          id: true,\n          name: true,\n          image: true,\n          countryRelacion: {\n            select: {\n              name: true,\n            },\n          },\n          songs: {\n            take: 5,\n            skip: 0,\n            select: {\n              id: true,\n              name: true,\n              songUrl: true,\n            },\n          },\n          albums: {\n            take: 4,\n            skip: 0,\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n          about: true,\n        },\n      })\n      .catch(handleError);\n\n    if (!record) {\n      throw new NotFoundException(`Record with Id '${id}' not found!`);\n    }\n\n    return record;\n  }\n\n  async findOneByArtist(artistId: string) {\n    const songs = await this.prisma.artist\n      .findMany({\n        where: { id: artistId },\n        select: {\n          id: true,\n          name: true,\n          albums: {\n            select: {\n              _count: true,\n              id: true,\n              name: true,\n              image: true,\n              year: true,\n              songs: {\n                select: {\n                  id: true,\n                  name: true,\n                  songUrl: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (songs.length === 0) {\n      throw new NotFoundException('No song found');\n    }\n\n    return songs;\n  }\n\n  async update(artistId: string, dto: UpdateArtistDto) {\n    if (dto.password) {\n      verifyConfirmPassword(dto.password, dto.confirmPassword);\n    }\n    delete dto.confirmPassword;\n\n    await this.prisma.artist.findUnique({ where: { id: artistId } });\n\n    const data: Partial = { ...dto };\n\n    if (data.password) {\n      data.password = await bcrypt.hash(data.password, 10);\n    }\n\n    return await this.prisma.artist\n      .update({\n        where: { id: artistId },\n        data,\n      })\n      .catch(handleError);\n  }\n\n  async delete(artistId: string) {\n    return await this.prisma.artist\n      .delete({ where: { id: artistId } })\n      .catch(handleError);\n  }\n\n  async deleteArtist(id: string) {\n    return await this.prisma.artist\n      .delete({ where: { id } })\n      .catch(handleError);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                Admin\n                            \n                            \n                                Artist\n                            \n                            \n                                LoginAdmin\n                            \n                            \n                                LoginArtist\n                            \n                            \n                                LoginProfile\n                            \n                            \n                                LoginUser\n                            \n                            \n                                User\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Admin\n                        \n                    \n                \n            \n            \n                \nAdmin(admin: Admin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/admin')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Return user authentication now - (FOR ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Admin\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Artist\n                        \n                    \n                \n            \n            \n                \nArtist(artist: Artist)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/artist')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Return user authentication now - (FOR ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Artist\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginAdmin\n                        \n                    \n                \n            \n            \n                \nLoginAdmin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in-admin')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Log in, receiving a validation token - (FOR ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginArtist\n                        \n                    \n                \n            \n            \n                \nLoginArtist(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in-artist')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Log in, receiving a validation token - (FOR ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginProfile\n                        \n                    \n                \n            \n            \n                \nLoginProfile(user: UserProfileId, loginProfileDto: LoginProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in-profile')@HttpCode(HttpStatus.OK)@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Log in, receiving a validation token - (FOR PROFILE)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    loginProfileDto\n                                    \n                                                LoginProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginUser\n                        \n                    \n                \n            \n            \n                \nLoginUser(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in-user')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Log in, receiving a validation token - (FOR USER)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n            \n                \nUser(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Return user authentication now - (FOR USER)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { Artist } from 'src/artist/entities/artist.entity';\nimport { User } from 'src/user/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { UserProfileId } from './dto/logged-profile-type';\nimport { LoginProfileDto } from './dto/login-profile.dto';\nimport { LoginUserResponseDto } from './dto/login-user-response.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { LoggedAdmin } from './logged-admin.decorator';\nimport { LoggedArtist } from './logged-artist.decorator';\nimport { LoggedUser } from './logged-user.decorator';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('/sign-in-user')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Log in, receiving a validation token - (FOR USER)',\n  })\n  LoginUser(@Body() loginDto: LoginDto): Promise {\n    return this.authService.LoginUser(loginDto);\n  }\n\n  @Post('/sign-in-profile')\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Log in, receiving a validation token - (FOR PROFILE)',\n  })\n  LoginProfile(\n    @LoggedUser() user: UserProfileId,\n    @Body() loginProfileDto: LoginProfileDto,\n  ) {\n    return this.authService.LoginProfile(user, loginProfileDto);\n  }\n\n  @Post('/sign-in-admin')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Log in, receiving a validation token - (FOR ADMIN)',\n  })\n  LoginAdmin(@Body() loginDto: LoginDto) {\n    return this.authService.LoginAdmin(loginDto);\n  }\n\n  @Post('/sign-in-artist')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Log in, receiving a validation token - (FOR ARTIST)',\n  })\n  LoginArtist(@Body() loginDto: LoginDto) {\n    return this.authService.LoginArtist(loginDto);\n  }\n\n  @Get('/user')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Return user authentication now - (FOR USER)',\n  })\n  User(@LoggedUser() user: User) {\n    return user;\n  }\n\n  @Get('/admin')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Return user authentication now - (FOR ADMIN)',\n  })\n  Admin(@LoggedAdmin() admin: Admin) {\n    return admin;\n  }\n\n  @Get('/artist')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Return user authentication now - (FOR ARTIST)',\n  })\n  Artist(@LoggedArtist() artist: Artist) {\n    return artist;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PrismaModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '24h' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                LoginAdmin\n                            \n                            \n                                    Async\n                                LoginArtist\n                            \n                            \n                                    Async\n                                LoginProfile\n                            \n                            \n                                    Async\n                                LoginUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LoginAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    LoginAdmin(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LoginArtist\n                        \n                    \n                \n            \n            \n                \n                    \n                    LoginArtist(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LoginProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    LoginProfile(user: UserProfileId, loginProfileDto: LoginProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    loginProfileDto\n                                    \n                                                LoginProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LoginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    LoginUser(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { User } from 'src/user/entities/user.entity';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { UserProfileId } from './dto/logged-profile-type';\nimport { LoginProfileDto } from './dto/login-profile.dto';\nimport { LoginUserResponseDto } from './dto/login-user-response.dto';\nimport { LoginDto } from './dto/login.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly jwt: JwtService,\n  ) {}\n\n  async LoginUser(loginDto: LoginDto): Promise {\n    const { email, password } = loginDto;\n\n    const user = await this.prisma.user\n      .findUnique({ where: { email } })\n      .catch(handleError);\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    const isHashValid = await bcrypt.compare(password, user.password);\n\n    if (!isHashValid) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    delete user.password;\n\n    return {\n      token: this.jwt.sign({ email }),\n      user,\n    };\n  }\n\n  async LoginProfile(user: UserProfileId, loginProfileDto: LoginProfileDto) {\n    const email = user.user.email;\n    const profileId = loginProfileDto.profileId;\n\n    const profile = await this.prisma.user\n      .findUnique({\n        where: { email },\n        select: {\n          profiles: {\n            where: {\n              id: loginProfileDto.profileId,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (profile.profiles.length === 0) {\n      throw new UnauthorizedException('Profile or User not found');\n    }\n\n    return {\n      token: this.jwt.sign({ email, profileId }),\n    };\n  }\n\n  async LoginAdmin(loginDto: LoginDto) {\n    const { email, password } = loginDto;\n\n    const admin = await this.prisma.admin\n      .findUnique({\n        where: { email },\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          password: true,\n          userCategory: {\n            select: {\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (!admin) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    const isHashValid = await bcrypt.compare(password, admin.password);\n\n    if (!isHashValid) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    delete admin.password;\n\n    return {\n      token: this.jwt.sign({ email }),\n      admin,\n    };\n  }\n\n  async LoginArtist(loginDto: LoginDto) {\n    const { email, password } = loginDto;\n\n    const artist = await this.prisma.artist\n      .findUnique({\n        where: { email },\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          password: true,\n          userCategory: {\n            select: {\n              name: true,\n            },\n          },\n          countryRelacion: {\n            select: {\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (!artist) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    const isHashValid = await bcrypt.compare(password, artist.password);\n\n    if (!isHashValid) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    delete artist.password;\n\n    return {\n      token: this.jwt.sign({ email }),\n      artist,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/entities/category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/category/entities/category.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/category/entities/category.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/category/entities/category.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/category/entities/category.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Category {\n  id?: string\n  name: string\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(admin: Admin, dto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-music-category')@ApiOperation({summary: 'Create a new Music Category - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(admin: Admin, categoryId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('remove-music-category/:categoryID')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Delete a Music Categorie by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('find-all-musics-categories')@ApiOperation({summary: 'List All Music Categories - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(categoryId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('find-one-music-category/:categoryID')@ApiOperation({summary: 'List a Music Categorie by Id - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(admin: Admin, categoryId: string, dto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('edit-music-category/:categoryID')@ApiOperation({summary: 'Edit a Music Categorie by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { User } from 'src/user/entities/user.entity';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@ApiTags('category')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('category')\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) {}\n\n  @Post('create-music-category')\n  @ApiOperation({\n    summary: 'Create a new Music Category - (ONLY ADMIN)',\n  })\n  create(@LoggedAdmin() admin: Admin, @Body() dto: CreateCategoryDto) {\n    return this.categoryService.create(dto);\n  }\n\n  @Get('find-all-musics-categories')\n  @ApiOperation({\n    summary: 'List All Music Categories - (OPEN)',\n  })\n  findAll() {\n    return this.categoryService.findAll();\n  }\n\n  @Get('find-one-music-category/:categoryID')\n  @ApiOperation({\n    summary: 'List a Music Categorie by Id - (ONLY USER)',\n  })\n  findOne(@Param('categoryID') categoryId: string) {\n    return this.categoryService.findOne(categoryId);\n  }\n\n  @Patch('edit-music-category/:categoryID')\n  @ApiOperation({\n    summary: 'Edit a Music Categorie by Id - (ONLY ADMIN)',\n  })\n  update(\n    @LoggedAdmin() admin: Admin,\n    @Param('categoryID') categoryId: string,\n    @Body() dto: UpdateCategoryDto,\n  ) {\n    return this.categoryService.update(categoryId, dto);\n  }\n\n  @Delete('remove-music-category/:categoryID')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Delete a Music Categorie by Id - (ONLY ADMIN)',\n  })\n  delete(@LoggedAdmin() admin: Admin, @Param('categoryID') categoryId: string) {\n    return this.categoryService.delete(categoryId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [CategoryController],\n  providers: [CategoryService]\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(categoryId: string, dto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Injectable()\nexport class CategoryService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreateCategoryDto) {\n    const data: Prisma.CategoryCreateInput = {\n      ...dto,\n    };\n\n    return await this.prisma.category\n      .create({\n        data,\n      })\n      .catch(handleError);\n  }\n\n  async findAll() {\n    const allCategories = await this.prisma.category\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n        },\n      })\n      .catch(handleError);\n\n    if (allCategories.length === 0) {\n      throw new NotFoundException('No Music Category found');\n    }\n\n    return allCategories;\n  }\n\n  async findById(categoryId: string) {\n    const record = await this.prisma.category\n      .findUnique({\n        where: { id: categoryId },\n        select: {\n          id: true,\n          name: true,\n        },\n      })\n      .catch(handleError);\n\n    if (!record) {\n      throw new NotFoundException(\n        `Music Category with ID '${categoryId}' not found`,\n      );\n    }\n\n    return record;\n  }\n\n  async findOne(categoryId: string) {\n    return await this.findById(categoryId).catch(handleError);\n  }\n\n  async update(categoryId: string, dto: UpdateCategoryDto) {\n    await this.findById(categoryId);\n\n    const data: Prisma.CategoryUpdateInput = {\n      ...dto,\n    };\n\n    return this.prisma.category.update({\n      where: { id: categoryId },\n      data,\n      select: {\n        id: true,\n        name: true,\n      },\n    });\n  }\n\n  async delete(categoryId: string) {\n    await this.findById(categoryId);\n\n    return await this.prisma.category\n      .delete({\n        where: { id: categoryId },\n      })\n      .catch(handleError);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Country.html":{"url":"classes/Country.html","title":"class - Country","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Country\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/country/entities/country,entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/country/entities/country,entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/country/entities/country,entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/country/entities/country,entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/country/entities/country,entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/country/entities/country,entity.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Country {\n  id?: string;\n  name: string;\n  code: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountryController.html":{"url":"controllers/CountryController.html","title":"controller - CountryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/country/country,controller.ts\n        \n\n            \n                Prefix\n            \n            \n                country\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(admin: Admin, dto: CreateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiOperation({summary: 'Create a new country - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/country/country,controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:countryID')@ApiOperation({summary: 'Delete a country by id - (ONLY ADMIN)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/country/country,controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(admin: Admin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find-all')@ApiOperation({summary: 'Search all countries - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/country/country,controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find-one/:countryID')@ApiOperation({summary: 'Search for a country by id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/country/country,controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(admin: Admin, id: string, dto: UpdateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update/:countryID')@ApiOperation({summary: 'Edit a country by id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/country/country,controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { CountryService } from './country.service';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\n\n@ApiTags('country')\n@Controller('country')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\nexport class CountryController {\n  constructor(private readonly countryService: CountryService) {}\n\n  @Post('/create')\n  @ApiOperation({\n    summary: 'Create a new country - (ONLY ADMIN)',\n  })\n  create(@LoggedAdmin() admin: Admin, @Body() dto: CreateCountryDto) {\n    return this.countryService.create(dto);\n  }\n\n  @Get('/find-all')\n  @ApiOperation({\n    summary: 'Search all countries - (ONLY ADMIN)',\n  })\n  findAll(@LoggedAdmin() admin: Admin) {\n    return this.countryService.findAll();\n  }\n\n  @Get('/find-one/:countryID')\n  @ApiOperation({\n    summary: 'Search for a country by id - (ONLY ADMIN)',\n  })\n  findOne(@LoggedAdmin() admin: Admin, @Param('countryID') id: string) {\n    return this.countryService.findOne(id);\n  }\n\n  @Patch('/update/:countryID')\n  @ApiOperation({\n    summary: 'Edit a country by id - (ONLY ADMIN)',\n  })\n  update(\n    @LoggedAdmin() admin: Admin,\n    @Param('countryID') id: string,\n    @Body() dto: UpdateCountryDto,\n  ) {\n    return this.countryService.update(id, dto);\n  }\n\n  @Delete('/delete/:countryID')\n  @ApiOperation({\n    summary: 'Delete a country by id - (ONLY ADMIN)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(@LoggedAdmin() admin: Admin, @Param('countryID') id: string) {\n    return this.countryService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountryModule.html":{"url":"modules/CountryModule.html","title":"module - CountryModule","body":"\n                   \n\n\n\n\n    Modules\n    CountryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CountryModule\n\n\n\ncluster_CountryModule_imports\n\n\n\ncluster_CountryModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCountryModule\n\nCountryModule\n\nCountryModule -->\n\nPrismaModule->CountryModule\n\n\n\n\n\nCountryService\n\nCountryService\n\nCountryModule -->\n\nCountryService->CountryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/country/country.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { CountryController } from './country,controller';\nimport { CountryService } from './country.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [CountryController],\n  providers: [CountryService],\n})\nexport class CountryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountryService.html":{"url":"injectables/CountryService.html","title":"injectable - CountryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/country/country.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/country/country.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateCountryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, dto: UpdateCountryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\nimport { Country } from './entities/country,entity';\n\n@Injectable()\nexport class CountryService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreateCountryDto) {\n    const data: Country = { ...dto };\n\n    return await this.prisma.country\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          code: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll() {\n    const allCountries = await this.prisma.country\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n        },\n      })\n      .catch(handleError);\n\n    if (allCountries.length === 0) {\n      throw new NotFoundException('No country found');\n    }\n\n    return allCountries;\n  }\n\n  async findOne(id: string) {\n    return this.findById(id);\n  }\n\n  async update(id: string, dto: UpdateCountryDto) {\n    await this.findById(id);\n    const data: Partial = { ...dto };\n\n    return this.prisma.country\n      .update({\n        where: { id },\n        data,\n        select: {\n          id: true,\n          name: true,\n          code: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async delete(id: string) {\n    await this.findById(id);\n    await this.prisma.country.delete({ where: { id } }).catch(handleError);\n  }\n\n  async findById(id: string) {\n    const country: Country = await this.prisma.country.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        name: true,\n        code: true,\n      },\n    });\n\n    if (!country) {\n      throw new NotFoundException(`Country with ID '${id}' not found`);\n    }\n\n    return country;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminDto.html":{"url":"classes/CreateAdminDto.html","title":"class - CreateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/create-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                cpf\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Confirmação da senha do Admin', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(13, 14)@ApiProperty({description: 'CPF do Admin', example: '123.123.123-12'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'The email of the user.', example: 'admin@admin.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(3, 50)@ApiProperty({description: 'Nome do Admin', example: 'Maria Silva'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Senha muito fraca'})@ApiProperty({description: 'Senha do Admin', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateAdminDto {\n  @IsString()\n  @Length(3, 50)\n  @ApiProperty({\n    description: 'Nome do Admin',\n    example: 'Maria Silva',\n  })\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(13, 14)\n  @ApiProperty({\n    description: 'CPF do Admin',\n    example: '123.123.123-12',\n  })\n  cpf: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The email of the user.',\n    example: 'admin@admin.com',\n  })\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Senha muito fraca',\n  })\n  @ApiProperty({\n    description: 'Senha do Admin',\n    example: 'User#5678@!',\n  })\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Confirmação da senha do Admin',\n    example: 'User#5678@!',\n  })\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAlbumDto.html":{"url":"classes/CreateAlbumDto.html","title":"class - CreateAlbumDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAlbumDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/dto/create-album.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUrl()@ApiProperty({description: 'Image Url of Album', example: 'https://image-album.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'Name of Album', example: 'Use Yoru Illusion I'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@ApiProperty({description: 'Album release year', example: 1991})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber, IsString, IsUrl } from 'class-validator';\n\nexport class CreateAlbumDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: 'Name of Album',\n    example: 'Use Yoru Illusion I',\n  })\n  name: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @ApiProperty({\n    description: 'Album release year',\n    example: 1991,\n  })\n  year: number;\n\n  @IsNotEmpty()\n  @IsUrl()\n  @ApiProperty({\n    description: 'Image Url of Album',\n    example: 'https://image-album.jpg',\n  })\n  image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArtistDto.html":{"url":"classes/CreateArtistDto.html","title":"class - CreateArtistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArtistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/dto/create-artist.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                about\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                countryId\n                            \n                            \n                                cpf\n                            \n                            \n                                email\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        about\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'The about of the artist.', example: 'Guns N' Roses is an American hard rock band formed in Los Angeles, California in 1985. The band has released six studio albums, three EPs and one live album to date. The band sold over 100 million copies worldwide, with around 43 million in the United States alone.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Artist password confirmation', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'The country of the artist.', example: 'ab065335-b6e9-495e-9eee-8becfdc625f2'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(11)@MaxLength(14)@ApiProperty({description: 'The cpf of the artist.', example: '321.654.987-01'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'The email of the artist.', example: 'artist@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@ApiProperty({description: 'The image of the artist.', example: 'https://i.scdn.co/image/ab6761610000e5eb50defaf9fc059a1efc541f4c'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'The name of the artist.', example: 'Guns N' Roses'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})@ApiProperty({description: 'The password of the artist.', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateArtistDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The name of the artist.',\n    example: \"Guns N' Roses\",\n  })\n  name: string;\n\n  @IsUrl()\n  @ApiProperty({\n    description: 'The image of the artist.',\n    example: 'https://i.scdn.co/image/ab6761610000e5eb50defaf9fc059a1efc541f4c',\n  })\n  image: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(11)\n  @MaxLength(14)\n  @ApiProperty({\n    description: 'The cpf of the artist.',\n    example: '321.654.987-01',\n  })\n  cpf: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The email of the artist.',\n    example: 'artist@gmail.com',\n  })\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password too weak',\n  })\n  @ApiProperty({\n    description: 'The password of the artist.',\n    example: 'User#5678@!',\n  })\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Artist password confirmation',\n    example: 'User#5678@!',\n  })\n  confirmPassword: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The about of the artist.',\n    example:\n      \"Guns N' Roses is an American hard rock band formed in Los Angeles, California in 1985. The band has released six studio albums, three EPs and one live album to date. The band sold over 100 million copies worldwide, with around 43 million in the United States alone.\",\n  })\n  about: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The country of the artist.',\n    example: 'ab065335-b6e9-495e-9eee-8becfdc625f2',\n  })\n  countryId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'Music category name', example: 'Rock'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/dto/create-category.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: 'Music category name',\n    example: 'Rock',\n  })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCountryDto.html":{"url":"classes/CreateCountryDto.html","title":"class - CreateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/country/dto/create-country.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(2, 2)@ApiProperty({description: 'Country Code', example: 'US'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/country/dto/create-country.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Country Name', example: 'United States'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/country/dto/create-country.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Length } from 'class-validator';\n\nexport class CreateCountryDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Country Name',\n    example: 'United States',\n  })\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(2, 2)\n  @ApiProperty({\n    description: 'Country Code',\n    example: 'US',\n  })\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePlaylistDto.html":{"url":"classes/CreatePlaylistDto.html","title":"class - CreatePlaylistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePlaylistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/dto/create-playlist.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                private\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUrl()@ApiProperty({description: 'Playlist picture URL', example: 'https://playlistimage.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/playlist/dto/create-playlist.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'Playlist Name', example: 'Party'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/playlist/dto/create-playlist.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({description: 'Set whether the playlist will be open to everyone or not', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/playlist/dto/create-playlist.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsString,\n  IsUrl,\n  IsUUID,\n} from 'class-validator';\n\nexport class CreatePlaylistDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: 'Playlist Name',\n    example: 'Party',\n  })\n  name: string;\n\n  @IsNotEmpty()\n  @IsUrl()\n  @ApiProperty({\n    description: 'Playlist picture URL',\n    example: 'https://playlistimage.jpg',\n  })\n  image: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    description: 'Set whether the playlist will be open to everyone or not',\n    example: false,\n  })\n  private: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProfileDto.html":{"url":"classes/CreateProfileDto.html","title":"class - CreateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/dto/create-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                image\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUrl()@ApiProperty({description: 'Profile picture URL', example: 'https://profileimage.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'Profile Name', example: 'Barack Obama'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, IsUrl } from 'class-validator';\n\nexport class CreateProfileDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: 'Profile Name',\n    example: 'Barack Obama',\n  })\n  name: string;\n\n  @IsNotEmpty()\n  @IsUrl()\n  @ApiProperty({\n    description: 'Profile picture URL',\n    example: 'https://profileimage.jpg',\n  })\n  image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProfileFavoriteSongDto.html":{"url":"classes/CreateProfileFavoriteSongDto.html","title":"class - CreateProfileFavoriteSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProfileFavoriteSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile-favorite-song/dto/create-profile-favorite-song.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                songID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        songID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'Id of the song to be favorited', example: '5ec96e39-7a1a-4202-b593-c6df1b67f0eb'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile-favorite-song/dto/create-profile-favorite-song.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID } from 'class-validator';\n\nexport class CreateProfileFavoriteSongDto {\n  @IsUUID()\n  @ApiProperty({\n    description: 'Id of the song to be favorited',\n    example: '5ec96e39-7a1a-4202-b593-c6df1b67f0eb',\n  })\n  songID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSongDto.html":{"url":"classes/CreateSongDto.html","title":"class - CreateSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/song/dto/create-song.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                albumId\n                            \n                            \n                                categoryId\n                            \n                            \n                                name\n                            \n                            \n                                songUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        albumId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'The album of the song.', example: '0eee08d7-8a4b-4751-bdfe-1f0bd61a6987'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/create-song.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID(undefined, {each: true})@ApiProperty({description: 'Category id to create the relationship with song', example: '[\"76b73966-928c-407e-8c35-ba327f4d200c\", \"0eee08d7-8a4b-4751-bdfe-1f0bd61a6987\"]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/create-song.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'The name of the song.', example: 'Right Next Door to Hell'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/create-song.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        songUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@ApiProperty({description: 'The url of the song.', example: 'https://youtu.be/Zqo7j2yFoFs'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/create-song.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsNotEmpty, IsString, IsUrl, IsUUID } from \"class-validator\"\n\nexport class CreateSongDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The name of the song.',\n    example: 'Right Next Door to Hell',\n  })\n  name: string\n\n  @IsUrl()\n  @ApiProperty({\n    description: 'The url of the song.',\n    example: 'https://youtu.be/Zqo7j2yFoFs',\n  })\n  songUrl: string\n\n  @IsUUID()\n  @ApiProperty({\n    description: 'The album of the song.',\n    example: '0eee08d7-8a4b-4751-bdfe-1f0bd61a6987',\n  })\n  albumId: string\n\n  @IsUUID(undefined, {each: true})\n  @ApiProperty({\n    description: 'Category id to create the relationship with song',\n    example: '[\"76b73966-928c-407e-8c35-ba327f4d200c\", \"0eee08d7-8a4b-4751-bdfe-1f0bd61a6987\"]',\n  })\n  categoryId: string[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                cpf\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                userPlanId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'User password confirmation', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(11)@MaxLength(14)@ApiProperty({description: 'The cpf of the user', example: '123.456.789-10'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'The email of the user.', example: 'user@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'The name of the user.', example: 'Gustavo Martins'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})@ApiProperty({description: 'The password of the user.', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userPlanId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'Id of any of the plans available on the platform', example: '5ec96e39-7a1a-4202-b593-c6df1b67f0eb'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:62\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  IsUUID,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The name of the user.',\n    example: 'Gustavo Martins',\n  })\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(11)\n  @MaxLength(14)\n  @ApiProperty({\n    description: 'The cpf of the user',\n    example: '123.456.789-10',\n  })\n  cpf: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The email of the user.',\n    example: 'user@gmail.com',\n  })\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password too weak',\n  })\n  @ApiProperty({\n    description: 'The password of the user.',\n    example: 'User#5678@!',\n  })\n  password: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'User password confirmation',\n    example: 'User#5678@!',\n  })\n  confirmPassword: string;\n\n  @IsUUID()\n  @ApiProperty({\n    description: 'Id of any of the plans available on the platform',\n    example: '5ec96e39-7a1a-4202-b593-c6df1b67f0eb',\n  })\n  userPlanId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserPlanDto.html":{"url":"classes/CreateUserPlanDto.html","title":"class - CreateUserPlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserPlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-plan/dto/create-user-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accounts\n                            \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()@ApiProperty({description: 'The number accounts of the User Plan.', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-plan/dto/create-user-plan.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'The description of the User Plan.', example: 'The free plan brings the entire catalog of songs and podcasts from the platform, but has some restrictions. The most notable is the presence of ads between tracks. In addition, it is not possible to download content for offline playback and, in the mobile version, there is only the possibility to choose the music played from selected playlists.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-plan/dto/create-user-plan.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'The name of the User Plan.', example: 'Free'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-plan/dto/create-user-plan.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()@ApiProperty({description: 'The price of the User Plan.', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-plan/dto/create-user-plan.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport class CreateUserPlanDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The name of the User Plan.',\n    example: 'Free',\n  })\n  name: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The price of the User Plan.',\n    example: 0.0,\n  })\n  price: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The number accounts of the User Plan.',\n    example: 1,\n  })\n  accounts: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The description of the User Plan.',\n    example:\n      'The free plan brings the entire catalog of songs and podcasts from the platform, but has some restrictions. The most notable is the presence of ads between tracks. In addition, it is not possible to download content for offline playback and, in the mobile version, there is only the possibility to choose the music played from selected playlists.',\n  })\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly prisma: PrismaService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: { email: string; profileId: string }) {\n    const profileId = payload.profileId;\n    const user = await this.prisma.user\n      .findUnique({\n        where: { email: payload.email },\n      })\n      .catch(handleError);\n\n    const admin = await this.prisma.admin\n      .findUnique({\n        where: { email: payload.email },\n      })\n      .catch(handleError);\n\n    const artist = await this.prisma.artist\n      .findUnique({\n        where: { email: payload.email },\n      })\n      .catch(handleError);\n\n    if (!user && !admin && !artist) {\n      throw new UnauthorizedException('User not found or not authorized!');\n    }\n\n    if (user) {\n      delete user.password;\n      return { user, profileId };\n    }\n\n    if (admin) {\n      delete admin.password;\n      return admin;\n    }\n\n    if (artist) {\n      delete artist.password;\n      return artist;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'The user email', example: 'user@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'User password to login', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The user email',\n    example: 'user@gmail.com',\n  })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'User password to login',\n    example: 'User#5678@!',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginProfileDto.html":{"url":"classes/LoginProfileDto.html","title":"class - LoginProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                profileId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        profileId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'User profile id', example: '0eee08d7-8a4b-4751-bdfe-1f0bd61a6987'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-profile.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID } from 'class-validator';\n\nexport class LoginProfileDto {\n  @IsUUID()\n  @ApiProperty({\n    description: 'User profile id',\n    example: '0eee08d7-8a4b-4751-bdfe-1f0bd61a6987',\n  })\n  profileId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserResponseDto.html":{"url":"classes/LoginUserResponseDto.html","title":"class - LoginUserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'JWT generated by login', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuaWNrbmFtZSI6Imd1dHMiLCJpYXQiOjE2NTQ4MjQwMDUsImV4cCI6MTY1NDkxMDQwNX0.d3wIQIyk5LqUMcyBYL-yunYNe7JyhMfKMyqP0joN00w'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user-response.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Authenticated user data'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from 'src/user/entities/user.entity';\n\nexport class LoginUserResponseDto {\n  @ApiProperty({\n    description: 'JWT generated by login',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuaWNrbmFtZSI6Imd1dHMiLCJpYXQiOjE2NTQ4MjQwMDUsImV4cCI6MTY1NDkxMDQwNX0.d3wIQIyk5LqUMcyBYL-yunYNe7JyhMfKMyqP0joN00w',\n  })\n  token: string;\n\n  @ApiProperty({\n    description: 'Authenticated user data',\n  })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Music.html":{"url":"classes/Music.html","title":"class - Music","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Music\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/song/entities/song.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                albumId\n                            \n                            \n                                artistId\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                musicUrl\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        albumId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        artistId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        musicUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Music {\n  id?: string\n  name: string\n  musicUrl: string\n  albumId: string\n  artistId: string\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Playlist.html":{"url":"classes/Playlist.html","title":"class - Playlist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Playlist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/entities/playlist.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                private\n                            \n                            \n                                profileId\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Playlist {\n  id?: string;\n  name: string;\n  image: string;\n  private: boolean;\n  profileId: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlaylistController.html":{"url":"controllers/PlaylistController.html","title":"controller - PlaylistController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlaylistController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/playlist.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                playlist\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addPlaylistFavorite\n                            \n                            \n                                addSongToPlaylist\n                            \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                deletePlaylistFavorite\n                            \n                            \n                                deleteSongToPlaylist\n                            \n                            \n                                findAllPlaylistProfile\n                            \n                            \n                                findOnePlaylist\n                            \n                            \n                                updatePlayList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addPlaylistFavorite\n                        \n                    \n                \n            \n            \n                \naddPlaylistFavorite(userProfileId: UserProfileId, playlistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('add-favorite/:playlistID')@ApiOperation({summary: 'Favorite a playlist by id in the logged in users profile - (ONLY USER)'})@HttpCode(HttpStatus.CREATED)\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addSongToPlaylist\n                        \n                    \n                \n            \n            \n                \naddSongToPlaylist(userProfileId: UserProfileId, playlistSong: AddSongPlaylistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('add-song')@ApiOperation({summary: 'Add a song to a playlist - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistSong\n                                    \n                                                AddSongPlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userProfileId: UserProfileId, dto: CreatePlaylistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiOperation({summary: 'Create new playlist in the logged in user profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(userProfileId: UserProfileId, playlistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:playlistID')@ApiOperation({summary: 'Delete a playlist by id in the logged in users profile - (ONLY USER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletePlaylistFavorite\n                        \n                    \n                \n            \n            \n                \ndeletePlaylistFavorite(userProfileId: UserProfileId, playlistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete-favorite/:playlistID')@ApiOperation({summary: 'Delete a favorite playlist from profile - (ONLY USER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteSongToPlaylist\n                        \n                    \n                \n            \n            \n                \ndeleteSongToPlaylist(userProfileId: UserProfileId, playlistSong: AddSongPlaylistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('delete-song')@ApiOperation({summary: 'Delete a song from a playlist - (ONLY USER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistSong\n                                    \n                                                AddSongPlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllPlaylistProfile\n                        \n                    \n                \n            \n            \n                \nfindAllPlaylistProfile(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')@ApiOperation({summary: 'Search all playlists in the logged-in user profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOnePlaylist\n                        \n                    \n                \n            \n            \n                \nfindOnePlaylist(userProfileId: UserProfileId, playlistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:playlistID')@ApiOperation({summary: 'Search for a playlist by id in the logged-in users profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatePlayList\n                        \n                    \n                \n            \n            \n                \nupdatePlayList(userProfileId: UserProfileId, playlistId: string, dto: UpdatePlaylistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update/:playlistID')@ApiOperation({summary: 'Edit a playlist by id in the logged in users profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdatePlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { UserProfileId } from 'src/auth/dto/logged-profile-type';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { AddSongPlaylistDto } from './dto/create-playlist-song.dto';\nimport { CreatePlaylistDto } from './dto/create-playlist.dto';\nimport { UpdatePlaylistDto } from './dto/update-playlist.dto';\nimport { PlaylistService } from './playlist.service';\n\n@ApiTags('playlist')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('playlist')\nexport class PlaylistController {\n  constructor(private readonly playlistService: PlaylistService) {}\n\n  @Post('/create')\n  @ApiOperation({\n    summary: 'Create new playlist in the logged in user profile - (ONLY USER)',\n  })\n  create(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() dto: CreatePlaylistDto,\n  ) {\n    return this.playlistService.create(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      dto,\n    );\n  }\n\n  @Get('/all')\n  @ApiOperation({\n    summary: 'Search all playlists in the logged-in user profile - (ONLY USER)',\n  })\n  findAllPlaylistProfile(@LoggedUser() userProfileId: UserProfileId) {\n    return this.playlistService.findAllPlaylistProfile(\n      userProfileId.user.id,\n      userProfileId.profileId,\n    );\n  }\n\n  @Get('/:playlistID')\n  @ApiOperation({\n    summary:\n      'Search for a playlist by id in the logged-in users profile - (ONLY USER)',\n  })\n  findOnePlaylist(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('playlistID') playlistId: string,\n  ) {\n    return this.playlistService.findOnePlaylist(\n      userProfileId.profileId,\n      playlistId,\n    );\n  }\n\n  @Patch('update/:playlistID')\n  @ApiOperation({\n    summary:\n      'Edit a playlist by id in the logged in users profile - (ONLY USER)',\n  })\n  updatePlayList(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('playlistID') playlistId: string,\n    @Body() dto: UpdatePlaylistDto,\n  ) {\n    return this.playlistService.updatePlayList(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistId,\n      dto,\n    );\n  }\n\n  @Delete('delete/:playlistID')\n  @ApiOperation({\n    summary:\n      'Delete a playlist by id in the logged in users profile - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('playlistID') playlistId: string,\n  ) {\n    return this.playlistService.delete(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistId,\n    );\n  }\n\n  @Post('add-song')\n  @ApiOperation({\n    summary: 'Add a song to a playlist - (ONLY USER)',\n  })\n  addSongToPlaylist(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() playlistSong: AddSongPlaylistDto,\n  ) {\n    return this.playlistService.addSongToPlaylist(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistSong,\n    );\n  }\n\n  @Patch('delete-song')\n  @ApiOperation({\n    summary: 'Delete a song from a playlist - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  deleteSongToPlaylist(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() playlistSong: AddSongPlaylistDto,\n  ) {\n    return this.playlistService.deleteSongToPlaylist(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistSong,\n    );\n  }\n\n  @Patch('add-favorite/:playlistID')\n  @ApiOperation({\n    summary:\n      'Favorite a playlist by id in the logged in users profile - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.CREATED)\n  addPlaylistFavorite(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('playlistID') playlistId: string,\n  ) {\n    return this.playlistService.addPlaylistFavorite(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistId,\n    );\n  }\n\n  @Delete('delete-favorite/:playlistID')\n  @ApiOperation({\n    summary: 'Delete a favorite playlist from profile - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  deletePlaylistFavorite(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('playlistID') playlistId: string,\n  ) {\n    return this.playlistService.deletePlaylistFavorite(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlaylistModule.html":{"url":"modules/PlaylistModule.html","title":"module - PlaylistModule","body":"\n                   \n\n\n\n\n    Modules\n    PlaylistModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PlaylistModule\n\n\n\ncluster_PlaylistModule_imports\n\n\n\ncluster_PlaylistModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPlaylistModule\n\nPlaylistModule\n\nPlaylistModule -->\n\nPrismaModule->PlaylistModule\n\n\n\n\n\nPlaylistService\n\nPlaylistService\n\nPlaylistModule -->\n\nPlaylistService->PlaylistModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/playlist/playlist.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PlaylistService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PlaylistController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PlaylistService } from './playlist.service';\nimport { PlaylistController } from './playlist.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [PlaylistController],\n  providers: [PlaylistService],\n})\nexport class PlaylistModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlaylistService.html":{"url":"injectables/PlaylistService.html","title":"injectable - PlaylistService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlaylistService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/playlist.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPlaylistFavorite\n                            \n                            \n                                    Async\n                                addSongToPlaylist\n                            \n                            \n                                    Async\n                                checkIfPlaylistIsPrivate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                deletePlaylistFavorite\n                            \n                            \n                                    Async\n                                deleteSongToPlaylist\n                            \n                            \n                                    Async\n                                findAllPlaylistProfile\n                            \n                            \n                                    Async\n                                findOnePlaylist\n                            \n                            \n                                    Async\n                                findOnePlayListInProfile\n                            \n                            \n                                    Async\n                                findOneProfileInUser\n                            \n                            \n                                    Async\n                                findOneSong\n                            \n                            \n                                    Async\n                                searchForFavoritePlaylistFromProfile\n                            \n                            \n                                    Async\n                                updatePlayList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/playlist/playlist.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPlaylistFavorite\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPlaylistFavorite(userId: string, profileId: string, playlistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:249\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addSongToPlaylist\n                        \n                    \n                \n            \n            \n                \n                    \n                    addSongToPlaylist(userId: string, profileId: string, playlistSong: AddSongPlaylistDto)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistSong\n                                    \n                                                AddSongPlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkIfPlaylistIsPrivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfPlaylistIsPrivate(playlistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:402\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, profileId: string, dto: CreatePlaylistDto)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userId: string, profileId: string, playlistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePlaylistFavorite\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePlaylistFavorite(userId: string, profileId: string, playlistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:311\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteSongToPlaylist\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSongToPlaylist(userId: string, profileId: string, playlistSong: AddSongPlaylistDto)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistSong\n                                    \n                                                AddSongPlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPlaylistProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPlaylistProfile(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOnePlaylist\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOnePlaylist(profileId: string, playlistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOnePlayListInProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOnePlayListInProfile(profileId: string, playlistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneProfileInUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneProfileInUser(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:344\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneSong\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneSong(songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:416\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchForFavoritePlaylistFromProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchForFavoritePlaylistFromProfile(profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:382\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePlayList\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePlayList(userId: string, profileId: string, playlistId: string, dto: UpdatePlaylistDto)\n                \n            \n\n\n            \n                \n                    Defined in src/playlist/playlist.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdatePlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { AddSongPlaylistDto } from './dto/create-playlist-song.dto';\nimport { CreatePlaylistDto } from './dto/create-playlist.dto';\nimport { UpdatePlaylistDto } from './dto/update-playlist.dto';\n\n@Injectable()\nexport class PlaylistService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(userId: string, profileId: string, dto: CreatePlaylistDto) {\n    await this.findOneProfileInUser(userId, profileId);\n    const data: Prisma.PlaylistCreateInput = {\n      name: dto.name,\n      image: dto.image,\n      private: dto.private,\n      profile: {\n        connect: {\n          id: profileId,\n        },\n      },\n    };\n\n    return await this.prisma.playlist\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          image: true,\n          profile: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAllPlaylistProfile(userId: string, profileId: string) {\n    await this.findOneProfileInUser(userId, profileId);\n    const profilePlaylists = await this.prisma.profile\n      .findUnique({\n        where: { id: profileId },\n        select: {\n          playlists: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    const favoritePlaylists = await this.searchForFavoritePlaylistFromProfile(\n      profileId,\n    );\n\n    return [{ profilePlaylists }, { favoritePlaylists }];\n  }\n\n  async findOnePlaylist(profileId: string, playlistId: string) {\n    const playlist = await this.prisma.playlist\n      .findUnique({\n        where: { id: playlistId },\n        select: {\n          id: true,\n          name: true,\n          image: true,\n          private: true,\n          songs: {\n            select: {\n              song: {\n                select: {\n                  id: true,\n                  name: true,\n                  songUrl: true,\n                },\n              },\n            },\n          },\n          profile: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (playlist.private && playlist.profile.id !== profileId) {\n      throw new NotFoundException('Playlist not found');\n    }\n\n    return playlist;\n  }\n\n  async updatePlayList(\n    userId: string,\n    profileId: string,\n    playlistId: string,\n    dto: UpdatePlaylistDto,\n  ) {\n    await this.findOneProfileInUser(userId, profileId);\n    await this.findOnePlayListInProfile(profileId, playlistId);\n\n    const data: Partial = { ...dto };\n\n    return await this.prisma.playlist\n      .update({\n        where: { id: playlistId },\n        data,\n        select: {\n          id: true,\n          name: true,\n          image: true,\n          private: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async delete(userId: string, profileId: string, playlistId: string) {\n    await this.findOneProfileInUser(userId, profileId);\n    await this.findOnePlayListInProfile(profileId, playlistId);\n\n    await this.prisma.playlist\n      .delete({ where: { id: playlistId } })\n      .catch(handleError);\n  }\n\n  async addSongToPlaylist(\n    userId: string,\n    profileId: string,\n    playlistSong: AddSongPlaylistDto,\n  ) {\n    await this.findOneProfileInUser(userId, profileId);\n    await this.findOnePlayListInProfile(profileId, playlistSong.playlistId);\n    await this.findOneSong(playlistSong.songId);\n\n    const songInPlaylist = await this.prisma.playlist\n      .findUnique({\n        where: {\n          id: playlistSong.playlistId,\n        },\n        select: {\n          songs: {\n            where: {\n              song: {\n                id: playlistSong.songId,\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (songInPlaylist.songs.length > 0) {\n      throw new NotFoundException('Song already added to playlist');\n    }\n\n    const data: Prisma.PlaylistSongCreateInput = {\n      playlist: {\n        connect: {\n          id: playlistSong.playlistId,\n        },\n      },\n      song: {\n        connect: {\n          id: playlistSong.songId,\n        },\n      },\n    };\n\n    return await this.prisma.playlistSong\n      .create({\n        data,\n        select: {\n          playlist: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n          song: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async deleteSongToPlaylist(\n    userId: string,\n    profileId: string,\n    playlistSong: AddSongPlaylistDto,\n  ) {\n    await this.findOneProfileInUser(userId, profileId);\n    await this.findOnePlayListInProfile(profileId, playlistSong.playlistId);\n    await this.findOneSong(playlistSong.songId);\n    const songInPlaylist = await this.prisma.playlist\n      .findUnique({\n        where: {\n          id: playlistSong.playlistId,\n        },\n        select: {\n          songs: {\n            where: {\n              song: {\n                id: playlistSong.songId,\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (songInPlaylist.songs.length === 0) {\n      throw new NotFoundException('Song not found in playlist');\n    }\n\n    return await this.prisma.playlistSong\n      .delete({\n        where: {\n          playlistId_songId: {\n            playlistId: playlistSong.playlistId,\n            songId: playlistSong.songId,\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async addPlaylistFavorite(\n    userId: string,\n    profileId: string,\n    playlistId: string,\n  ) {\n    await this.findOneProfileInUser(userId, profileId);\n\n    const playlist = await this.prisma.profile\n      .findUnique({\n        where: { id: profileId },\n        select: {\n          playlists: {\n            where: {\n              id: playlistId,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (playlist.playlists.length > 0) {\n      throw new UnauthorizedException(`Can't favorite your own playlist`);\n    }\n\n    await this.checkIfPlaylistIsPrivate(playlistId);\n\n    const data: Prisma.ProfileFavoritePlaylistCreateInput = {\n      profile: {\n        connect: {\n          id: profileId,\n        },\n      },\n      playlist: {\n        connect: {\n          id: playlistId,\n        },\n      },\n    };\n\n    return await this.prisma.profileFavoritePlaylist\n      .create({\n        data,\n        select: {\n          profile: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n          playlist: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async deletePlaylistFavorite(\n    userId: string,\n    profileId: string,\n    playlistId: string,\n  ) {\n    await this.findOneProfileInUser(userId, profileId);\n    const favoritePlaylist = await this.prisma.profileFavoritePlaylist\n      .findUnique({\n        where: {\n          profileId_playlistId: {\n            profileId: profileId,\n            playlistId: playlistId,\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (!favoritePlaylist) {\n      throw new NotFoundException(`This playlist hasn't been favorited yet`);\n    }\n\n    return await this.prisma.profileFavoritePlaylist\n      .delete({\n        where: {\n          profileId_playlistId: {\n            profileId: profileId,\n            playlistId: playlistId,\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findOneProfileInUser(userId: string, profileId: string) {\n    const record = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          profiles: {\n            where: {\n              id: profileId,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (record.profiles.length === 0) {\n      throw new NotFoundException(`Profile with ID '${profileId}' not found`);\n    }\n  }\n\n  async findOnePlayListInProfile(profileId: string, playlistId: string) {\n    const playlist = await this.prisma.profile\n      .findUnique({\n        where: { id: profileId },\n        select: {\n          playlists: {\n            where: {\n              id: playlistId,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (playlist.playlists.length === 0) {\n      throw new NotFoundException('No a playlist found');\n    }\n  }\n\n  async searchForFavoritePlaylistFromProfile(profileId: string) {\n    const favoritePlaylists =\n      await this.prisma.profileFavoritePlaylist.findMany({\n        where: {\n          profileId: profileId,\n        },\n        select: {\n          playlist: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      });\n\n    return favoritePlaylists;\n  }\n\n  async checkIfPlaylistIsPrivate(playlistId: string) {\n    const playlist = await this.prisma.playlist\n      .findUnique({\n        where: {\n          id: playlistId,\n        },\n      })\n      .catch(handleError);\n\n    if (playlist.private) {\n      throw new NotFoundException('No playlist found');\n    }\n  }\n\n  async findOneSong(songId: string) {\n    const song = await this.prisma.song\n      .findUnique({\n        where: {\n          id: songId,\n        },\n      })\n      .catch(handleError);\n\n    if (!song) {\n      throw new NotFoundException(`Song with id '${songId}' not found`);\n    }\n\n    return song;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Profile {\n  id?: string;\n  name: string;\n  image: string;\n  userId: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userProfileId: UserProfileId, dto: CreateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a new logged in user profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(userProfileId: UserProfileId, profileId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:profileID')@ApiOperation({summary: 'Delete a profile by id - (ONLY USER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')@ApiOperation({summary: 'Fetch all profiles of the logged in user - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(userProfileId: UserProfileId, profileId: string, dto: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update/:profileID')@ApiOperation({summary: 'Edit a profile by id - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { UserProfileId } from 'src/auth/dto/logged-profile-type';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { User } from 'src/user/entities/user.entity';\nimport { CreateProfileDto } from './dto/create-profile.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { ProfileService } from './profile.service';\n\n@ApiTags('profile')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('profile')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @Post('create')\n  @ApiOperation({\n    summary: 'Create a new logged in user profile - (ONLY USER)',\n  })\n  create(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() dto: CreateProfileDto,\n  ) {\n    return this.profileService.create(userProfileId.user.id, dto);\n  }\n\n  @Get('/all')\n  @ApiOperation({\n    summary: 'Fetch all profiles of the logged in user - (ONLY USER)',\n  })\n  findAll(@LoggedUser() userProfileId: UserProfileId) {\n    return this.profileService.findAll(userProfileId.user.id);\n  }\n\n  @Patch('update/:profileID')\n  @ApiOperation({\n    summary: 'Edit a profile by id - (ONLY USER)',\n  })\n  update(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('profileID') profileId: string,\n    @Body() dto: UpdateProfileDto,\n  ) {\n    return this.profileService.update(userProfileId.user.id, profileId, dto);\n  }\n\n  @Delete('delete/:profileID')\n  @ApiOperation({\n    summary: 'Delete a profile by id - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('profileID') profileId: string,\n  ) {\n    return this.profileService.delete(userProfileId.user.id, profileId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileFavoriteSong.html":{"url":"classes/ProfileFavoriteSong.html","title":"class - ProfileFavoriteSong","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileFavoriteSong\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile-favorite-song/entities/profile-favorite-song.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProfileFavoriteSong {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileFavoriteSongController.html":{"url":"controllers/ProfileFavoriteSongController.html","title":"controller - ProfileFavoriteSongController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileFavoriteSongController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile-favorite-song/profile-favorite-song.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tracks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userProfileId: UserProfileId, songIdD: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('add/:songID')@ApiOperation({summary: 'Add a song to a profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songIdD\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(userProfileId: UserProfileId, songIdDto: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:songID')@ApiOperation({summary: 'Remove a song to a profile - (ONLY USER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songIdDto\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')@ApiOperation({summary: 'Fetch all favorite songs from profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { UserProfileId } from 'src/auth/dto/logged-profile-type';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { ProfileFavoriteSongService } from './profile-favorite-song.service';\n\n@ApiTags('profile-favorite-song')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('tracks')\nexport class ProfileFavoriteSongController {\n  constructor(\n    private readonly favoriteSongService: ProfileFavoriteSongService,\n  ) {}\n\n  @Patch('add/:songID')\n  @ApiOperation({\n    summary: 'Add a song to a profile - (ONLY USER)',\n  })\n  create(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('songID') songIdD: string,\n  ) {\n    return this.favoriteSongService.create(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      songIdD,\n    );\n  }\n\n  @Get('all')\n  @ApiOperation({\n    summary: 'Fetch all favorite songs from profile - (ONLY USER)',\n  })\n  findAll(@LoggedUser() userProfileId: UserProfileId) {\n    return this.favoriteSongService.findAll(\n      userProfileId.user.id,\n      userProfileId.profileId,\n    );\n  }\n\n  @Delete('delete/:songID')\n  @ApiOperation({\n    summary: 'Remove a song to a profile - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('songID') songIdDto: string,\n  ) {\n    return this.favoriteSongService.delete(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      songIdDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileFavoriteSongModule.html":{"url":"modules/ProfileFavoriteSongModule.html","title":"module - ProfileFavoriteSongModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileFavoriteSongModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfileFavoriteSongModule\n\n\n\ncluster_ProfileFavoriteSongModule_imports\n\n\n\ncluster_ProfileFavoriteSongModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProfileFavoriteSongModule\n\nProfileFavoriteSongModule\n\nProfileFavoriteSongModule -->\n\nPrismaModule->ProfileFavoriteSongModule\n\n\n\n\n\nProfileFavoriteSongService\n\nProfileFavoriteSongService\n\nProfileFavoriteSongModule -->\n\nProfileFavoriteSongService->ProfileFavoriteSongModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/profile-favorite-song/profile-favorite-song.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileFavoriteSongService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileFavoriteSongController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileFavoriteSongService } from './profile-favorite-song.service';\nimport { ProfileFavoriteSongController } from './profile-favorite-song.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [ProfileFavoriteSongController],\n  providers: [ProfileFavoriteSongService],\n})\nexport class ProfileFavoriteSongModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileFavoriteSongService.html":{"url":"injectables/ProfileFavoriteSongService.html","title":"injectable - ProfileFavoriteSongService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileFavoriteSongService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile-favorite-song/profile-favorite-song.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByIdProfileUser\n                            \n                            \n                                    Async\n                                findByIdSongInProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/profile-favorite-song/profile-favorite-song.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, profileId: string, songIdD: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songIdD\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userId: string, profileId: string, songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIdProfileUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdProfileUser(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIdSongInProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdSongInProfile(profileId: string, songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\n\n@Injectable()\nexport class ProfileFavoriteSongService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(userId: string, profileId: string, songIdD: string) {\n    await this.findByIdProfileUser(userId, profileId);\n\n    const data: Prisma.ProfileFavoriteSongCreateInput = {\n      profile: {\n        connect: {\n          id: profileId,\n        },\n      },\n      song: {\n        connect: {\n          id: songIdD,\n        },\n      },\n    };\n\n    return await this.prisma.profileFavoriteSong\n      .create({\n        data,\n        select: {\n          profile: {\n            select: {\n              name: true,\n            },\n          },\n          song: {\n            select: {\n              id: true,\n              name: true,\n              songUrl: true,\n              artist: {\n                select: {\n                  id: true,\n                  name: true,\n                },\n              },\n              album: {\n                select: {\n                  id: true,\n                  name: true,\n                  image: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll(userId: string, profileId: string) {\n    await this.findByIdProfileUser(userId, profileId);\n\n    const allFavorites = await this.prisma.profile\n      .findUnique({\n        where: { id: profileId },\n        select: {\n          songs: {\n            select: {\n              song: {\n                select: {\n                  id: true,\n                  name: true,\n                  songUrl: true,\n                  artist: {\n                    select: {\n                      id: true,\n                      name: true,\n                    },\n                  },\n                  album: {\n                    select: {\n                      id: true,\n                      name: true,\n                      image: true,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (allFavorites.songs.length === 0) {\n      throw new NotFoundException('No favorite songs found in profile');\n    }\n\n    return allFavorites;\n  }\n\n  async delete(userId: string, profileId: string, songId: string) {\n    await this.findByIdProfileUser(userId, profileId);\n    await this.findByIdSongInProfile(profileId, songId);\n    return await this.prisma.profileFavoriteSong\n      .delete({\n        where: {\n          profileId_songId: {\n            profileId: profileId,\n            songId: songId,\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findByIdProfileUser(userId: string, profileId: string) {\n    const profileUser = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          name: true,\n          profiles: {\n            where: { id: profileId },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (profileUser.profiles.length === 0) {\n      throw new NotFoundException('Profile not found');\n    }\n\n    return profileUser;\n  }\n\n  async findByIdSongInProfile(profileId: string, songId: string) {\n    const songProfile = await this.prisma.profile\n      .findUnique({\n        where: { id: profileId },\n        select: {\n          songs: {\n            where: {\n              song: {\n                id: songId,\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (songProfile.songs.length === 0) {\n      throw new NotFoundException('No favorite songs found in the profile ');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_ProfileModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nPrismaModule->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { ProfileController } from './profile.controller';\nimport { ProfileService } from './profile.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [ProfileController],\n  providers: [ProfileService],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneProfileInUser\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/profile/profile.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, dto: CreateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneProfileInUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneProfileInUser(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, profileId: string, dto: UpdateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateProfileDto } from './dto/create-profile.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { Profile } from './entities/profile.entity';\n\n@Injectable()\nexport class ProfileService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(userId: string, dto: CreateProfileDto) {\n    const user = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          profiles: {\n            select: {\n              id: true,\n            },\n          },\n          userPlan: {\n            select: {\n              accounts: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (user.profiles.length >= user.userPlan.accounts) {\n      throw new UnauthorizedException(\n        'Profile limits reached for your account type',\n      );\n    }\n\n    const data: Prisma.ProfileCreateInput = {\n      ...dto,\n      user: {\n        connect: {\n          id: userId,\n        },\n      },\n    };\n\n    return this.prisma.profile\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          image: true,\n          user: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll(userId: string) {\n    const user = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          profiles: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (user.profiles.length === 0) {\n      throw new NotFoundException('No profile found');\n    }\n    return user;\n  }\n\n  async update(userId: string, profileId: string, dto: UpdateProfileDto) {\n    this.findOneProfileInUser(userId, profileId);\n\n    const data: Partial = { ...dto };\n\n    return await this.prisma.profile\n      .update({\n        where: { id: profileId },\n        data,\n        select: {\n          id: true,\n          name: true,\n          image: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async delete(userId: string, profileId: string) {\n    await this.findOneProfileInUser(userId, profileId);\n    await this.prisma.profile\n      .delete({ where: { id: profileId } })\n      .catch(handleError);\n  }\n\n  async findOneProfileInUser(userId: string, profileId: string) {\n    const userProfile = await this.prisma.user\n      .findUnique({\n        where: {\n          id: userId,\n        },\n        select: {\n          profiles: {\n            where: {\n              id: profileId,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (userProfile.profiles.length === 0) {\n      throw new NotFoundException('Profile not found');\n    }\n\n    return userProfile.profiles;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SongController.html":{"url":"controllers/SongController.html","title":"controller - SongController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SongController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/song/song.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                song\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(artist: Artist, dto: CreateSongDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiOperation({summary: 'Create an song and associate it with the artist who created it (artist) and album - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/song/song.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateSongDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(artist: Artist, songId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove a song by Id - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/song/song.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')@ApiOperation({summary: 'List all songs - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/song/song.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(user: User, songId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:songID')@ApiOperation({summary: 'View a song by Id - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/song/song.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(artist: Artist, songId: string, dto: UpdateSongDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update-artist/:id')@ApiOperation({summary: 'Edit an song of the artist who is logged in - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/song/song.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateSongDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { SongService } from './song.service';\nimport { CreateSongDto } from './dto/create-song.dto';\nimport { UpdateSongDto } from './dto/update-song.dto';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { LoggedArtist } from 'src/auth/logged-artist.decorator';\nimport { Artist } from 'src/artist/entities/artist.entity';\nimport { AuthGuard } from '@nestjs/passport';\nimport { User } from 'src/user/entities/user.entity';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\n\n@ApiTags('song')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('song')\nexport class SongController {\n  constructor(private readonly songService: SongService) {}\n\n  @Post('/create')\n  @ApiOperation({\n    summary:\n      'Create an song and associate it with the artist who created it (artist) and album - (ONLY ARTIST)',\n  })\n  create(@LoggedArtist() artist: Artist, @Body() dto: CreateSongDto) {\n    return this.songService.create(artist.id, dto);\n  }\n\n  @Get('/all')\n  @ApiOperation({\n    summary: 'List all songs - (ONLY USER)',\n  })\n  findAll(@LoggedUser() user: User) {\n    return this.songService.findAll();\n  }\n\n  @Get('/:songID')\n  @ApiOperation({\n    summary: 'View a song by Id - (ONLY USER)',\n  })\n  findOne(@LoggedUser() user: User, @Param('id') songId: string) {\n    return this.songService.findOne(songId);\n  }\n\n  @Patch('/update-artist/:id')\n  @ApiOperation({\n    summary: 'Edit an song of the artist who is logged in - (ONLY ARTIST)',\n  })\n  update(\n    @LoggedArtist() artist: Artist,\n    @Param('id') songId: string,\n    @Body() dto: UpdateSongDto,\n  ) {\n    return this.songService.update(artist.id, songId, dto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove a song by Id - (ONLY ARTIST)',\n  })\n  delete(@LoggedArtist() artist: Artist, @Param('id') songId: string) {\n    return this.songService.delete(artist.id, songId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SongModule.html":{"url":"modules/SongModule.html","title":"module - SongModule","body":"\n                   \n\n\n\n\n    Modules\n    SongModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SongModule\n\n\n\ncluster_SongModule_providers\n\n\n\ncluster_SongModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nSongModule\n\nSongModule\n\nSongModule -->\n\nPrismaModule->SongModule\n\n\n\n\n\nSongService\n\nSongService\n\nSongModule -->\n\nSongService->SongModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/song/song.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SongService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SongController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { SongController } from './song.controller';\nimport { SongService } from './song.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [SongController],\n  providers: [SongService],\n})\nexport class SongModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SongService.html":{"url":"injectables/SongService.html","title":"injectable - SongService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SongService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/song/song.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByArtsit\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/song/song.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(artistId: string, dto: CreateSongDto)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateSongDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(artistId: string, songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(artistId: string, songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByArtsit\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByArtsit(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(artistdId: string, songId: string, dto: UpdateSongDto)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:184\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistdId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateSongDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateSongDto } from './dto/create-song.dto';\nimport { UpdateSongDto } from './dto/update-song.dto';\n\n@Injectable()\nexport class SongService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(artistId: string, dto: CreateSongDto) {\n    const data: Prisma.SongCreateInput = {\n      name: dto.name,\n      songUrl: dto.songUrl,\n      album: {\n        connect: {\n          id: dto.albumId,\n        },\n      },\n      artist: {\n        connect: {\n          id: artistId,\n        },\n      },\n      CategorySongs: {\n        createMany: {\n          data: dto.categoryId.map((categoryId) => ({\n            categoryId: categoryId,\n          })),\n        },\n      },\n    };\n\n    return this.prisma.song\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          songUrl: true,\n          album: {\n            select: {\n              name: true,\n              image: true,\n            },\n          },\n          artist: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n          CategorySongs: {\n            select: {\n              category: {\n                select: {\n                  id: true,\n                  name: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll() {\n    const songs = await this.prisma.song\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n          songUrl: true,\n          artist: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (songs.length === 0) {\n      throw new NotFoundException('No song found');\n    }\n\n    return songs;\n  }\n\n  async findById(artistId: string, songId: string) {\n    const record = await this.prisma.artist\n      .findUnique({\n        where: { id: artistId },\n        select: {\n          songs: {\n            where: {\n              id: songId,\n            },\n            select: {\n              id: true,\n              name: true,\n              songUrl: true,\n              album: {\n                select: {\n                  name: true,\n                  image: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (record.songs.length === 0) {\n      throw new NotFoundException(`Song with ID '${songId}' not found`);\n    }\n\n    return record;\n  }\n\n  async findOne(songId: string) {\n    return await this.prisma.song\n      .findUnique({\n        where: { id: songId },\n        select: {\n          id: true,\n          name: true,\n          songUrl: true,\n          artist: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n          album: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n          CategorySongs: {\n            select: {\n              category: {\n                select: {\n                  name: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findOneByArtsit(artistId: string) {\n    const songs = await this.prisma.artist\n      .findMany({\n        where: { id: artistId },\n        select: {\n          songs: {\n            select: {\n              id: true,\n              name: true,\n              songUrl: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (songs.length === 0) {\n      throw new NotFoundException('No song found');\n    }\n\n    return songs;\n  }\n\n  async update(artistdId: string, songId: string, dto: UpdateSongDto) {\n    await this.findById(artistdId, songId);\n    return await this.prisma.song\n      .update({\n        where: { id: songId },\n        data: { ...dto },\n        select: {\n          id: true,\n          name: true,\n          songUrl: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async delete(artistId: string, songId: string) {\n    await this.findById(artistId, songId);\n    return await this.prisma.song\n      .delete({ where: { id: songId } })\n      .catch(handleError);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAdminDto.html":{"url":"classes/UpdateAdminDto.html","title":"class - UpdateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/update-managerAdmin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                confirmPassword\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()@ApiProperty({description: 'Confirmação da senha do Admin', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/update-managerAdmin.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail()@IsNotEmpty()@ApiProperty({description: 'The email of the user.', example: 'admin@admin.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/update-managerAdmin.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@Length(3, 50)@ApiProperty({description: 'Nome do Admin', example: 'Maria Silva'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/update-managerAdmin.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MinLength(8)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Senha muito fraca'})@ApiProperty({description: 'Senha do Admin', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/update-managerAdmin.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class UpdateAdminDto {\n  @IsOptional()\n  @IsString()\n  @Length(3, 50)\n  @ApiProperty({\n    description: 'Nome do Admin',\n    example: 'Maria Silva',\n  })\n  name?: string;\n\n  @IsOptional()\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The email of the user.',\n    example: 'admin@admin.com',\n  })\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  @MinLength(8)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Senha muito fraca',\n  })\n  @ApiProperty({\n    description: 'Senha do Admin',\n    example: 'User#5678@!',\n  })\n  password?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Confirmação da senha do Admin',\n    example: 'User#5678@!',\n  })\n  confirmPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAlbumDto.html":{"url":"classes/UpdateAlbumDto.html","title":"class - UpdateAlbumDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAlbumDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/dto/update-album.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateAlbumDto } from './create-album.dto';\n\nexport class UpdateAlbumDto extends PartialType(CreateAlbumDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateArtistDto.html":{"url":"classes/UpdateArtistDto.html","title":"class - UpdateArtistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateArtistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/dto/update-artist.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateArtistDto } from './create-artist.dto';\n\nexport class UpdateArtistDto extends PartialType(CreateArtistDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCountryDto.html":{"url":"classes/UpdateCountryDto.html","title":"class - UpdateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/country/dto/update-country.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCountryDto } from './create-country.dto';\n\nexport class UpdateCountryDto extends PartialType(CreateCountryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlaylistDto.html":{"url":"classes/UpdatePlaylistDto.html","title":"class - UpdatePlaylistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlaylistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/dto/update-playlist.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePlaylistDto } from './create-playlist.dto';\n\nexport class UpdatePlaylistDto extends PartialType(CreatePlaylistDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/dto/update-profile.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProfileDto } from './create-profile.dto';\n\nexport class UpdateProfileDto extends PartialType(CreateProfileDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSongDto.html":{"url":"classes/UpdateSongDto.html","title":"class - UpdateSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/song/dto/update-song.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateSongDto } from './create-song.dto';\n\nexport class UpdateSongDto extends PartialType(CreateSongDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPlanDto.html":{"url":"classes/UpdateUserPlanDto.html","title":"class - UpdateUserPlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-plan/dto/update-user-plan.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserPlanDto } from './create-user-plan.dto';\n\nexport class UpdateUserPlanDto extends PartialType(CreateUserPlanDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                    Optional\n                                userPlanId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userPlanId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class User {\n  id?: string\n  name: string\n  cpf: string\n  email: string\n  password: string\n  userPlanId?: string\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                deleteMyAccount\n                            \n                            \n                                deleteUser\n                            \n                            \n                                findAll\n                            \n                            \n                                findMyAccount\n                            \n                            \n                                findOneUser\n                            \n                            \n                                updateMyAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a new user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteMyAccount\n                        \n                    \n                \n            \n            \n                \ndeleteMyAccount(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete-my-account')@UseGuards(undefined)@ApiBearerAuth()@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove user logged - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteUser\n                        \n                    \n                \n            \n            \n                \ndeleteUser(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:id')@UseGuards(undefined)@ApiBearerAuth()@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove a user by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(admin: Admin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'List all users - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findMyAccount\n                        \n                    \n                \n            \n            \n                \nfindMyAccount(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/my-account')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'View logged user account - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneUser\n                        \n                    \n                \n            \n            \n                \nfindOneUser(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search/:id')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'View a user by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMyAccount\n                        \n                    \n                \n            \n            \n                \nupdateMyAccount(userProfileId: UserProfileId, dto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-my-account')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Edit user logged - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { UserProfileId } from 'src/auth/dto/logged-profile-type';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { UserService } from './user.service';\n\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('create')\n  @ApiOperation({\n    summary: 'Create a new user',\n  })\n  create(@Body() dto: CreateUserDto) {\n    return this.userService.create(dto);\n  }\n\n  @Get('all')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'List all users - (ONLY ADMIN)',\n  })\n  findAll(@LoggedAdmin() admin: Admin) {\n    return this.userService.findAll();\n  }\n\n  @Get('/my-account')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'View logged user account - (ONLY USER)',\n  })\n  findMyAccount(@LoggedUser() userProfileId: UserProfileId) {\n    return this.userService.findMyAccount(userProfileId.user.id);\n  }\n\n  @Get('/search/:id')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'View a user by Id - (ONLY ADMIN)',\n  })\n  findOneUser(@LoggedAdmin() admin: Admin, @Param('id') id: string) {\n    return this.userService.findOneUser(id);\n  }\n\n  @Patch('update-my-account')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Edit user logged - (ONLY USER)',\n  })\n  updateMyAccount(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() dto: UpdateUserDto,\n  ) {\n    return this.userService.updateMyAccount(userProfileId.user.id, dto);\n  }\n\n  @Delete('/delete-my-account')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove user logged - (ONLY USER)',\n  })\n  deleteMyAccount(@LoggedUser() userProfileId: UserProfileId) {\n    return this.userService.deleteMyAccount(userProfileId.user.id);\n  }\n\n  @Delete('delete/:id')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove a user by Id - (ONLY ADMIN)',\n  })\n  deleteUser(@LoggedAdmin() admin: Admin, @Param('id') id: string) {\n    return this.userService.deleteUser(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPlan.html":{"url":"classes/UserPlan.html","title":"class - UserPlan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPlan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-plan/entities/user-plan.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accounts\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                price\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserPlan {\n  id?: string\n  name: string\n  price: number\n  accounts: number\n  description: string\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserPlanController.html":{"url":"controllers/UserPlanController.html","title":"controller - UserPlanController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserPlanController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-plan/user-plan.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user-plan\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(admin: Admin, dto: CreateUserPlanDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new User Plan'})\n                \n            \n\n            \n                \n                    Defined in src/user-plan/user-plan.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateUserPlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove a User Plan by Id'})\n                \n            \n\n            \n                \n                    Defined in src/user-plan/user-plan.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(admin: Admin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'List all Users Plans'})\n                \n            \n\n            \n                \n                    Defined in src/user-plan/user-plan.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'View User Plan by Id'})\n                \n            \n\n            \n                \n                    Defined in src/user-plan/user-plan.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(admin: Admin, id: string, dto: UpdateUserPlanDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Edit a User Plan by Id'})\n                \n            \n\n            \n                \n                    Defined in src/user-plan/user-plan.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserPlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { UserPlanService } from './user-plan.service';\nimport { CreateUserPlanDto } from './dto/create-user-plan.dto';\nimport { UpdateUserPlanDto } from './dto/update-user-plan.dto';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { Admin } from 'src/admin/entities/admin.entity';\n\n@ApiTags('user-plan')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('user-plan')\nexport class UserPlanController {\n  constructor(private readonly userPlanService: UserPlanService) {}\n\n  @Post()\n  @ApiOperation({\n    summary: 'Create a new User Plan',\n  })\n  create(@LoggedAdmin() admin: Admin, @Body() dto: CreateUserPlanDto) {\n    return this.userPlanService.create(dto);\n  }\n\n  @Get()\n  @ApiOperation({\n    summary: 'List all Users Plans',\n  })\n  findAll(@LoggedAdmin() admin: Admin) {\n    return this.userPlanService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({\n    summary: 'View User Plan by Id',\n  })\n  findOne(@LoggedAdmin() admin: Admin, @Param('id') id: string) {\n    return this.userPlanService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({\n    summary: 'Edit a User Plan by Id',\n  })\n  update(@LoggedAdmin() admin: Admin, @Param('id') id: string, @Body() dto: UpdateUserPlanDto) {\n    return this.userPlanService.update(id, dto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove a User Plan by Id',\n  })\n  delete(@LoggedAdmin() admin: Admin, @Param('id') id: string) {\n    return this.userPlanService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserPlanModule.html":{"url":"modules/UserPlanModule.html","title":"module - UserPlanModule","body":"\n                   \n\n\n\n\n    Modules\n    UserPlanModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserPlanModule\n\n\n\ncluster_UserPlanModule_imports\n\n\n\ncluster_UserPlanModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserPlanModule\n\nUserPlanModule\n\nUserPlanModule -->\n\nPrismaModule->UserPlanModule\n\n\n\n\n\nUserPlanService\n\nUserPlanService\n\nUserPlanModule -->\n\nUserPlanService->UserPlanModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-plan/user-plan.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserPlanService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserPlanController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserPlanController } from './user-plan.controller';\nimport { UserPlanService } from './user-plan.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [UserPlanController],\n  providers: [UserPlanService],\n})\nexport class UserPlanModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserPlanService.html":{"url":"injectables/UserPlanService.html","title":"injectable - UserPlanService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserPlanService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-plan/user-plan.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user-plan/user-plan.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateUserPlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserPlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, dto: UpdateUserPlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserPlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateUserPlanDto } from './dto/create-user-plan.dto';\nimport { UpdateUserPlanDto } from './dto/update-user-plan.dto';\nimport { UserPlan } from './entities/user-plan.entity';\n\n@Injectable()\nexport class UserPlanService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreateUserPlanDto) {\n    const data: CreateUserPlanDto = {\n      ...dto,\n    };\n\n    return await this.prisma.userPlan.create({ data }).catch(handleError);\n  }\n\n  async findAll() {\n    return await this.prisma.userPlan\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n          price: true,\n          accounts: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findOne(id: string) {\n    return await this.prisma.userPlan\n      .findUnique({\n        where: { id },\n      })\n      .catch(handleError);\n  }\n\n  async update(id: string, dto: UpdateUserPlanDto) {\n    const data: Partial = { ...dto };\n\n    return await this.prisma.userPlan\n      .update({\n        where: { id },\n        data,\n      })\n      .catch(handleError);\n  }\n\n  async delete(id: string) {\n    await this.prisma.userPlan.delete({ where: { id } }).catch(handleError);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileId.html":{"url":"classes/UserProfileId.html","title":"class - UserProfileId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/logged-profile-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                profileId\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        profileId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/logged-profile-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/logged-profile-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsUUID } from 'class-validator';\nimport { User } from 'src/user/entities/user.entity';\n\nexport class UserProfileId {\n  user: User;\n\n  @IsUUID()\n  profileId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteMyAccount\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findMyAccount\n                            \n                            \n                                    Async\n                                findOneUser\n                            \n                            \n                                    Async\n                                updateMyAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMyAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMyAccount(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findMyAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    findMyAccount(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUser(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMyAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMyAccount(userId: string, dto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { verifyConfirmPassword } from 'src/utils/confirm-password.ultil';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreateUserDto) {\n    verifyConfirmPassword(dto.password, dto.confirmPassword);\n    delete dto.confirmPassword;\n    const data: Prisma.UserCreateInput = {\n      name: dto.name,\n      cpf: dto.cpf,\n      email: dto.email,\n      password: await bcrypt.hash(dto.password, 10),\n      userPlan: {\n        connect: {\n          id: dto.userPlanId,\n        },\n      },\n      userCategory: {\n        connect: {\n          name: 'user',\n        },\n      },\n    };\n\n    return await this.prisma.user\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          userPlan: {\n            select: {\n              name: true,\n              accounts: true,\n            },\n          },\n          createdAt: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll() {\n    const allUsers = await this.prisma.user\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n          email: true,\n        },\n      })\n      .catch(handleError);\n\n    if (allUsers.length === 0) {\n      throw new NotFoundException('No a users found');\n    }\n\n    return allUsers;\n  }\n\n  async findById(userId: string) {\n    const record = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          userPlan: {\n            select: {\n              name: true,\n              accounts: true,\n            },\n          },\n          profiles: {\n            select: {\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (!record) {\n      throw new NotFoundException(`Record with Id '${userId}' not found!`);\n    }\n\n    return record;\n  }\n\n  async findMyAccount(userId: string) {\n    return await this.findById(userId);\n  }\n\n  async findOneUser(id: string) {\n    return await this.findById(id);\n  }\n\n  async updateMyAccount(userId: string, dto: UpdateUserDto) {\n    if (dto.password) {\n      verifyConfirmPassword(dto.password, dto.confirmPassword);\n    }\n    delete dto.confirmPassword;\n\n    await this.findById(userId);\n\n    const data: Partial = { ...dto };\n\n    if (data.password) {\n      data.password = await bcrypt.hash(data.password, 10);\n    }\n\n    return await this.prisma.user\n      .update({\n        where: { id: userId },\n        data,\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          cpf: true,\n          updatedAt: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async deleteMyAccount(userId: string) {\n    await this.findById(userId);\n    await this.prisma.user.delete({ where: { id: userId } }).catch(handleError);\n  }\n\n  async deleteUser(id: string) {\n    await this.findById(id);\n    await this.prisma.user.delete({ where: { id } }).catch(handleError);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/admin/dto/create-admin.dto.ts\n            \n            class\n            CreateAdminDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/admin/dto/update-managerAdmin.dto.ts\n            \n            class\n            UpdateAdminDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/album/album.controller.ts\n            \n            controller\n            AlbumController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/album/album.service.ts\n            \n            injectable\n            AlbumService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/album/dto/create-album.dto.ts\n            \n            class\n            CreateAlbumDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/album/dto/update-album.dto.ts\n            \n            class\n            UpdateAlbumDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/album/entities/album.entity.ts\n            \n            class\n            Album\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/artist/artist.controller.ts\n            \n            controller\n            ArtistController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/artist/artist.service.ts\n            \n            injectable\n            ArtistService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/artist/dto/create-artist.dto.ts\n            \n            class\n            CreateArtistDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/artist/dto/update-artist.dto.ts\n            \n            class\n            UpdateArtistDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/artist/entities/artist.entity.ts\n            \n            class\n            Artist\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/logged-profile-type.ts\n            \n            class\n            UserProfileId\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-profile.dto.ts\n            \n            class\n            LoginProfileDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user-response.dto.ts\n            \n            class\n            LoginUserResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/logged-admin.decorator.ts\n            \n            variable\n            LoggedAdmin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/logged-artist.decorator.ts\n            \n            variable\n            LoggedArtist\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/logged-manager.decorator.ts\n            \n            variable\n            LoggedManager\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/logged-user.decorator.ts\n            \n            variable\n            LoggedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/entities/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/country/country,controller.ts\n            \n            controller\n            CountryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/country/country.service.ts\n            \n            injectable\n            CountryService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/country/dto/create-country.dto.ts\n            \n            class\n            CreateCountryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/country/dto/update-country.dto.ts\n            \n            class\n            UpdateCountryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/country/entities/country,entity.ts\n            \n            class\n            Country\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/playlist/dto/create-playlist-song.dto.ts\n            \n            class\n            AddSongPlaylistDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/playlist/dto/create-playlist.dto.ts\n            \n            class\n            CreatePlaylistDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/playlist/dto/update-playlist.dto.ts\n            \n            class\n            UpdatePlaylistDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/playlist/entities/playlist.entity.ts\n            \n            class\n            Playlist\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/playlist/playlist.controller.ts\n            \n            controller\n            PlaylistController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/playlist/playlist.service.ts\n            \n            injectable\n            PlaylistService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/profile-favorite-song/dto/create-profile-favorite-song.dto.ts\n            \n            class\n            CreateProfileFavoriteSongDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/profile-favorite-song/entities/profile-favorite-song.entity.ts\n            \n            class\n            ProfileFavoriteSong\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profile-favorite-song/profile-favorite-song.controller.ts\n            \n            controller\n            ProfileFavoriteSongController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/profile-favorite-song/profile-favorite-song.service.ts\n            \n            injectable\n            ProfileFavoriteSongService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/profile/dto/create-profile.dto.ts\n            \n            class\n            CreateProfileDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/profile/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profile/entities/profile.entity.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/song/dto/create-song.dto.ts\n            \n            class\n            CreateSongDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/song/dto/update-song.dto.ts\n            \n            class\n            UpdateSongDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/song/entities/song.entity.ts\n            \n            class\n            Music\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/song/song.controller.ts\n            \n            controller\n            SongController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/song/song.service.ts\n            \n            injectable\n            SongService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user-plan/dto/create-user-plan.dto.ts\n            \n            class\n            CreateUserPlanDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user-plan/dto/update-user-plan.dto.ts\n            \n            class\n            UpdateUserPlanDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-plan/entities/user-plan.entity.ts\n            \n            class\n            UserPlan\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user-plan/user-plan.controller.ts\n            \n            controller\n            UserPlanController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user-plan/user-plan.service.ts\n            \n            injectable\n            UserPlanService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/utils/confirm-password.ultil.ts\n            \n            variable\n            verifyConfirmPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/handle-error.util.ts\n            \n            variable\n            handleError\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : ^3.15.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nspotify-server\nProjeto desenvolvido no módulo cinco do curso de back-end da Blue EdTech, onde o propósito é desenvolver algumas funcionalidades do Spotify.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n                        Preamble  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nUse with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n  Copyright (C)   \nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.The hypothetical commands show w' and show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\nhttps://www.gnu.org/licenses/.\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\nhttps://www.gnu.org/licenses/why-not-lgpl.html.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AlbumModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArtistModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlaylistModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileFavoriteSongModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SongModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserPlanModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AlbumModule\n\n\n\ncluster_AlbumModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArtistModule\n\n\n\ncluster_ArtistModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CountryModule\n\n\n\ncluster_CountryModule_providers\n\n\n\ncluster_PlaylistModule\n\n\n\ncluster_PlaylistModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProfileFavoriteSongModule\n\n\n\ncluster_ProfileFavoriteSongModule_providers\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_SongModule\n\n\n\ncluster_SongModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserPlanModule\n\n\n\ncluster_UserPlanModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nPrismaModule->AdminModule\n\n\n\n\n\nAlbumModule\n\nAlbumModule\n\nAlbumModule -->\n\nPrismaModule->AlbumModule\n\n\n\n\n\nArtistModule\n\nArtistModule\n\nArtistModule -->\n\nPrismaModule->ArtistModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nCountryModule\n\nCountryModule\n\nCountryModule -->\n\nPrismaModule->CountryModule\n\n\n\n\n\nPlaylistModule\n\nPlaylistModule\n\nPlaylistModule -->\n\nPrismaModule->PlaylistModule\n\n\n\n\n\nProfileFavoriteSongModule\n\nProfileFavoriteSongModule\n\nProfileFavoriteSongModule -->\n\nPrismaModule->ProfileFavoriteSongModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nPrismaModule->ProfileModule\n\n\n\n\n\nSongModule\n\nSongModule\n\nSongModule -->\n\nPrismaModule->SongModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserPlanModule\n\nUserPlanModule\n\nUserPlanModule -->\n\nPrismaModule->UserPlanModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\nAppModule -->\n\nAlbumModule->AppModule\n\n\n\n\n\nAlbumService\n\nAlbumService\n\nAlbumModule -->\n\nAlbumService->AlbumModule\n\n\n\nAppModule -->\n\nArtistModule->AppModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\nAppModule -->\n\nCountryModule->AppModule\n\n\n\nAppModule -->\n\nPlaylistModule->AppModule\n\n\n\nAppModule -->\n\nProfileFavoriteSongModule->AppModule\n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\nAppModule -->\n\nSongModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nAppModule -->\n\nUserPlanModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArtistService\n\nArtistService\n\nArtistModule -->\n\nArtistService->ArtistModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nCountryService\n\nCountryService\n\nCountryModule -->\n\nCountryService->CountryModule\n\n\n\n\n\nPlaylistService\n\nPlaylistService\n\nPlaylistModule -->\n\nPlaylistService->PlaylistModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProfileFavoriteSongService\n\nProfileFavoriteSongService\n\nProfileFavoriteSongModule -->\n\nProfileFavoriteSongService->ProfileFavoriteSongModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nSongService\n\nSongService\n\nSongModule -->\n\nSongService->SongModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserPlanService\n\nUserPlanService\n\nUserPlanModule -->\n\nUserPlanService->UserPlanModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        14 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    13 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    37 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            handleError   (src/.../handle-error.util.ts)\n                        \n                        \n                            LoggedAdmin   (src/.../logged-admin.decorator.ts)\n                        \n                        \n                            LoggedArtist   (src/.../logged-artist.decorator.ts)\n                        \n                        \n                            LoggedManager   (src/.../logged-manager.decorator.ts)\n                        \n                        \n                            LoggedUser   (src/.../logged-user.decorator.ts)\n                        \n                        \n                            verifyConfirmPassword   (src/.../confirm-password.ultil.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/handle-error.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (error: Error): undefined => {\n  const errorLines = error.message?.split('\\n');\n  const lastErrorLine = errorLines[errorLines.length - 1]?.trim();\n\n  if (!lastErrorLine) {\n    console.error(error);\n  }\n\n  throw new UnprocessableEntityException(\n    lastErrorLine || 'Algum erro ocorreu ao executar a operação.',\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/logged-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LoggedAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n  const admin = request.user;\n\n  if (!admin) {\n    throw new UnauthorizedException('User not found or not authorized!');\n  }\n\n  if (\n    admin.userCategoryName !== 'admin' &&\n    admin.userCategoryName !== 'manager'\n  ) {\n    throw new UnauthorizedException(\n      'User does not have permission to access this route!',\n    );\n  }\n\n  return admin;\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/logged-artist.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LoggedArtist\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n  const artist = request.user;\n\n  if (!artist) {\n    throw new UnauthorizedException('User not found or not authorized!');\n  }\n\n  if (artist.userCategoryName !== 'artist') {\n    throw new UnauthorizedException(\n      'User does not have permission to access this route!',\n    );\n  }\n\n  return artist;\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/logged-manager.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LoggedManager\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const manager = request.user;\n\n    if (!manager) {\n      throw new UnauthorizedException('User not found or not authorized!');\n    }\n\n    if (manager.userCategoryName !== 'manager') {\n      throw new UnauthorizedException(\n        'User does not have pessssrmission to access this route!',\n      );\n    }\n\n    return manager;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/logged-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LoggedUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n  const userObject = request.user;\n\n  if (userObject.user.userCategoryName !== 'user') {\n    throw new UnauthorizedException(\n      'User does not have permission to access this route',\n    );\n  }\n\n  delete userObject.user.password;\n\n  return userObject;\n})\n                    \n                \n\n\n        \n    \n\n    src/utils/confirm-password.ultil.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        verifyConfirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  password: string,\n  confirmPassword: string,\n): void => {\n  if (password !== confirmPassword) {\n    throw new BadRequestException('The passwords entered are not the same!');\n  }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
