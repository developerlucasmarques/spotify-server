var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddSongPlaylistDto.html",[0,0.222,1,3.138]],["body/classes/AddSongPlaylistDto.html",[0,0.353,1,5,2,1.074,3,0.175,4,0.16,5,0.117,6,5.926,7,4.279,8,3.703,9,0.518,10,1.516,11,6.524,12,4.825,13,0.654,14,0.011,15,0.996,16,1.559,17,4.674,18,1.651,19,6.853,20,5.755,21,3.445,22,2.667,23,6.783,24,6.783,25,6.783,26,6.783,27,6.783,28,0.679,29,4.717,30,6.783,31,6.783,32,6.783,33,6.783,34,6.783,35,5.373,36,0.423,37,2.617,38,1.015,39,4.15,40,1.836,41,0.175,42,2.122,43,0.008,44,0.008]],["title/classes/Admin.html",[0,0.222,45,1.593]],["body/classes/Admin.html",[0,0.295,2,1.132,3,0.185,4,0.169,5,0.123,9,0.546,10,1.567,13,0.814,14,0.011,15,1.104,18,1.609,28,0.845,41,0.185,43,0.009,44,0.009,45,2.624,46,4.97,47,3.75,48,1.761,49,4.068,50,2.941,51,1.036,52,2.941,53,4.068,54,5.662,55,3.919,56,5.662,57,5.662,58,5.662,59,5.662,60,5.662,61,5.662]],["title/controllers/AdminController.html",[62,1.223,63,3.138]],["body/controllers/AdminController.html",[0,0.198,3,0.124,4,0.113,5,0.082,9,0.366,13,0.69,14,0.011,15,0.948,16,1.645,18,1.702,28,0.716,36,0.495,38,0.716,41,0.124,43,0.007,44,0.007,45,3.318,48,1.513,51,0.974,62,1.089,63,3.959,64,1.089,65,3.329,66,1.734,67,1.5,68,1.791,69,2.374,70,2.075,71,2.455,72,2.01,73,2.796,74,2.773,75,4.673,76,2.796,77,1.73,78,5.153,79,3.793,80,1.999,81,2.056,82,2.796,83,3.793,84,3.793,85,3.793,86,3.329,87,6.78,88,3.793,89,5.406,90,4.282,91,3.793,92,3.793,93,3.793,94,3.793,95,2.796,96,4.673,97,3.793,98,2.646,99,3.141,100,3.793,101,2.85,102,1.799,103,1.799,104,1.944,105,1.944,106,1.869,107,1.799,108,0.696,109,1.799,110,1.121,111,2.547,112,3.397,113,1.734,114,2.027,115,2.455,116,2.219,117,3.024,118,3.793,119,4.047,120,3.329,121,1.465,122,2.796,123,1.465,124,3.329,125,3.329,126,3.793,127,3.793,128,1.799,129,1.222,130,1.153,131,2.614,132,3.272,133,3.793,134,1.999,135,3.793,136,3.793,137,3.793,138,3.793,139,3.793,140,5.37,141,3.793,142,3.329,143,3.793,144,3.793,145,3.793,146,1.944,147,3.793,148,3.793]],["title/modules/AdminModule.html",[149,1.189,150,2.933]],["body/modules/AdminModule.html",[0,0.3,3,0.188,4,0.172,5,0.125,14,0.011,36,0.513,41,0.188,43,0.009,44,0.009,63,5.651,64,2.033,108,1.056,110,1.7,119,5.428,120,5.05,149,1.977,150,5.896,151,2.295,152,2.734,153,5.05,154,5.05,155,5.05,156,3.335,157,3.017,158,2.452,159,2.371,160,5.753,161,3.123,162,3.123,163,2.728,164,2.728,165,5.753,166,2.728,167,2.728,168,2.371]],["title/injectables/AdminService.html",[119,2.763,169,1.156]],["body/injectables/AdminService.html",[0,0.169,3,0.106,4,0.097,5,0.07,9,0.312,10,1.071,13,0.702,14,0.011,15,1.017,18,1.686,28,0.748,36,0.476,41,0.106,43,0.006,44,0.006,45,2.634,47,2.36,48,1.488,50,2.433,51,1.072,52,1.251,67,1.338,68,1.663,69,2.089,70,2.433,71,2.19,72,2.134,74,2.554,75,4.341,77,1.836,78,3.109,80,1.965,81,2.022,96,4.341,108,0.595,119,3.109,121,1.251,122,2.387,123,1.251,124,2.843,125,2.843,129,1.043,130,0.985,134,1.877,169,1.301,170,1.38,171,2.843,172,5.7,173,3.681,174,3.301,175,1.481,176,1.536,177,2.513,178,3.239,179,2.43,180,2.802,181,3.239,182,3.188,183,3.819,184,3.239,185,3.239,186,4.205,187,3.239,188,2.945,189,3.239,190,3.819,191,3.239,192,2.387,193,2.387,194,2.387,195,3.551,196,3.7,197,3.467,198,3.239,199,3.819,200,1.66,201,1.731,202,3.301,203,1.536,204,2.232,205,2.232,206,2.582,207,1.429,208,1.429,209,1.536,210,3.819,211,5.022,212,2.966,213,1.505,214,3.476,215,1.991,216,2.36,217,2.582,218,3.338,219,2.606,220,3.239,221,2.88,222,2.843,223,3.819,224,2.802,225,1.894,226,5.022,227,6.299,228,1.894,229,3.819,230,2.582,231,2.102,232,3.819,233,3.239,234,2.843,235,3.239,236,3.239,237,3.239,238,2.843,239,1.429]],["title/classes/Album.html",[0,0.222,240,1.878]],["body/classes/Album.html",[0,0.295,2,1.132,3,0.185,4,0.169,5,0.123,9,0.546,10,1.567,13,0.814,14,0.011,15,1.088,18,1.609,28,0.845,41,0.185,43,0.009,44,0.009,48,1.761,49,4.068,51,1.036,53,4.068,55,3.919,240,3.092,241,4.97,242,4.941,243,3.359,244,5.611,245,5.662,246,5.662,247,5.662,248,5.662,249,5.662,250,5.662,251,4.55,252,5.662]],["title/controllers/AlbumController.html",[62,1.223,253,3.138]],["body/controllers/AlbumController.html",[0,0.208,3,0.13,4,0.119,5,0.086,9,0.384,13,0.668,14,0.011,15,1.024,16,1.593,28,0.693,36,0.493,38,0.753,41,0.13,43,0.007,44,0.007,48,1.465,51,0.943,62,1.144,64,1.144,66,1.821,67,1.553,68,1.83,69,2.417,71,2.542,72,2.397,74,2.868,80,1.935,81,1.99,98,2.739,99,4.416,101,2.927,102,1.89,103,1.89,104,2.042,105,2.042,106,1.963,107,1.89,108,0.731,109,1.89,110,1.177,111,2.637,112,3.332,113,1.821,115,1.821,121,1.539,123,1.539,128,1.89,129,1.283,130,1.211,132,3.168,134,1.935,146,2.042,240,3.542,253,4.098,254,3.497,255,3.497,256,3.293,257,4.498,258,2.937,259,4.88,260,4.432,261,3.984,262,3.176,263,5.279,264,3.984,265,3.984,266,3.984,267,3.497,268,3.984,269,3.419,270,3.419,271,3.984,272,3.176,273,4.775,274,3.984,275,3.984,276,3.176,277,3.609,278,2.937,279,4.157,280,3.497,281,4.432,282,3.984,283,3.984,284,2.937,285,3.497,286,3.984,287,3.984,288,3.984,289,3.984,290,3.984,291,5.559,292,3.984,293,3.984,294,3.176,295,3.984]],["title/modules/AlbumModule.html",[149,1.189,296,2.933]],["body/modules/AlbumModule.html",[0,0.3,3,0.188,4,0.172,5,0.125,14,0.011,36,0.513,41,0.188,43,0.009,44,0.009,64,2.033,108,1.056,110,1.7,149,1.977,151,2.295,152,2.734,156,3.335,157,3.017,158,2.452,159,2.371,161,3.123,162,3.123,163,2.728,164,2.728,166,2.728,167,2.728,168,2.371,253,5.651,279,5.428,280,5.05,296,5.896,297,5.05,298,5.05,299,5.753,300,5.753,301,5.753]],["title/injectables/AlbumService.html",[169,1.156,279,2.763]],["body/injectables/AlbumService.html",[0,0.164,3,0.103,4,0.094,5,0.068,9,0.303,10,1.048,13,0.715,14,0.011,15,1.086,18,1.709,28,0.742,36,0.435,41,0.103,43,0.006,44,0.006,48,1.525,51,1.09,67,1.309,68,1.48,69,1.859,71,2.143,72,2.098,74,2.691,77,1.805,80,2.015,81,2,108,0.577,121,1.215,123,1.215,129,1.013,130,0.956,134,1.734,169,1.273,170,1.341,173,3.596,175,1.438,176,1.492,177,2.477,179,2.389,182,2.945,192,2.319,193,2.319,194,2.319,195,3.798,197,3.652,199,3.737,200,1.613,201,1.681,203,1.492,207,1.388,208,1.388,209,1.492,212,2.472,214,3.183,216,2.31,218,3.15,219,2.562,221,2.562,225,1.84,239,2.068,242,4.52,243,2.068,244,4.577,251,3.637,256,2.098,257,4.031,263,5.393,267,4.115,273,4.279,279,3.043,281,3.737,302,2.761,303,2.994,304,5.603,305,4.115,306,4.688,307,3.146,308,4.115,309,3.146,310,3.737,311,3.146,312,3.146,313,4.688,314,3.146,315,4.115,316,3.146,317,4.688,318,3.146,319,2.508,320,2.617,321,2.742,322,3.146,323,4.688,324,3.146,325,5.451,326,5.603,327,3.637,328,4.115,329,4.688,330,3.146,331,2.042,332,2.168,333,3.146,334,1.492,335,4.115,336,3.146,337,3.146,338,3.146]],["title/controllers/AppController.html",[62,1.223,339,3.138]],["body/controllers/AppController.html",[0,0.292,3,0.183,4,0.168,5,0.122,9,0.541,13,0.541,14,0.011,16,1.29,28,0.562,36,0.495,38,1.06,41,0.183,43,0.009,44,0.009,48,1.187,51,0.763,62,1.612,64,1.612,66,2.566,67,1.947,80,1.567,81,1.612,108,1.03,112,3.187,113,2.566,129,1.808,130,1.706,132,2.566,134,1.567,212,2.476,339,5.138,340,4.926,341,6.045,342,6.118,343,5.612,344,6.322,345,4.474,346,4.525,347,6.97,348,5.612,349,7.582,350,4.474,351,4.922,352,4.926,353,5.612,354,5.612,355,5.612,356,4.926,357,5.612,358,5.612,359,5.612]],["title/modules/AppModule.html",[149,1.189,360,3.138]],["body/modules/AppModule.html",[0,0.216,3,0.135,4,0.124,5,0.09,14,0.011,36,0.536,41,0.135,43,0.007,44,0.007,64,1.642,108,0.761,149,1.596,150,5.268,151,1.654,152,2.208,156,3.049,157,2.437,158,1.768,159,1.71,161,2.522,162,2.522,213,1.095,296,5.268,339,4.822,351,4.962,352,3.641,360,6.544,361,3.641,362,3.641,363,3.641,364,5.268,365,5.268,366,5.268,367,5.268,368,5.268,369,5.268,370,5.268,371,5.268,372,5.268,373,5.268,374,5.268,375,4.147,376,4.147,377,4.147,378,4.147,379,4.147,380,4.147,381,4.147,382,4.147,383,4.147,384,4.147,385,1.602,386,3.192,387,2.858,388,4.147,389,4.147,390,4.147,391,2.858,392,4.147,393,4.147,394,3.307,395,2.858,396,4.147]],["title/injectables/AppService.html",[169,1.156,351,2.763]],["body/injectables/AppService.html",[0,0.313,3,0.196,4,0.18,5,0.131,9,0.58,13,0.58,14,0.011,15,1.061,28,0.602,36,0.375,41,0.196,43,0.009,44,0.009,48,1.271,51,0.818,67,2.031,80,1.679,81,1.727,108,1.104,134,1.679,169,1.974,170,2.563,341,5.797,342,6.382,351,4.72,356,6.382,397,5.278,398,7.271,399,6.013,400,7.271,401,4.432,402,4.794,403,5.278,404,5.278]],["title/classes/Artist.html",[0,0.222,256,1.593]],["body/classes/Artist.html",[0,0.275,2,1.054,3,0.172,4,0.157,5,0.114,9,0.508,10,1.498,13,0.83,14,0.011,15,1.126,18,1.558,28,0.862,41,0.172,43,0.008,44,0.008,47,3.63,48,1.73,49,3.937,50,2.846,51,1.002,52,2.846,53,3.937,55,3.82,243,3.251,256,2.509,405,4.628,406,5.874,407,6.467,408,5.272,409,5.272,410,5.272,411,5.272,412,5.272,413,5.272,414,5.272,415,5.272,416,5.272,417,5.272,418,5.272]],["title/controllers/ArtistController.html",[62,1.223,419,3.138]],["body/controllers/ArtistController.html",[0,0.172,3,0.108,4,0.099,5,0.072,9,0.318,13,0.706,14,0.011,15,0.979,16,1.728,18,1.622,28,0.752,36,0.487,38,0.624,41,0.108,43,0.006,44,0.006,45,2.814,48,1.549,51,0.997,62,0.949,64,0.949,66,1.51,67,1.357,68,1.679,69,1.912,70,2.456,71,2.221,72,1.819,74,2.572,76,2.434,77,1.565,80,2.046,81,2.16,89,5.069,98,2.394,99,4.146,101,2.221,102,1.566,103,1.566,104,1.693,105,1.693,106,1.627,107,1.566,108,0.606,109,1.566,110,0.976,111,3.566,112,3.508,113,1.51,114,1.765,115,2.221,116,1.932,121,1.276,123,1.276,128,3.475,129,1.064,130,1.004,131,2.275,132,3.437,134,2.1,142,2.898,146,2.491,180,1.932,188,2.03,221,2.221,242,3.154,256,3.284,262,2.633,270,4.358,272,2.633,277,2.144,278,2.434,294,2.633,320,2.713,346,3.154,419,3.582,420,2.898,421,4.265,422,4.265,423,3.349,424,4.127,425,3.302,426,3.302,427,3.719,428,3.302,429,3.302,430,3.302,431,3.302,432,3.302,433,3.154,434,3.582,435,3.302,436,3.302,437,3.302,438,2.898,439,3.302,440,3.302,441,3.302,442,3.302,443,3.302,444,4.382,445,3.302,446,3.302,447,2.03,448,3.743,449,2.898,450,3.349,451,2.898,452,3.302,453,3.302,454,2.898,455,3.302,456,3.302,457,3.302,458,3.302,459,2.434,460,3.302,461,3.302,462,3.302,463,3.302,464,3.302,465,3.302,466,3.302,467,3.302,468,3.302,469,2.898,470,3.302,471,3.302,472,3.302,473,3.302,474,3.302]],["title/modules/ArtistModule.html",[149,1.189,364,2.933]],["body/modules/ArtistModule.html",[0,0.3,3,0.188,4,0.172,5,0.125,14,0.011,36,0.513,41,0.188,43,0.009,44,0.009,64,2.033,108,1.056,110,1.7,149,1.977,151,2.295,152,2.734,156,3.335,157,3.017,158,2.452,159,2.371,161,3.123,162,3.123,163,2.728,164,2.728,166,2.728,167,2.728,168,2.371,364,5.896,419,5.651,448,5.428,449,5.05,475,5.05,476,5.05,477,5.753,478,5.753,479,5.753]],["title/injectables/ArtistService.html",[169,1.156,448,2.763]],["body/injectables/ArtistService.html",[0,0.115,3,0.072,4,0.066,5,0.048,9,0.213,10,0.795,13,0.688,14,0.011,15,1.036,18,1.746,21,1.569,28,0.728,36,0.424,41,0.072,43,0.004,44,0.004,47,1.086,48,1.476,50,1.727,51,1.124,52,0.852,67,0.993,68,1.18,69,1.995,70,1.981,71,1.626,72,1.92,74,2.042,77,2.121,80,1.95,81,2.005,108,0.405,121,0.852,123,0.852,129,0.71,130,0.67,134,1.839,169,0.966,170,0.94,173,3.669,175,1.008,176,1.046,177,2.046,179,1.905,180,2.08,182,3.123,188,2.187,192,1.625,193,1.625,194,1.625,195,3.909,196,2.902,197,3.818,199,1.758,200,1.13,201,1.178,202,2.451,203,1.046,204,1.519,205,1.519,206,1.758,207,0.973,208,0.973,209,1.046,210,2.835,211,4.486,212,2.905,214,3.386,216,2.202,217,2.835,218,3.123,219,3.01,221,2.345,223,1.758,224,2.08,225,2.08,228,1.29,230,2.835,231,1.431,232,2.835,239,2.792,240,0.973,242,4.798,243,2.905,244,1.625,256,1.92,303,2.389,310,2.835,315,3.122,320,2.496,321,2.615,327,3.653,331,4.275,332,3.08,334,3.001,406,3.564,421,3.122,422,3.122,423,2.451,424,3.329,434,3.295,438,3.122,444,3.534,448,2.309,450,2.451,451,1.935,480,1.935,481,4.47,482,3.556,483,3.556,484,2.204,485,2.204,486,2.204,487,3.556,488,2.204,489,2.204,490,2.204,491,3.556,492,2.204,493,2.204,494,3.556,495,2.204,496,2.204,497,3.556,498,2.204,499,4.502,500,2.204,501,3.556,502,2.204,503,2.835,504,3.556,505,3.122,506,3.556,507,3.556,508,3.556,509,3.295,510,3.122,511,3.924,512,1.935,513,2.204,514,2.615,515,1.935,516,1.935,517,4.47,518,4.47,519,1.935,520,2.204,521,2.204,522,2.204,523,1.935,524,3.556,525,1.935,526,2.204,527,1.901,528,1.935,529,1.935]],["title/controllers/AuthController.html",[62,1.223,530,3.138]],["body/controllers/AuthController.html",[0,0.166,3,0.104,4,0.095,5,0.069,9,0.307,13,0.718,14,0.011,16,1.665,28,0.725,36,0.513,38,0.602,41,0.104,43,0.006,44,0.006,45,3.058,48,1.532,51,0.986,62,0.916,64,0.916,66,1.458,67,1.323,80,2.024,81,2.081,99,3.305,101,2.165,102,1.513,103,1.513,106,1.571,107,1.513,108,0.586,109,1.513,110,0.943,111,3.168,112,3.403,113,1.458,114,1.704,116,1.866,122,2.351,128,2.965,129,1.027,130,0.97,132,3.313,134,2.243,213,2.252,256,3.058,276,2.543,277,2.07,278,2.351,385,2.415,447,1.961,450,2.198,530,3.491,531,2.8,532,2.8,533,4.157,534,4.157,535,4.959,536,4.157,537,3.189,538,3.189,539,6.999,540,6.999,541,3.189,542,3.189,543,3.189,544,3.189,545,2.8,546,4.823,547,7.443,548,3.189,549,7.443,550,6.533,551,6.533,552,5.487,553,3.189,554,2.8,555,4.823,556,3.189,557,3.189,558,2.8,559,3.341,560,5.129,561,3.189,562,3.189,563,2.8,564,4.823,565,3.189,566,3.189,567,4.157,568,3.189,569,3.189,570,3.189,571,2.07,572,3.667,573,2.8,574,2.8,575,5.863,576,2.198,577,2.198,578,2.8,579,2.351,580,2.644,581,1.961,582,3.189,583,3.189,584,5.488,585,3.189,586,3.189,587,3.189,588,3.189,589,3.189,590,3.189,591,3.189,592,3.189,593,3.189,594,3.189,595,3.189,596,3.189,597,3.189]],["title/modules/AuthModule.html",[149,1.189,365,2.933]],["body/modules/AuthModule.html",[0,0.281,3,0.176,4,0.161,5,0.117,14,0.011,36,0.521,41,0.176,43,0.008,44,0.008,64,1.954,108,0.991,110,1.595,149,1.899,151,2.153,152,2.627,156,3.283,157,2.899,158,2.3,159,2.224,161,3.001,162,3.001,163,2.559,164,2.559,166,2.559,167,2.559,168,2.224,365,5.92,530,5.49,572,5.342,573,4.737,598,4.737,599,5.396,600,4.737,601,5.671,602,5.396,603,5.396,604,4.302,605,5.396,606,5.396,607,5.396,608,5.396,609,4.737,610,5.396,611,5.396,612,5.396]],["title/injectables/AuthService.html",[169,1.156,572,2.763]],["body/injectables/AuthService.html",[0,0.16,3,0.1,4,0.092,5,0.067,9,0.296,13,0.665,14,0.011,18,1.167,28,0.658,36,0.492,41,0.1,43,0.006,44,0.006,45,2.067,48,1.389,50,3.23,51,1.043,52,3.007,67,1.285,69,1.831,77,2.305,80,1.835,81,1.762,108,0.563,122,2.263,130,1.399,134,1.713,168,2.276,169,1.25,170,1.308,173,3.479,175,2.104,176,1.456,177,2.447,179,1.962,182,2.619,195,3.558,196,2.988,197,3.4,202,3.172,203,1.456,207,1.354,208,1.354,209,1.456,212,3.479,213,1.89,214,3.157,215,2.83,216,3.022,218,2.909,219,3.271,226,2.447,239,1.354,256,2.067,303,2.46,331,1.993,334,1.456,385,1.778,450,2.115,499,2.694,533,4.04,534,4.04,535,4.04,536,4.04,545,4.04,546,4.755,552,4.522,554,4.04,555,4.755,558,4.04,559,3.278,560,4.931,563,4.04,564,4.755,567,4.04,571,1.993,572,2.988,574,2.694,575,5.769,576,2.115,577,2.115,578,2.694,579,2.263,604,2.447,613,2.694,614,6.134,615,3.069,616,3.069,617,3.069,618,3.069,619,3.069,620,2.263,621,6.9,622,6.057,623,6.9,624,5.522,625,4.04,626,6.134,627,3.069,628,2.57,629,4.602,630,1.887,631,3.069,632,3.069,633,4.04,634,4.04]],["title/classes/Category.html",[0,0.222,635,2.275]],["body/classes/Category.html",[0,0.314,2,1.205,3,0.197,4,0.18,5,0.131,9,0.581,10,1.628,13,0.783,14,0.011,15,1.037,18,1.654,28,0.813,41,0.197,43,0.009,44,0.009,48,1.787,49,4.181,51,1.064,53,4.181,55,4.004,635,3.891,636,5.29,637,6.027,638,6.027,639,6.027,640,6.027]],["title/controllers/CategoryController.html",[62,1.223,641,3.138]],["body/controllers/CategoryController.html",[0,0.201,3,0.126,4,0.115,5,0.084,9,0.371,13,0.658,14,0.011,15,1.016,16,1.654,18,1.579,28,0.72,36,0.489,38,0.727,41,0.126,43,0.007,44,0.007,45,3.238,48,1.443,51,0.929,62,1.106,64,1.106,66,1.76,67,1.516,68,1.803,69,2.387,70,2.637,71,2.482,72,2.353,73,2.838,74,2.785,77,1.748,80,1.906,81,2.067,82,2.838,95,2.838,98,2.674,101,2.874,102,1.826,103,1.826,104,1.974,105,1.974,106,1.897,107,1.826,108,0.707,109,1.826,110,1.138,111,2.574,112,3.414,113,1.76,114,2.901,115,1.76,116,2.252,121,1.487,123,1.487,128,1.826,129,1.24,130,1.171,132,3.29,134,2.01,146,1.974,213,1.433,258,2.838,270,3.338,284,2.838,433,4.431,447,2.368,635,3.36,641,4.001,642,3.38,643,4.431,644,4.139,645,3.85,646,5.086,647,3.85,648,7.467,649,3.85,650,3.07,651,4.764,652,3.85,653,3.38,654,3.85,655,3.85,656,4.704,657,3.85,658,3.85,659,4.081,660,3.38,661,4.328,662,3.85,663,3.85,664,3.07,665,3.85,666,2.838,667,3.85,668,3.85,669,3.85,670,3.85,671,3.85,672,5.428,673,3.85,674,3.85,675,3.07,676,3.85]],["title/modules/CategoryModule.html",[149,1.189,366,2.933]],["body/modules/CategoryModule.html",[0,0.3,3,0.188,4,0.172,5,0.125,14,0.011,36,0.513,41,0.188,43,0.009,44,0.009,64,2.033,108,1.056,110,1.7,149,1.977,151,2.295,152,2.734,156,3.335,157,3.017,158,2.452,159,2.371,161,3.123,162,3.123,163,2.728,164,2.728,166,2.728,167,2.728,168,2.371,366,5.896,641,5.651,659,5.428,660,5.05,677,5.05,678,5.753,679,5.05,680,5.753,681,5.753]],["title/injectables/CategoryService.html",[169,1.156,659,2.763]],["body/injectables/CategoryService.html",[0,0.184,3,0.115,4,0.105,5,0.077,9,0.34,13,0.699,14,0.011,15,1.035,18,1.675,21,1.557,28,0.748,36,0.453,41,0.115,43,0.006,44,0.006,48,1.534,51,1.103,67,1.424,68,1.581,69,1.986,70,2.534,71,2.331,72,1.909,74,2.632,77,1.643,80,2.026,81,2.083,108,0.648,121,1.363,123,1.363,129,1.136,130,1.073,134,2.026,169,1.385,170,1.504,173,3.725,174,3.514,175,1.613,176,1.673,177,2.617,179,2.553,180,2.983,182,3.44,195,3.741,197,3.685,200,2.614,201,1.885,203,1.673,207,1.557,208,1.557,209,1.673,212,2.895,214,3.3,216,1.738,218,3.111,219,2.331,221,2.999,228,2.064,239,2.25,240,1.557,256,1.321,321,2.064,327,3.887,334,1.673,514,2.064,635,2.725,643,4.259,644,2.614,646,4.971,653,4.476,656,4.521,659,3.31,661,4.066,682,3.097,683,3.528,684,3.528,685,5.099,686,3.528,687,3.528,688,5.099,689,3.528,690,3.528,691,5.099,692,3.528,693,3.097,694,5.759,695,5.099,696,3.528,697,3.528,698,5.099,699,3.528,700,3.528,701,3.097]],["title/classes/Country.html",[0,0.222,527,2.275]],["body/classes/Country.html",[0,0.307,2,1.179,3,0.193,4,0.176,5,0.128,9,0.569,10,1.607,13,0.797,14,0.011,15,1.073,18,1.639,28,0.828,41,0.193,43,0.009,44,0.009,48,1.779,49,4.143,51,1.055,53,4.143,55,3.975,527,3.841,702,5.179,703,5.032,704,5.9,705,5.9,706,5.9,707,5.9,708,5.9]],["title/controllers/CountryController.html",[62,1.223,709,3.138]],["body/controllers/CountryController.html",[0,0.202,3,0.127,4,0.116,5,0.084,9,0.375,13,0.661,14,0.011,15,1.018,16,1.66,18,1.771,28,0.723,36,0.49,38,0.734,41,0.127,43,0.007,44,0.007,45,3.232,48,1.449,51,0.932,62,1.116,64,1.116,66,1.777,67,1.526,68,1.81,69,2.395,70,2.648,71,2.498,72,2.365,73,2.865,74,2.792,77,1.76,80,1.914,81,2.074,82,2.865,95,2.865,98,2.692,101,2.888,102,1.843,103,1.843,104,1.992,105,1.992,106,1.915,107,1.843,108,0.713,109,1.843,110,1.148,111,3.251,112,3.424,113,1.777,114,2.92,115,1.777,116,2.273,121,1.501,123,1.501,128,2.996,129,1.252,130,1.182,131,2.678,132,3.302,134,2.017,146,1.992,188,2.39,269,4.215,270,4.215,447,2.39,459,2.865,527,4.266,664,3.098,675,3.098,709,4.027,710,3.411,711,4.449,712,3.886,713,3.886,714,3.886,715,3.411,716,3.886,717,3.098,718,4.795,719,3.886,720,3.886,721,3.886,722,4.723,723,3.886,724,3.886,725,4.101,726,3.411,727,4.356,728,3.886,729,3.886,730,3.886,731,3.886,732,3.886,733,3.886,734,3.886,735,3.886,736,5.463,737,3.886,738,3.886,739,3.886]],["title/modules/CountryModule.html",[149,1.189,367,2.933]],["body/modules/CountryModule.html",[0,0.3,3,0.188,4,0.172,5,0.125,14,0.011,36,0.513,41,0.188,43,0.009,44,0.009,64,2.033,108,1.056,110,1.7,149,1.977,151,2.295,152,2.734,156,3.335,157,3.017,158,2.452,159,2.371,161,3.123,162,3.123,163,2.728,164,2.728,166,2.728,167,2.728,168,2.371,367,5.896,709,5.651,725,5.428,726,5.05,740,5.05,741,5.753,742,5.05,743,5.753,744,5.753]],["title/injectables/CountryService.html",[169,1.156,725,2.763]],["body/injectables/CountryService.html",[0,0.194,3,0.121,4,0.111,5,0.081,9,0.358,13,0.711,14,0.011,15,1.045,18,1.746,28,0.76,36,0.461,41,0.121,43,0.006,44,0.006,48,1.56,51,1.09,67,1.478,68,1.628,69,1.755,70,2.595,71,2.419,72,2.307,74,2.679,77,1.704,80,2.061,81,2.12,108,0.682,121,1.435,123,1.435,129,1.197,130,1.129,134,1.983,169,1.437,170,1.583,173,3.75,174,3.647,175,1.698,176,1.762,177,2.68,179,2.256,180,3.095,182,3.367,183,4.219,186,4.645,188,3.254,190,4.219,195,3.707,197,3.31,200,1.904,203,1.762,207,1.639,208,1.639,209,1.762,212,2.964,214,3.256,218,3.186,219,2.419,221,3.071,228,2.173,229,4.914,231,2.411,239,2.335,334,1.762,514,2.173,527,4.059,528,3.261,529,3.261,703,4.001,711,4.361,722,4.629,725,3.435,727,4.219,745,3.261,746,3.715,747,3.715,748,3.715,749,3.715,750,3.715,751,3.715,752,3.715,753,3.715,754,6.164,755,5.291,756,3.715,757,3.715]],["title/classes/CreateAdminDto.html",[0,0.222,75,2.933]],["body/classes/CreateAdminDto.html",[0,0.317,2,0.908,3,0.148,4,0.136,5,0.099,9,0.438,10,1.359,13,0.736,14,0.011,15,1.064,16,1.754,22,2.85,28,0.764,36,0.38,37,2.765,38,0.858,40,1.552,41,0.148,42,2.388,43,0.007,44,0.007,45,3.051,47,3.76,50,2.948,51,0.933,52,2.648,75,4.191,213,1.606,758,6.894,759,3.622,760,4.45,761,2.793,762,5.338,763,4.848,764,6.894,765,4.088,766,4.543,767,3.987,768,3.349,769,6.081,770,6.081,771,4.543,772,3.987,773,3.557,774,4.483,775,4.543,776,4.543,777,5.338,778,5.338,779,4.848,780,4.543,781,3.622,782,3.349,783,4.191,784,4.191,785,4.191,786,5.338,787,3.987,788,4.543,789,3.557,790,3.347,791,3.146,792,2.077,793,3.13,794,3.349,795,4.01,796,3.349,797,3.13,798,2.949,799,3.349,800,3.13,801,3.987]],["title/classes/CreateAlbumDto.html",[0,0.222,257,2.763]],["body/classes/CreateAlbumDto.html",[0,0.345,2,1.037,3,0.169,4,0.155,5,0.113,9,0.5,10,1.482,13,0.705,14,0.011,15,0.983,16,1.68,22,2.783,28,0.732,36,0.414,37,2.713,38,0.98,40,1.772,41,0.169,42,2.288,43,0.008,44,0.008,51,1.083,240,3.594,243,3.514,244,5.87,251,4.305,257,4.305,790,3.523,791,2.734,792,2.371,798,3.366,802,6.764,803,4.135,804,4.552,805,4.135,806,4.57,807,6.632,808,6.632,809,5.186,810,4.552,811,5.186,812,5.287,813,6.632,814,6.632,815,5.186,816,5.186,817,6.632,818,6.632,819,5.186,820,5.821,821,4.305,822,3.366,823,5.186,824,4.135]],["title/classes/CreateArtistDto.html",[0,0.222,424,2.763]],["body/classes/CreateArtistDto.html",[0,0.268,2,0.712,3,0.116,4,0.106,5,0.077,9,0.343,10,1.148,13,0.74,14,0.011,15,1.068,16,1.765,22,2.859,28,0.768,36,0.321,37,2.754,38,0.673,39,2.867,40,1.217,41,0.116,42,2.402,43,0.006,44,0.006,47,3.442,50,2.699,51,0.95,52,3.021,55,2.53,240,2.266,243,3.082,256,3.132,332,3.539,406,4.801,424,3.334,527,2.745,760,3.909,761,2.191,765,3.68,768,2.626,773,3.004,781,2.84,782,2.626,783,3.539,784,3.539,785,3.539,789,3.004,790,2.753,791,3,792,1.629,793,2.455,795,3.523,796,2.626,797,2.455,798,2.313,799,2.626,800,2.455,805,4.094,821,3.334,822,3.334,824,4.094,825,6.865,826,2.626,827,3.127,828,6.59,829,6.59,830,6.59,831,4.508,832,5.136,833,4.094,834,7.277,835,5.136,836,5.136,837,5.136,838,5.136,839,5.136,840,4.094,841,4.508,842,5.136,843,4.508,844,5.136,845,4.508,846,4.508,847,4.508,848,5.136,849,5.136,850,6.59,851,4.508,852,4.508,853,5.136,854,5.136,855,4.094,856,3.786,857,5.136,858,3.563,859,4.094,860,3.563,861,3.563,862,5.136,863,5.136,864,5.136,865,5.136,866,5.136,867,3.563,868,3.563,869,5.136,870,5.136,871,3.563,872,3.563,873,4.508,874,3.563,875,3.127,876,5.136,877,3.563,878,2.626,879,3.127,880,2.84,881,3.563,882,2.84,883,3.127]],["title/classes/CreateCategoryDto.html",[0,0.222,643,2.763]],["body/classes/CreateCategoryDto.html",[0,0.379,2,1.205,3,0.197,4,0.18,5,0.131,9,0.581,10,1.628,13,0.581,14,0.011,15,0.929,16,1.385,22,2.488,28,0.603,36,0.454,37,2.563,38,1.138,40,2.059,41,0.197,42,1.886,43,0.009,44,0.009,51,1.132,635,3.891,643,4.727,644,3.733,790,2.755,791,3.001,792,2.755,833,5.805,884,6.391,885,4.805,886,6.027,887,6.027,888,6.027]],["title/classes/CreateCountryDto.html",[0,0.222,711,2.763]],["body/classes/CreateCountryDto.html",[0,0.365,2,1.132,3,0.185,4,0.169,5,0.123,9,0.546,10,1.567,13,0.676,14,0.011,15,1.015,16,1.611,22,2.718,28,0.701,36,0.437,37,2.68,38,1.07,40,1.935,41,0.185,42,2.193,43,0.009,44,0.009,51,1.112,527,4.251,703,5.307,711,4.55,761,3.482,790,3.48,791,3.138,792,2.589,855,5.588,856,5.166,889,6.682,890,4.514,891,5.662,892,5.662,893,5.662,894,5.662,895,4.97,896,4.174]],["title/classes/CreatePlaylistDto.html",[0,0.222,897,2.933]],["body/classes/CreatePlaylistDto.html",[0,0.348,2,1.05,3,0.171,4,0.157,5,0.114,6,6.172,7,4.189,9,0.506,10,1.494,13,0.709,14,0.011,15,0.988,16,1.69,22,2.792,28,0.736,36,0.417,37,2.725,38,0.992,40,1.794,41,0.171,42,2.301,43,0.008,44,0.008,51,1.087,243,3.245,270,4.11,303,3.93,773,3.91,791,2.755,792,2.4,795,3.91,806,4.606,821,4.339,822,4.339,875,4.609,878,3.87,897,4.606,898,4.186,899,5.867,900,6.684,901,5.251,902,5.867,903,5.251,904,5.867,905,5.251,906,6.684,907,5.867,908,5.329,909,5.867,910,5.251,911,6.684]],["title/classes/CreateProfileDto.html",[0,0.222,912,2.763]],["body/classes/CreateProfileDto.html",[0,0.361,2,1.112,3,0.182,4,0.166,5,0.121,9,0.536,10,1.55,13,0.668,14,0.011,15,1.008,16,1.593,22,2.701,28,0.694,36,0.433,37,2.659,38,1.051,40,1.901,41,0.182,42,2.169,43,0.008,44,0.008,51,1.106,243,3.332,385,3.054,790,3.452,791,2.857,792,2.543,798,3.611,804,4.883,805,4.435,806,4.777,810,4.883,821,4.5,822,3.611,824,4.435,899,6.085,912,4.5,913,6.628,914,4.1,915,6.932,916,5.563,917,5.563,918,6.932,919,6.932,920,5.563,921,4.883]],["title/classes/CreateProfileFavoriteSongDto.html",[0,0.222,922,3.394]],["body/classes/CreateProfileFavoriteSongDto.html",[0,0.372,2,1.169,3,0.191,4,0.175,5,0.127,8,4.028,9,0.564,10,1.598,12,5.012,13,0.564,14,0.011,15,0.912,16,1.344,17,4.028,18,1.511,21,3.154,22,2.442,28,0.585,29,5.131,36,0.446,37,2.516,38,1.104,39,3.991,40,1.997,41,0.191,42,1.829,43,0.009,44,0.009,385,2.761,386,4.491,922,5.698,923,4.64,924,6.274,925,7.147,926,7.147,927,7.147,928,7.147,929,7.147,930,7.147]],["title/classes/CreateSongDto.html",[0,0.222,931,2.933]],["body/classes/CreateSongDto.html",[0,0.323,2,0.933,3,0.152,4,0.139,5,0.101,8,3.217,9,0.45,10,1.384,13,0.713,14,0.011,15,1.046,16,1.701,17,3.217,18,1.309,21,3.619,22,2.802,28,0.741,36,0.386,37,2.711,38,0.882,39,3.458,40,1.595,41,0.152,42,2.316,43,0.008,44,0.008,51,1.048,68,1.635,195,2.134,240,2.732,263,4.511,321,4.065,635,3.31,646,4.511,773,2.731,791,2.553,792,2.134,795,2.731,806,4.268,821,4.02,822,3.031,878,3.441,931,4.268,932,6.76,933,5.901,934,5.901,935,5.901,936,5.901,937,5.901,938,4.669,939,5.436,940,4.565,941,4.098,942,4.937,943,5.436,944,5.436,945,5.436,946,5.436,947,5.436,948,4.669,949,4.565,950,4.937,951,5.436,952,5.436,953,4.098,954,4.098,955,5.436,956,4.098,957,3.722,958,4.098]],["title/classes/CreateUserDto.html",[0,0.222,959,2.933]],["body/classes/CreateUserDto.html",[0,0.304,2,0.853,3,0.139,4,0.127,5,0.093,9,0.411,10,1.303,13,0.743,14,0.011,15,1.07,16,1.772,17,2.94,18,1.232,22,2.866,28,0.772,36,0.364,37,2.779,38,0.806,39,3.254,40,1.458,41,0.139,42,2.413,43,0.007,44,0.007,47,3.68,50,2.885,51,1.016,52,3.148,213,2.177,224,3.41,760,4.31,765,3.984,767,3.745,768,3.145,772,3.745,773,3.41,781,3.402,782,3.145,783,4.017,784,4.017,785,4.017,789,3.41,790,3.262,791,3.079,792,1.951,793,2.94,794,3.145,795,3.883,796,3.145,797,2.94,798,2.77,799,3.145,800,2.94,859,4.647,880,3.402,882,3.402,957,3.402,959,4.017,960,6.928,961,3.145,962,4.575,963,4.267,964,4.267,965,5.116,966,3.745,967,4.647,968,3.745,969,4.267,970,4.647,971,4.647,972,3.745,973,4.267,974,4.296,975,4.017,976,3.784,977,5.116,978,5.116,979,5.116,980,5.116,981,5.116,982,4.267,983,3.745]],["title/classes/CreateUserPlanDto.html",[0,0.222,984,2.763]],["body/classes/CreateUserPlanDto.html",[0,0.308,2,0.872,3,0.142,4,0.13,5,0.095,9,0.421,10,1.323,13,0.694,14,0.011,15,0.919,16,1.655,22,2.759,28,0.721,36,0.369,37,2.65,38,0.824,40,1.49,41,0.142,42,2.562,43,0.007,44,0.007,51,1.024,213,2.238,251,5.039,320,3.304,334,2.069,630,3.639,644,3.033,790,3.07,791,2.768,792,1.994,820,5.894,827,3.829,883,3.829,895,3.829,896,3.216,976,3.841,984,3.841,985,4.629,986,6.607,987,3.216,988,4.359,989,5.187,990,4.362,991,4.718,992,4.362,993,4.362,994,5.243,995,5.308,996,5.194,997,5.194,998,5.917,999,5.917,1000,5.194,1001,5.194,1002,5.194,1003,5.194,1004,5.194,1005,5.194,1006,4.718,1007,5.194,1008,5.194,1009,5.194,1010,4.718,1011,5.194,1012,5.917,1013,4.078,1014,5.194,1015,5.194,1016,5.917,1017,5.917,1018,4.078,1019,4.362,1020,4.362,1021,4.362,1022,3.829,1023,4.362,1024,4.362,1025,4.362,1026,4.362,1027,3.829,1028,4.362,1029,4.362,1030,4.362,1031,4.362,1032,4.362]],["title/controllers/HomePageController.html",[62,1.223,1033,3.138]],["body/controllers/HomePageController.html",[0,0.241,3,0.151,4,0.138,5,0.101,9,0.447,13,0.667,14,0.011,16,1.416,28,0.617,36,0.503,38,0.875,41,0.151,43,0.008,44,0.008,48,1.303,51,1.004,62,1.77,64,1.331,66,2.119,67,1.721,74,2.237,80,1.721,81,2.12,101,2.119,102,2.198,103,2.198,106,2.283,107,2.198,108,0.851,109,2.198,110,1.369,111,2.923,112,3.165,113,2.119,115,2.119,128,2.198,129,1.493,130,1.409,132,2.817,134,1.721,269,3.79,320,3.441,332,4.247,345,3.695,385,2.675,394,5.52,395,4.771,423,4.247,434,4.543,559,3.944,580,2.588,581,2.85,584,4.068,644,3.159,651,5.409,976,4.001,1006,4.913,1018,5.444,1033,4.543,1034,4.771,1035,4.068,1036,5.409,1037,4.634,1038,6.163,1039,6.924,1040,4.634,1041,5.409,1042,4.068,1043,5.085,1044,4.634,1045,5.409,1046,5.409,1047,6.163,1048,6.163,1049,4.634,1050,4.634,1051,2.85,1052,4.068,1053,4.495,1054,4.068,1055,4.634,1056,4.634,1057,4.634,1058,4.634,1059,4.634,1060,4.634,1061,4.634,1062,4.634]],["title/modules/HomePageModule.html",[149,1.189,368,2.933]],["body/modules/HomePageModule.html",[0,0.297,3,0.186,4,0.17,5,0.124,14,0.011,36,0.511,41,0.186,43,0.009,44,0.009,64,2.022,108,1.047,110,1.685,149,1.966,151,2.274,152,2.719,156,3.328,157,3,158,2.43,159,2.35,161,3.105,162,3.105,163,2.704,164,2.704,166,2.704,167,2.704,168,2.35,368,5.886,394,5.611,395,3.929,1033,5.628,1034,3.929,1053,5.416,1054,5.004,1063,5.004,1064,5.701,1065,5.004,1066,5.701,1067,5.701]],["title/injectables/HomePageService.html",[169,1.156,1053,2.763]],["body/injectables/HomePageService.html",[0,0.146,3,0.092,4,0.084,5,0.061,7,1.439,9,0.271,13,0.565,14,0.011,15,0.986,18,1.702,21,1.238,28,0.587,36,0.366,41,0.092,43,0.005,44,0.005,48,1.239,51,1.143,67,1.201,74,1.019,77,1.385,80,1.637,81,1.502,108,0.515,129,0.904,130,0.853,134,1.201,169,1.168,170,1.196,173,3.238,175,1.283,176,1.331,177,2.338,179,1.833,182,2.04,195,3.954,197,4.067,200,1.439,203,1.331,207,1.238,208,1.238,209,1.331,212,3.238,214,3.305,215,1.726,216,2.576,218,3.481,219,1.966,224,3.058,228,3.9,239,1.898,240,1.238,243,3.062,256,1.61,303,1.5,320,3.528,321,1.642,325,2.464,327,1.822,331,2.792,332,2.964,334,3.395,395,4.354,423,2.964,434,4.32,509,3.854,511,4.589,515,2.464,519,3.775,628,4.182,630,1.726,694,2.464,1018,4.594,1034,4.354,1036,3.775,1042,3.775,1043,4.039,1052,2.464,1053,2.792,1068,2.464,1069,3.775,1070,2.807,1071,3.775,1072,2.807,1073,3.603,1074,4.301,1075,2.807,1076,2.807,1077,2.464,1078,3.429,1079,2.807,1080,4.301,1081,2.807,1082,3.429,1083,2.464,1084,5.86,1085,5.86,1086,5.86,1087,5.86,1088,5.144,1089,5.86,1090,2.807,1091,2.464,1092,2.807,1093,2.807,1094,2.807,1095,2.807,1096,2.807]],["title/injectables/JwtStrategy.html",[169,1.156,601,2.933]],["body/injectables/JwtStrategy.html",[0,0.243,3,0.152,4,0.139,5,0.101,9,0.45,13,0.713,14,0.011,15,0.79,28,0.62,36,0.481,41,0.152,43,0.008,44,0.008,45,2.77,48,1.309,50,2.859,51,0.842,67,1.73,69,2.305,77,1.504,80,1.73,81,1.341,108,0.857,110,1.38,129,1.504,130,1.419,134,1.941,168,1.924,169,1.682,170,1.99,173,3.066,175,2.134,176,2.214,177,2.952,179,2.64,182,2.214,203,2.214,207,2.06,208,2.06,209,2.214,212,3.266,213,1.954,214,3.066,215,2.871,216,3.424,218,3.296,219,2.134,226,3.722,239,2.06,256,2.77,331,3.031,601,4.268,609,4.098,620,3.441,625,4.098,628,3.88,633,4.098,634,4.098,909,4.098,1097,4.098,1098,6.193,1099,4.669,1100,6.193,1101,6.193,1102,4.669,1103,4.669,1104,4.669,1105,4.669,1106,4.669,1107,4.098,1108,2.607,1109,4.669,1110,4.669,1111,4.669,1112,4.669,1113,4.669,1114,4.669,1115,4.669,1116,6.949,1117,4.098,1118,3.722]],["title/classes/LoginAdminDto.html",[0,0.222,546,2.933]],["body/classes/LoginAdminDto.html",[0,0.366,2,1.134,3,0.185,4,0.169,5,0.123,9,0.547,10,1.569,13,0.677,14,0.011,15,1.016,16,1.613,22,2.72,28,0.702,36,0.438,37,2.683,38,1.072,40,1.939,41,0.185,42,2.196,43,0.009,44,0.009,45,2.98,50,3.16,52,3.16,546,4.837,759,4.525,761,3.49,765,3.919,774,5.174,789,4.106,790,3.484,791,2.893,1119,4.946,1120,4.525,1121,5.675,1122,5.174,1123,5.675]],["title/classes/LoginArtistDto.html",[0,0.222,555,2.933]],["body/classes/LoginArtistDto.html",[0,0.366,2,1.134,3,0.185,4,0.169,5,0.123,9,0.547,10,1.569,13,0.677,14,0.011,15,1.016,16,1.613,22,2.72,28,0.702,36,0.438,37,2.683,38,1.072,40,1.939,41,0.185,42,2.196,43,0.009,44,0.009,50,3.16,52,3.16,256,2.98,555,4.837,761,3.49,765,3.919,789,4.106,790,3.484,791,2.893,826,4.183,873,6.161,879,4.981,1119,4.946,1120,4.525,1122,5.174,1124,5.675]],["title/classes/LoginProfileDto.html",[0,0.222,560,2.933]],["body/classes/LoginProfileDto.html",[0,0.377,2,1.191,3,0.194,4,0.178,5,0.129,9,0.574,10,1.616,13,0.574,14,0.011,15,0.922,16,1.369,17,4.104,18,1.528,22,2.47,28,0.596,36,0.451,37,2.545,38,1.125,39,4.037,40,2.035,41,0.194,42,1.864,43,0.009,44,0.009,213,1.909,385,2.793,560,4.982,628,4.346,914,4.39,933,5.764,934,5.764,935,5.764,936,5.764,937,5.764,1119,4.693,1125,5.956]],["title/classes/LoginUserDto.html",[0,0.222,564,2.933]],["body/classes/LoginUserDto.html",[0,0.366,2,1.134,3,0.185,4,0.169,5,0.123,9,0.547,10,1.569,13,0.677,14,0.011,15,1.016,16,1.613,22,2.72,28,0.702,36,0.438,37,2.683,38,1.072,40,1.939,41,0.185,42,2.196,43,0.009,44,0.009,50,3.16,52,3.16,213,2.102,564,4.837,761,3.49,765,3.919,789,4.106,790,3.484,791,2.893,961,4.183,967,5.596,1119,4.946,1120,4.525,1122,5.174,1126,5.675,1127,5.675]],["title/classes/LoginUserResponseDto.html",[0,0.222,577,2.933]],["body/classes/LoginUserResponseDto.html",[0,0.298,2,1.145,3,0.187,4,0.171,5,0.124,9,0.552,10,1.578,13,0.68,14,0.011,15,0.9,16,1.622,22,2.411,28,0.706,36,0.44,37,2.693,38,1.082,41,0.187,42,2.208,43,0.009,44,0.009,168,2.909,213,2.301,221,3.227,552,5.639,571,3.717,577,4.864,1119,4.966,1122,5.202,1128,5.027,1129,7.058,1130,7.058,1131,7.058,1132,7.058,1133,5.727,1134,7.058,1135,5.727]],["title/classes/Music.html",[0,0.222,644,2.182]],["body/classes/Music.html",[0,0.295,2,1.132,3,0.185,4,0.169,5,0.123,9,0.546,10,1.567,13,0.814,14,0.011,15,1.104,18,1.609,28,0.845,41,0.185,43,0.009,44,0.009,48,1.761,49,4.068,51,1.036,53,4.068,55,3.919,242,4.941,263,4.941,644,3.593,1136,4.97,1137,7.612,1138,5.662,1139,5.662,1140,5.662,1141,5.662,1142,5.662,1143,5.662,1144,5.662]],["title/classes/Playlist.html",[0,0.222,7,2.182]],["body/classes/Playlist.html",[0,0.295,2,1.132,3,0.185,4,0.169,5,0.123,7,3.593,9,0.546,10,1.567,13,0.814,14,0.011,15,1.088,18,1.609,28,0.845,41,0.185,43,0.009,44,0.009,48,1.761,49,4.068,51,1.036,53,4.068,55,3.919,243,3.359,303,4.068,628,4.25,904,6.152,1145,4.97,1146,5.662,1147,5.662,1148,5.662,1149,5.662,1150,5.662,1151,5.662,1152,5.662]],["title/controllers/PlaylistController.html",[62,1.223,1153,3.138]],["body/controllers/PlaylistController.html",[0,0.123,1,4.797,3,0.077,4,0.071,5,0.051,7,4.166,9,0.228,11,7.17,13,0.714,14,0.011,15,1.011,16,1.674,18,1.428,20,2.772,21,2.738,28,0.729,36,0.454,38,0.446,41,0.077,43,0.005,44,0.005,45,2.853,48,1.539,51,0.991,62,0.679,64,0.679,66,1.08,67,1.05,68,1.784,69,2.458,74,2.643,76,1.742,77,1.211,80,2.034,81,2.092,98,1.853,99,4.173,101,2.837,102,1.121,103,1.121,104,1.211,105,1.211,106,1.164,107,1.121,108,0.434,109,1.121,110,0.698,111,1.783,112,3.388,113,1.08,114,2.502,115,1.719,116,1.382,121,1.453,123,0.913,128,1.121,129,0.761,130,0.719,131,1.629,132,3.329,134,2.034,146,2.736,213,2.092,269,3.282,303,2.009,385,3.083,386,2.98,401,3.934,447,1.453,459,1.742,559,4.623,580,3.886,581,1.453,715,2.074,717,1.884,897,4.484,976,3.465,1018,3.678,1051,1.453,1153,2.772,1154,2.074,1155,4.683,1156,4.683,1157,4.683,1158,4.683,1159,3.76,1160,4.683,1161,4.683,1162,4.683,1163,4.683,1164,2.363,1165,3.76,1166,3.76,1167,4.028,1168,2.363,1169,2.363,1170,2.363,1171,6.754,1172,3.76,1173,3.76,1174,2.363,1175,1.884,1176,2.363,1177,1.884,1178,2.363,1179,3.733,1180,2.363,1181,2.363,1182,3.3,1183,2.363,1184,2.363,1185,3.76,1186,2.363,1187,2.363,1188,2.363,1189,2.363,1190,2.363,1191,3.3,1192,3.76,1193,2.363,1194,2.363,1195,3.76,1196,2.363,1197,4.685,1198,2.363,1199,2.363,1200,3.76,1201,2.363,1202,2.363,1203,2.363,1204,3.934,1205,2.363,1206,2.363,1207,1.884,1208,3.3,1209,3.452,1210,2.074,1211,2.363,1212,2.363,1213,2.363,1214,5.385,1215,5.549,1216,2.363,1217,2.363,1218,2.363,1219,6.205,1220,2.363,1221,2.363,1222,2.363,1223,2.363,1224,2.363,1225,2.363,1226,2.363,1227,3.76,1228,2.363,1229,2.363,1230,2.363,1231,2.363,1232,2.363,1233,2.363]],["title/modules/PlaylistModule.html",[149,1.189,369,2.933]],["body/modules/PlaylistModule.html",[0,0.3,3,0.188,4,0.172,5,0.125,14,0.011,36,0.513,41,0.188,43,0.009,44,0.009,64,2.033,108,1.056,110,1.7,149,1.977,151,2.295,152,2.734,156,3.335,157,3.017,158,2.452,159,2.371,161,3.123,162,3.123,163,2.728,164,2.728,166,2.728,167,2.728,168,2.371,369,5.896,1153,5.651,1209,6.163,1210,5.05,1234,5.05,1235,5.05,1236,5.753,1237,5.753,1238,5.753]],["title/modules/PrismaModule.html",[149,1.189,156,1.698]],["body/modules/PrismaModule.html",[0,0.316,3,0.198,4,0.181,5,0.132,14,0.011,36,0.456,41,0.198,43,0.009,44,0.009,108,1.114,149,2.042,151,2.422,152,2.825,156,3.417,157,3.117,158,2.588,159,2.502,161,3.227,177,3.517,1239,5.329,1240,5.329,1241,5.329,1242,6.07,1243,7.313,1244,6.07]],["title/injectables/PrismaService.html",[169,1.156,177,1.698]],["body/injectables/PrismaService.html",[0,0.298,3,0.187,4,0.171,5,0.124,9,0.552,13,0.552,14,0.011,28,0.706,36,0.44,41,0.187,43,0.009,44,0.009,48,1.211,51,0.779,67,1.971,80,1.599,81,2.027,108,1.051,169,1.917,170,2.441,173,3.734,177,2.815,201,3.06,214,3.114,1108,3.941,1245,5.027,1246,6.715,1247,7.058,1248,8.352,1249,7.058,1250,7.986,1251,5.727,1252,5.727,1253,5.727,1254,5.727,1255,5.727,1256,5.727,1257,5.727]],["title/classes/Profile.html",[0,0.222,385,1.644]],["body/classes/Profile.html",[0,0.301,2,1.155,3,0.189,4,0.173,5,0.125,9,0.557,10,1.587,13,0.807,14,0.011,15,1.092,18,1.624,28,0.838,41,0.189,43,0.009,44,0.009,48,1.77,49,4.105,51,1.045,53,4.105,55,3.947,243,3.389,385,2.742,1073,5.293,1258,5.073,1259,5.779,1260,5.779,1261,5.779,1262,5.779,1263,5.779,1264,5.779]],["title/controllers/ProfileController.html",[62,1.223,1265,3.138]],["body/controllers/ProfileController.html",[0,0.209,3,0.131,4,0.12,5,0.087,9,0.387,13,0.705,14,0.011,16,1.598,18,1.47,28,0.696,36,0.502,38,0.759,41,0.131,43,0.007,44,0.007,48,1.47,51,0.946,62,1.154,64,1.154,66,1.836,67,1.561,68,1.93,69,2.424,70,2.159,72,2.407,74,2.874,77,1.801,80,1.942,81,1.997,89,4.457,98,2.754,99,4.067,101,2.94,102,1.905,103,1.905,104,2.059,105,2.059,106,1.979,107,1.905,108,0.737,109,1.905,110,1.187,111,2.651,112,3.342,113,1.836,115,1.836,121,1.551,123,1.551,128,1.905,129,1.294,130,1.221,132,3.179,134,1.942,146,2.059,213,2.193,258,2.96,284,2.96,385,3.059,559,4.63,571,2.607,576,3.852,580,3.59,581,2.469,630,3.437,650,3.202,666,2.96,912,4.514,1051,2.469,1175,3.202,1177,3.202,1179,3.202,1182,3.525,1214,4.457,1215,4.457,1265,4.121,1266,3.525,1267,4.016,1268,4.016,1269,4.016,1270,3.525,1271,4.016,1272,4.016,1273,4.791,1274,4.016,1275,4.016,1276,4.174,1277,3.525,1278,3.525,1279,4.016,1280,4.016,1281,3.202,1282,4.016,1283,3.525,1284,4.016,1285,4.016,1286,4.016]],["title/classes/ProfileFavoriteSong.html",[0,0.222,1287,3.394]],["body/classes/ProfileFavoriteSong.html",[0,0.349,2,1.339,3,0.219,4,0.2,5,0.145,14,0.01,41,0.219,43,0.009,44,0.009,386,4.327,923,4.348,1287,6.179,1288,5.879,1289,5.879]],["title/controllers/ProfileFavoriteSongController.html",[62,1.223,1290,3.138]],["body/controllers/ProfileFavoriteSongController.html",[0,0.22,3,0.138,4,0.126,5,0.092,9,0.407,13,0.685,14,0.011,15,0.981,16,1.518,20,4.267,21,3.284,28,0.661,36,0.48,38,0.798,41,0.138,43,0.007,44,0.007,48,1.396,51,0.898,62,1.213,64,1.213,66,1.931,67,1.617,68,1.744,69,2.356,70,2.236,80,1.844,81,1.897,102,2.003,103,2.003,104,2.165,105,2.165,107,2.003,108,0.775,109,2.003,110,1.248,111,2.745,112,3.248,113,1.931,115,1.931,128,2.003,130,1.284,132,3.019,134,1.844,146,2.165,175,1.931,213,1.966,269,3.559,303,2.257,385,3.096,386,4.593,387,4.896,427,3.386,559,4.577,580,3.687,581,2.597,644,2.967,650,3.367,666,3.113,923,4.612,1005,3.707,1051,2.597,1175,3.367,1177,3.367,1179,3.367,1214,5.265,1215,5.265,1270,3.707,1278,3.707,1281,3.367,1290,4.267,1291,3.707,1292,7.104,1293,4.224,1294,7.687,1295,4.224,1296,7.104,1297,4.224,1298,4.224,1299,4.224,1300,3.758,1301,3.113,1302,4.224,1303,4.224,1304,4.224,1305,5.081,1306,4.224,1307,4.224,1308,4.224,1309,4.224]],["title/modules/ProfileFavoriteSongModule.html",[149,1.189,370,2.933]],["body/modules/ProfileFavoriteSongModule.html",[0,0.294,3,0.184,4,0.169,5,0.123,14,0.011,36,0.51,41,0.184,43,0.009,44,0.009,64,2.01,108,1.037,110,1.67,149,1.955,151,2.254,152,2.704,156,3.321,157,2.983,158,2.408,159,2.329,161,3.088,162,3.088,163,2.68,164,2.68,166,2.68,167,2.68,168,2.329,370,5.876,385,2.704,386,4.438,387,3.893,923,3.668,1290,5.605,1300,5.404,1301,4.165,1310,4.959,1311,4.959,1312,5.65,1313,5.65,1314,4.959]],["title/injectables/ProfileFavoriteSongService.html",[169,1.156,1300,2.763]],["body/injectables/ProfileFavoriteSongService.html",[0,0.146,3,0.092,4,0.084,5,0.061,9,0.271,12,5.265,13,0.669,14,0.011,15,1.108,18,1.688,21,2.943,28,0.695,36,0.395,41,0.092,43,0.005,44,0.005,48,1.468,51,1.086,67,1.202,68,1.382,69,1.735,70,1.663,77,1.889,80,1.939,81,1.916,108,0.516,129,0.905,130,0.854,134,1.638,169,1.169,170,1.198,173,3.602,175,1.285,176,1.333,177,2.339,179,2.23,182,2.781,195,3.733,197,3.809,200,1.441,201,1.502,203,1.333,207,1.24,208,1.24,209,1.333,212,2.789,214,3.362,215,1.728,216,2.578,218,2.998,219,2.681,221,1.968,225,2.518,239,2.587,240,1.899,243,1.899,256,1.611,320,3.274,321,2.518,334,2.481,385,2.265,386,4.559,387,4.935,514,2.518,628,4.653,630,1.728,923,4.649,1073,4.357,1078,3.432,1300,2.794,1315,2.467,1316,4.304,1317,4.304,1318,4.304,1319,2.81,1320,3.778,1321,2.81,1322,3.778,1323,2.81,1324,3.778,1325,2.81,1326,4.304,1327,2.81,1328,4.304,1329,2.81,1330,4.304,1331,2.81,1332,1.936,1333,2.467,1334,4.593,1335,2.81,1336,5.232,1337,2.81,1338,4.304,1339,4.304,1340,2.81,1341,2.81,1342,2.81,1343,4.304,1344,2.81,1345,2.467,1346,2.81,1347,2.81,1348,2.81,1349,2.467]],["title/modules/ProfileModule.html",[149,1.189,371,2.933]],["body/modules/ProfileModule.html",[0,0.3,3,0.188,4,0.172,5,0.125,14,0.011,36,0.513,41,0.188,43,0.009,44,0.009,64,2.033,108,1.056,110,1.7,149,1.977,151,2.295,152,2.734,156,3.335,157,3.017,158,2.452,159,2.371,161,3.123,162,3.123,163,2.728,164,2.728,166,2.728,167,2.728,168,2.371,371,5.896,1265,5.651,1276,5.428,1277,5.05,1350,5.05,1351,5.753,1352,5.05,1353,5.753,1354,5.753]],["title/injectables/ProfileService.html",[169,1.156,1276,2.763]],["body/injectables/ProfileService.html",[0,0.168,3,0.105,4,0.096,5,0.07,9,0.311,13,0.701,14,0.011,15,1.089,18,1.684,28,0.703,36,0.466,41,0.105,43,0.006,44,0.006,48,1.485,51,1.055,67,1.333,68,1.501,69,1.885,70,1.843,72,2.127,74,2.709,77,1.831,80,1.962,81,1.927,108,0.591,121,1.245,123,1.245,129,1.038,130,0.98,134,1.755,169,1.296,170,1.373,173,3.611,175,1.473,176,1.528,177,2.506,179,2.423,182,2.98,195,3.679,197,3.757,200,1.652,201,1.722,203,1.528,207,1.422,208,1.422,209,1.528,212,2.96,213,1.771,214,3.099,215,3.495,216,2.8,218,3.332,219,2.598,221,2.873,225,1.885,231,2.092,239,2.105,243,2.508,334,2.263,385,2.195,514,1.885,576,3.288,620,3.518,628,4.534,630,3.495,912,4.079,988,2.092,1041,2.828,1069,4.189,1071,4.189,1073,5.254,1077,4.189,1078,4.531,1273,4.33,1276,3.098,1320,4.189,1322,4.189,1324,4.189,1332,2.22,1333,2.828,1334,4.189,1345,2.828,1355,2.828,1356,3.222,1357,3.222,1358,3.222,1359,3.222,1360,3.222,1361,4.772,1362,3.222,1363,3.222,1364,1.885,1365,4.772,1366,3.222,1367,3.222,1368,3.222,1369,2.375,1370,3.222,1371,3.222,1372,3.222]],["title/classes/SearchDto.html",[0,0.222,1043,2.933]],["body/classes/SearchDto.html",[0,0.376,2,1.185,3,0.194,4,0.177,5,0.129,7,3.696,9,0.571,10,1.611,13,0.571,14,0.011,15,0.92,16,1.363,21,3.181,22,2.463,28,0.593,36,0.45,37,2.538,38,1.12,40,2.025,41,0.194,42,1.855,43,0.009,44,0.009,51,1.099,240,3.181,256,2.698,269,4.777,761,3.645,790,3.296,791,2.971,1034,4.968,1043,4.968,1373,5.204,1374,6.328,1375,7.209,1376,5.928]],["title/controllers/SongController.html",[62,1.223,1377,3.138]],["body/controllers/SongController.html",[0,0.192,3,0.12,4,0.11,5,0.08,9,0.354,12,5.252,13,0.682,14,0.011,15,1.005,16,1.625,18,1.414,21,3.477,28,0.708,36,0.499,38,0.695,41,0.12,43,0.006,44,0.006,48,1.495,51,0.962,62,1.056,64,1.056,66,1.681,67,1.467,68,1.766,69,2.033,70,2.029,71,2.402,72,2.294,74,2.81,76,2.71,80,1.975,81,2.031,98,2.588,99,3.073,101,2.802,102,1.744,103,1.744,104,1.885,105,1.885,106,1.812,107,1.744,108,0.675,109,1.744,110,1.086,111,2.491,112,3.363,113,1.681,115,2.402,121,1.42,123,1.42,128,1.744,129,1.184,130,1.118,131,2.534,132,3.233,134,1.975,146,1.885,213,2.207,240,2.318,255,3.227,256,3.267,259,4.611,260,4.188,262,2.931,272,2.931,276,2.931,277,3.41,278,2.71,285,3.227,294,2.931,320,2.933,346,3.41,427,3.073,433,3.41,459,2.71,571,2.387,580,2.053,581,2.261,717,2.931,931,4.608,1207,4.188,1281,2.931,1301,2.71,1305,5.38,1377,3.872,1378,3.227,1379,3.677,1380,3.677,1381,3.677,1382,3.677,1383,3.677,1384,3.677,1385,3.677,1386,3.677,1387,4.608,1388,3.677,1389,3.677,1390,3.979,1391,3.677,1392,3.677,1393,3.677,1394,3.677,1395,3.677,1396,3.677,1397,3.677,1398,3.677,1399,3.677,1400,3.677,1401,3.677]],["title/modules/SongModule.html",[149,1.189,372,2.933]],["body/modules/SongModule.html",[0,0.3,3,0.188,4,0.172,5,0.125,14,0.011,36,0.513,41,0.188,43,0.009,44,0.009,64,2.033,108,1.056,110,1.7,149,1.977,151,2.295,152,2.734,156,3.335,157,3.017,158,2.452,159,2.371,161,3.123,162,3.123,163,2.728,164,2.728,166,2.728,167,2.728,168,2.371,372,5.896,1301,4.24,1314,5.05,1377,5.651,1390,5.428,1402,5.05,1403,5.753,1404,5.05,1405,5.753]],["title/injectables/SongService.html",[169,1.156,1390,2.763]],["body/injectables/SongService.html",[0,0.123,3,0.077,4,0.071,5,0.051,9,0.228,12,5.146,13,0.672,14,0.011,15,1.079,18,1.75,21,2.574,28,0.714,36,0.388,41,0.077,43,0.005,44,0.005,48,1.473,51,1.126,67,1.052,68,1.239,69,1.556,70,2.065,71,1.723,72,1.756,74,2.255,77,2.001,80,1.945,81,2.001,108,0.435,121,0.915,123,0.915,129,0.763,130,0.721,134,1.819,169,1.023,170,1.01,173,3.666,174,2.597,175,1.083,176,1.124,177,2.132,179,2,182,3.09,195,3.9,197,3.96,200,1.215,201,1.266,203,1.124,207,1.046,208,1.046,209,1.124,212,2.983,214,3.272,216,1.857,218,3.09,219,2.84,221,2.84,225,2.204,228,2.204,239,2.741,240,2.741,242,4.229,243,2.359,256,2.001,263,3.045,308,3.308,310,3.004,320,3.469,321,3.955,327,2.446,328,2.08,331,2.446,334,2.225,503,3.004,512,2.08,514,2.204,635,3.118,646,3.47,701,5.121,931,3.684,1083,5.121,1091,3.308,1207,3.004,1349,3.308,1387,3.684,1390,2.446,1406,2.08,1407,3.308,1408,3.308,1409,3.768,1410,2.37,1411,3.768,1412,2.37,1413,3.768,1414,2.37,1415,3.768,1416,2.37,1417,2.37,1418,2.37,1419,3.768,1420,2.37,1421,3.768,1422,2.37,1423,3.768,1424,2.37,1425,3.768,1426,2.37,1427,2.37,1428,2.37,1429,2.37,1430,2.37,1431,3.768,1432,2.37,1433,3.768,1434,3.768,1435,2.37,1436,2.37,1437,2.37,1438,2.37,1439,2.37,1440,2.37,1441,2.37]],["title/classes/UpdateAdminDto.html",[0,0.222,96,2.933]],["body/classes/UpdateAdminDto.html",[0,0.325,2,0.942,3,0.154,4,0.141,5,0.102,9,0.454,10,1.393,13,0.716,14,0.011,15,1.048,16,1.707,22,2.808,28,0.743,36,0.389,37,2.72,38,0.89,40,1.61,41,0.154,42,2.324,43,0.008,44,0.008,45,2.971,48,1.678,50,2.984,51,0.95,52,2.697,96,4.294,213,1.645,760,4.532,762,5.469,763,4.968,764,6.966,765,4.148,773,3.645,774,4.593,777,5.469,778,5.469,779,4.968,782,3.473,783,4.294,784,4.294,785,4.294,786,5.469,787,4.136,789,3.645,790,3.192,791,3.062,792,2.154,793,3.247,794,3.473,795,4.084,798,3.059,799,3.473,800,3.247,801,4.136,1442,6.781,1443,4.136,1444,4.712,1445,4.712,1446,4.712,1447,4.712,1448,4.712,1449,4.712,1450,4.712,1451,4.712,1452,6.159]],["title/classes/UpdateAlbumDto.html",[0,0.222,273,2.933]],["body/classes/UpdateAlbumDto.html",[0,0.34,2,1.304,3,0.213,4,0.195,5,0.142,14,0.011,36,0.476,38,1.233,41,0.213,43,0.009,44,0.009,68,1.723,257,4.236,273,5.26,281,5.202,803,5.202,1108,3.643,1453,5.728,1454,4.012,1455,6.525]],["title/classes/UpdateArtistDto.html",[0,0.222,444,2.933]],["body/classes/UpdateArtistDto.html",[0,0.34,2,1.304,3,0.213,4,0.195,5,0.142,14,0.011,36,0.476,38,1.233,41,0.213,43,0.009,44,0.009,68,1.723,424,4.236,444,5.26,450,4.497,826,4.81,1108,3.643,1454,4.012,1456,5.728,1457,6.525]],["title/classes/UpdateCategoryDto.html",[0,0.222,656,2.933]],["body/classes/UpdateCategoryDto.html",[0,0.34,2,1.304,3,0.213,4,0.195,5,0.142,14,0.011,36,0.476,38,1.233,41,0.213,43,0.009,44,0.009,68,1.723,643,4.236,656,5.26,661,5.202,885,5.202,1108,3.643,1454,4.012,1458,5.728,1459,6.525]],["title/classes/UpdateCountryDto.html",[0,0.222,722,2.933]],["body/classes/UpdateCountryDto.html",[0,0.34,2,1.304,3,0.213,4,0.195,5,0.142,14,0.011,36,0.476,38,1.233,41,0.213,43,0.009,44,0.009,68,1.723,711,4.236,722,5.26,727,5.202,890,5.202,1108,3.643,1454,4.012,1460,5.728,1461,6.525]],["title/classes/UpdatePlanDto.html",[0,0.222,1462,2.933]],["body/classes/UpdatePlanDto.html",[0,0.374,2,1.179,3,0.193,4,0.176,5,0.128,9,0.569,10,1.607,13,0.569,14,0.011,15,0.917,16,1.356,18,1.52,22,2.456,28,0.591,36,0.449,37,2.531,38,1.115,39,4.014,40,2.016,41,0.193,42,1.846,43,0.009,44,0.009,962,5.342,974,5.299,975,4.954,976,4.666,977,6.31,978,6.31,979,6.31,980,6.31,981,6.31,987,4.349,1022,5.179,1452,5.731,1462,4.954,1463,5.731,1464,5.9]],["title/classes/UpdatePlaylistDto.html",[0,0.222,1204,3.138]],["body/classes/UpdatePlaylistDto.html",[0,0.34,2,1.304,3,0.213,4,0.195,5,0.142,14,0.011,36,0.476,38,1.233,41,0.213,43,0.009,44,0.009,68,1.723,897,4.497,898,5.202,1108,3.643,1204,5.627,1208,5.728,1454,4.012,1465,5.728,1466,6.525]],["title/classes/UpdateProfileDto.html",[0,0.222,1273,2.933]],["body/classes/UpdateProfileDto.html",[0,0.34,2,1.304,3,0.213,4,0.195,5,0.142,14,0.011,36,0.476,38,1.233,41,0.213,43,0.009,44,0.009,68,1.723,576,4.497,912,4.236,914,4.81,1108,3.643,1273,5.26,1454,4.012,1467,5.728,1468,6.525]],["title/classes/UpdateSongDto.html",[0,0.222,1387,2.933]],["body/classes/UpdateSongDto.html",[0,0.336,2,0.994,3,0.162,4,0.148,5,0.108,8,3.426,9,0.479,10,1.443,13,0.691,14,0.011,15,1.028,16,1.647,18,1.365,21,3.554,22,2.752,28,0.717,36,0.403,37,2.67,38,0.939,39,2.776,40,1.699,41,0.162,42,2.242,43,0.008,44,0.008,51,1.069,68,1.704,195,2.273,321,4.192,635,3.449,646,4.652,773,2.908,791,2.66,792,2.273,795,2.908,806,4.447,821,4.19,822,3.227,878,3.665,933,5.145,934,5.145,935,5.145,936,5.145,937,5.145,939,5.665,940,4.757,941,4.364,942,5.145,943,5.665,944,5.665,945,5.665,946,5.665,947,5.665,949,4.757,950,5.145,951,5.665,952,5.665,953,4.364,954,4.364,955,5.665,956,4.364,957,3.964,958,4.364,1387,4.447,1469,6.657,1470,4.972]],["title/classes/UpdateUserDto.html",[0,0.222,1471,2.933]],["body/classes/UpdateUserDto.html",[0,0.318,2,0.913,3,0.149,4,0.136,5,0.099,9,0.44,10,1.364,13,0.737,14,0.011,15,1.065,16,1.757,22,2.853,28,0.765,36,0.381,37,2.77,38,0.863,40,1.56,41,0.149,42,2.392,43,0.007,44,0.007,47,3.767,50,2.954,51,1.04,52,3.193,213,2.205,224,3.57,760,4.462,765,4.096,768,3.367,773,2.672,783,4.206,784,4.206,785,4.206,789,3.57,790,3.142,791,3.151,792,2.088,793,3.147,794,3.367,795,2.672,796,3.367,797,3.147,800,3.147,859,4.866,880,3.641,882,3.641,961,3.367,965,5.357,966,4.009,967,4.866,968,4.009,970,4.866,971,4.866,972,4.009,983,4.009,1452,6.272,1463,6.272,1471,4.206,1472,4.567,1473,4.567,1474,4.567,1475,4.567,1476,4.567,1477,4.567,1478,4.567,1479,4.567]],["title/classes/UpdateUserPlanDto.html",[0,0.222,1480,2.933]],["body/classes/UpdateUserPlanDto.html",[0,0.337,2,1.294,3,0.211,4,0.193,5,0.141,14,0.011,36,0.474,38,1.223,41,0.211,43,0.009,44,0.009,68,1.71,213,2.007,984,4.203,985,3.982,987,4.773,1108,3.615,1454,3.982,1480,5.237,1481,5.684,1482,4.462,1483,6.475]],["title/classes/User.html",[0,0.222,213,1.124]],["body/classes/User.html",[0,0.282,2,1.083,3,0.177,4,0.162,5,0.118,9,0.522,10,1.524,13,0.823,14,0.011,15,1.117,18,1.578,28,0.854,41,0.177,43,0.008,44,0.008,47,3.677,48,1.788,49,3.988,50,2.883,51,1.015,52,2.883,53,3.988,55,3.858,213,1.801,407,6.55,962,5.142,1484,4.757,1485,5.419,1486,5.419,1487,5.419,1488,5.419,1489,5.419,1490,5.419,1491,5.419,1492,5.419,1493,5.419]],["title/controllers/UserController.html",[62,1.223,1494,3.138]],["body/controllers/UserController.html",[0,0.162,3,0.102,4,0.093,5,0.068,9,0.3,13,0.728,14,0.011,15,0.885,16,1.698,18,1.626,28,0.739,36,0.487,38,0.588,41,0.102,43,0.006,44,0.006,45,3.161,48,1.562,51,1.005,62,0.894,64,0.894,66,1.422,67,1.298,68,1.631,69,1.032,70,1.796,74,2.791,77,1.498,80,2.063,81,2.122,86,2.731,98,3.043,99,4.322,101,2.545,102,1.475,103,1.475,104,1.595,105,1.595,106,1.533,107,1.475,108,0.571,109,1.475,110,0.919,111,3.504,112,3.453,113,1.422,114,1.663,115,2.125,116,1.82,121,1.202,123,1.796,128,3.409,129,1.002,130,0.946,132,3.378,134,2.063,146,2.383,180,1.82,213,2.238,258,2.293,284,2.293,346,4.009,385,1.202,427,3.613,433,3.018,447,1.913,454,2.731,469,4.081,559,4.495,579,3.427,580,3.108,581,1.913,666,2.293,959,4.256,994,3.613,1051,1.913,1167,3.018,1283,5.421,1369,4.872,1462,4.256,1471,4.256,1482,2.144,1494,3.427,1495,2.731,1496,4.081,1497,4.081,1498,4.081,1499,4.081,1500,4.886,1501,4.886,1502,3.111,1503,3.111,1504,3.111,1505,3.111,1506,3.111,1507,3.111,1508,3.111,1509,3.111,1510,3.111,1511,3.111,1512,4.649,1513,4.649,1514,3.111,1515,3.111,1516,3.111,1517,3.111,1518,3.111,1519,3.111,1520,3.111,1521,3.111,1522,3.111,1523,3.613,1524,2.731,1525,2.731,1526,2.731,1527,3.111,1528,3.111,1529,3.111,1530,3.111,1531,3.111,1532,3.111,1533,3.111,1534,4.081,1535,3.111,1536,3.111,1537,3.111,1538,3.111,1539,3.111,1540,3.111,1541,3.111,1542,3.111]],["title/modules/UserModule.html",[149,1.189,373,2.933]],["body/modules/UserModule.html",[0,0.3,3,0.188,4,0.172,5,0.125,14,0.011,36,0.513,41,0.188,43,0.009,44,0.009,64,2.033,108,1.056,110,1.7,149,1.977,151,2.295,152,2.734,156,3.335,157,3.017,158,2.452,159,2.371,161,3.123,162,3.123,163,2.728,164,2.728,166,2.728,167,2.728,168,2.371,373,5.896,1494,5.651,1523,5.428,1524,5.05,1543,5.05,1544,5.05,1545,5.753,1546,5.753,1547,5.753]],["title/classes/UserPlan.html",[0,0.222,1364,2.49]],["body/classes/UserPlan.html",[0,0.285,2,1.093,3,0.178,4,0.163,5,0.119,9,0.527,10,1.533,13,0.808,14,0.011,15,1.053,18,1.584,28,0.839,41,0.178,42,2.344,43,0.008,44,0.008,48,1.746,49,4.004,51,1.019,53,4.004,55,3.87,251,5.099,985,5.21,988,4.863,989,5.163,1364,4.011,1548,7.437,1549,4.798,1550,5.466,1551,5.466,1552,5.466,1553,5.466,1554,5.466,1555,5.466,1556,5.466]],["title/controllers/UserPlanController.html",[62,1.223,1557,3.138]],["body/controllers/UserPlanController.html",[0,0.194,3,0.122,4,0.111,5,0.081,9,0.36,13,0.649,14,0.011,15,1.009,16,1.635,18,1.76,28,0.712,36,0.485,38,0.705,41,0.122,43,0.006,44,0.006,45,3.227,48,1.423,51,0.916,62,1.072,64,1.072,66,1.706,67,1.482,68,1.777,69,2.049,70,2.6,71,2.427,72,2.313,73,2.75,74,2.76,77,1.71,80,1.88,81,2.043,82,2.75,95,2.75,98,2.615,101,2.825,102,1.77,103,1.77,104,1.913,105,1.913,106,2.615,107,1.77,108,0.685,109,1.77,110,1.103,111,3.192,112,3.379,113,1.706,114,2.837,115,1.706,116,2.183,121,1.441,123,1.441,128,2.931,129,1.202,130,1.134,132,3.251,134,1.986,146,1.913,188,2.294,213,2.164,270,4.139,345,2.975,346,3.446,391,5.093,427,3.105,433,3.446,447,2.294,664,2.975,675,2.975,974,3.913,984,4.369,985,4.545,994,5.268,1167,3.446,1480,4.638,1482,3.658,1525,3.275,1526,3.275,1534,4.659,1557,3.913,1558,3.275,1559,3.731,1560,3.731,1561,3.731,1562,3.731,1563,3.731,1564,3.731,1565,3.731,1566,3.731,1567,3.731,1568,4.011,1569,3.275,1570,3.731,1571,3.731,1572,3.731,1573,3.731,1574,3.731,1575,3.731,1576,3.731,1577,3.731,1578,3.731]],["title/modules/UserPlanModule.html",[149,1.189,374,2.933]],["body/modules/UserPlanModule.html",[0,0.297,3,0.186,4,0.17,5,0.124,14,0.011,36,0.511,41,0.186,43,0.009,44,0.009,64,2.022,108,1.047,110,1.685,149,1.966,151,2.274,152,2.719,156,3.328,157,3,158,2.43,159,2.35,161,3.105,162,3.105,163,2.704,164,2.704,166,2.704,167,2.704,168,2.35,213,1.859,374,5.886,391,3.929,985,3.505,1557,5.628,1568,5.416,1569,5.004,1579,5.004,1580,5.701,1581,5.004,1582,5.701,1583,5.701]],["title/injectables/UserPlanService.html",[169,1.156,1568,2.763]],["body/injectables/UserPlanService.html",[0,0.193,3,0.121,4,0.111,5,0.081,9,0.358,13,0.711,14,0.011,15,1.044,18,1.641,28,0.76,36,0.46,41,0.121,43,0.006,44,0.006,48,1.56,51,1.033,67,1.476,68,1.396,69,1.753,70,2.593,71,2.417,72,2.305,74,2.677,77,1.703,80,2.06,81,2.119,108,0.681,121,1.433,123,1.433,129,1.195,130,1.128,134,1.875,169,1.435,170,1.581,173,3.749,175,1.696,176,1.759,177,2.678,179,2.253,180,3.092,182,3.184,183,4.214,188,3.25,190,4.214,195,3.069,197,1.827,200,1.901,203,1.759,207,1.637,208,1.637,209,1.759,212,2.962,213,1.626,214,3.484,216,1.827,218,3.366,219,2.417,221,3.069,228,2.17,231,2.408,239,2.332,334,1.759,391,5.348,514,2.17,962,3.643,984,4.606,985,4.772,988,2.408,989,2.556,994,3.431,1364,4.151,1480,4.626,1482,3.643,1568,3.431,1584,3.256,1585,5.286,1586,3.709,1587,3.709,1588,3.709,1589,3.709,1590,3.709,1591,3.709,1592,5.286,1593,3.709,1594,3.709,1595,3.709,1596,3.709,1597,6.159,1598,3.709,1599,6.159,1600,3.709,1601,3.256,1602,3.256]],["title/classes/UserProfileId.html",[0,0.222,559,2.275]],["body/classes/UserProfileId.html",[0,0.381,2,1.213,3,0.198,4,0.181,5,0.132,9,0.585,10,1.635,13,0.705,14,0.011,15,0.933,16,1.395,28,0.732,36,0.456,39,4.382,40,2.074,41,0.198,43,0.009,44,0.009,213,2.236,385,3.032,559,3.908,571,3.941,628,4.382,1051,4.826,1603,5.329,1604,6.07,1605,6.07]],["title/injectables/UserService.html",[169,1.156,1523,2.763]],["body/injectables/UserService.html",[0,0.138,3,0.087,4,0.079,5,0.058,9,0.256,13,0.711,14,0.011,15,1.064,18,1.698,28,0.752,36,0.46,41,0.087,43,0.005,44,0.005,47,2.029,48,1.56,50,2.379,51,1.119,52,1.025,67,1.15,68,1.333,69,1.366,70,2.198,72,1.542,74,2.62,77,1.626,80,2.06,81,2.119,108,0.487,121,1.025,123,1.591,129,0.855,130,0.807,134,1.899,169,1.118,170,1.131,173,3.749,174,2.838,175,1.213,176,1.259,177,2.269,179,2.152,180,2.409,182,3.225,195,3.797,196,1.723,197,3.556,200,1.36,201,1.418,202,2.838,203,1.259,204,1.829,205,1.829,206,2.116,207,1.171,208,1.171,209,1.259,210,3.284,211,4.536,212,2.876,213,1.088,214,3.568,215,3.787,216,1.307,217,2.116,218,3.225,219,2.308,221,2.98,223,2.116,224,2.409,225,2.409,228,1.552,229,3.284,230,2.116,231,2.674,232,3.284,238,2.329,239,2.227,243,1.171,327,3.277,334,1.259,503,2.116,505,2.329,514,1.552,525,2.329,579,3.036,630,1.632,959,3.92,962,2.838,988,2.674,994,3.277,1073,5.083,1167,1.723,1364,3.328,1462,3.92,1471,3.92,1482,1.829,1496,3.615,1497,3.615,1498,3.615,1499,3.615,1500,3.615,1501,3.615,1523,2.674,1601,2.329,1602,2.329,1606,2.329,1607,4.119,1608,2.654,1609,2.654,1610,4.119,1611,2.654,1612,4.119,1613,2.654,1614,2.654,1615,4.119,1616,2.654,1617,4.119,1618,2.654,1619,4.119,1620,2.654,1621,4.119,1622,2.654,1623,4.119,1624,2.654,1625,4.119,1626,2.654,1627,2.654,1628,4.119,1629,2.654,1630,2.654,1631,4.119,1632,2.654,1633,5.689,1634,4.119]],["title/changelog.html",[1635,2.446,1636,2.446,1637,3.116]],["body/changelog.html",[5,0.114,7,2.686,12,3.401,14,0.008,18,1.411,21,2.945,42,2.299,43,0.008,44,0.008,51,0.908,52,2.024,70,2.024,72,1.961,98,2.582,162,2.312,263,3.401,305,4.599,335,5.86,386,2.926,427,4.525,551,4.599,646,3.401,792,3.359,1001,4.599,1332,3.611,1407,4.599,1408,4.599,1637,5.86,1638,4.599,1639,5.86,1640,4.599,1641,4.599,1642,4.599,1643,4.599,1644,5.24,1645,5.24,1646,4.599,1647,5.24,1648,4.599,1649,6.675,1650,5.24,1651,5.86,1652,7.346,1653,6.675,1654,5.857,1655,6.675,1656,5.24,1657,7.447,1658,7.735,1659,5.24,1660,4.177,1661,4.599,1662,5.24,1663,5.24,1664,7.989,1665,6.675,1666,6.167,1667,5.24,1668,4.599,1669,5.24,1670,5.24,1671,5.24,1672,5.86,1673,5.24,1674,4.599,1675,5.24,1676,4.177,1677,5.24,1678,5.24,1679,5.24,1680,5.24,1681,5.24,1682,5.24,1683,5.24,1684,5.24,1685,5.24,1686,5.24,1687,5.24,1688,5.24,1689,4.177,1690,5.24]],["title/contributing.html",[1635,2.446,1636,2.446,1691,3.116]],["body/contributing.html",[5,0.078,14,0.006,28,0.359,43,0.006,44,0.006,50,1.992,72,1.341,77,1.661,80,1.001,98,1.765,101,1.638,152,1.384,270,2.203,303,2.756,344,5.268,427,2.096,509,2.641,703,4.878,812,4.111,908,2.857,949,2.641,975,2.469,995,2.641,1010,2.857,1013,4.163,1369,2.641,1638,3.145,1639,7.203,1646,3.145,1660,2.857,1661,4.526,1666,4.111,1691,4.526,1692,5.157,1693,5.303,1694,2.857,1695,3.583,1696,3.145,1697,3.145,1698,5.157,1699,3.583,1700,3.583,1701,3.583,1702,5.157,1703,4.526,1704,3.583,1705,7.514,1706,4.526,1707,3.583,1708,6.041,1709,3.583,1710,3.145,1711,2.857,1712,3.583,1713,2.857,1714,3.583,1715,3.583,1716,5.157,1717,4.526,1718,3.145,1719,3.145,1720,6.041,1721,2.857,1722,3.583,1723,3.583,1724,3.145,1725,3.583,1726,3.583,1727,3.583,1728,3.583,1729,6.608,1730,3.145,1731,3.583,1732,3.583,1733,5.157,1734,3.583,1735,3.145,1736,2.857,1737,3.145,1738,4.111,1739,3.583,1740,3.583,1741,5.157,1742,3.145,1743,3.583,1744,5.157,1745,3.583,1746,7.002,1747,3.583,1748,7.002,1749,5.157,1750,5.157,1751,3.145,1752,3.583,1753,3.583,1754,3.583,1755,3.583,1756,3.583,1757,5.157,1758,3.583,1759,3.583,1760,3.583,1761,4.526,1762,3.583,1763,3.583,1764,3.583,1765,5.157,1766,3.583,1767,4.526,1768,7.002,1769,3.583,1770,3.145,1771,3.583,1772,5.303,1773,4.526,1774,3.583,1775,4.526,1776,3.145,1777,3.583,1778,3.583,1779,3.583,1780,3.583,1781,3.583,1782,3.583,1783,3.583,1784,3.583,1785,3.583,1786,3.145,1787,3.583,1788,3.583,1789,3.583,1790,5.157,1791,5.303,1792,3.583,1793,3.583,1794,3.583,1795,3.583,1796,3.583,1797,3.583,1798,3.583,1799,3.583,1800,5.157,1801,3.583,1802,3.583,1803,4.111,1804,3.583,1805,3.145,1806,3.145,1807,3.145,1808,3.145,1809,3.145,1810,4.816,1811,3.145,1812,3.145,1813,3.583,1814,3.145,1815,5.157,1816,3.583,1817,3.583,1818,3.145,1819,3.145,1820,3.583,1821,3.583,1822,3.145,1823,4.526,1824,3.145,1825,3.583,1826,3.583,1827,5.157,1828,5.157,1829,3.583,1830,3.583,1831,3.583,1832,3.583,1833,3.583,1834,3.583,1835,3.583,1836,3.583,1837,3.583,1838,3.583,1839,3.145,1840,4.526,1841,3.583,1842,3.583,1843,3.583,1844,3.583,1845,3.583,1846,3.145,1847,3.145,1848,3.145,1849,3.145,1850,5.157,1851,2.857,1852,5.157,1853,4.526,1854,2.857,1855,3.145,1856,3.583,1857,3.583,1858,3.583,1859,3.583,1860,3.583,1861,3.583,1862,3.583,1863,3.145,1864,3.583,1865,4.526,1866,3.583,1867,5.157,1868,3.583,1869,3.583,1870,3.145,1871,3.583,1872,3.583,1873,5.157,1874,3.583,1875,3.583,1876,3.583,1877,3.583,1878,3.145,1879,3.145,1880,2.857,1881,3.145,1882,3.145,1883,3.145,1884,3.583,1885,3.145,1886,3.583,1887,3.583,1888,3.145,1889,3.583,1890,3.583,1891,3.145,1892,3.145,1893,3.145,1894,3.583,1895,3.583,1896,3.583,1897,3.583,1898,3.583,1899,3.583,1900,3.583,1901,3.583,1902,3.583,1903,3.583,1904,3.145,1905,3.583,1906,3.583,1907,3.583]],["title/coverage.html",[1908,4.64]],["body/coverage.html",[0,0.45,1,1.853,5,0.055,6,3.148,7,2.024,8,3.807,13,0.242,14,0.011,43,0.005,44,0.005,45,1.478,46,2.206,62,2.22,63,1.853,65,2.206,75,1.732,77,0.81,78,2.563,90,2.004,96,1.732,114,1.343,115,2.526,117,2.004,119,1.632,169,2.141,171,2.206,177,1.003,179,1.072,196,1.632,204,1.732,205,1.732,207,1.109,208,1.109,213,1.823,240,1.109,241,2.206,253,1.853,254,2.206,256,0.941,257,1.632,273,1.732,277,1.632,279,1.632,302,2.206,334,4.237,339,1.853,340,2.206,351,1.632,385,1.883,386,3.854,387,2.721,391,2.721,395,2.721,397,2.206,405,2.206,419,1.853,420,2.206,424,1.632,444,1.732,448,1.632,480,2.206,527,2.11,530,1.853,531,2.206,546,1.732,555,1.732,559,1.343,560,1.732,564,1.732,572,1.632,577,1.732,580,1.404,601,1.732,613,2.206,635,1.343,636,2.206,641,1.853,642,2.206,643,1.632,644,2.499,656,1.732,659,1.632,682,2.206,702,2.206,709,1.853,710,2.206,711,1.632,722,1.732,725,1.632,745,2.206,758,2.206,759,3.148,802,2.206,803,3.148,825,2.206,826,3.594,884,2.206,885,3.148,889,2.206,890,3.148,897,1.732,898,3.148,912,1.632,913,2.206,914,3.594,922,2.004,923,3.586,924,2.206,931,1.732,932,2.206,959,1.732,960,2.206,961,3.594,984,1.632,985,3.692,986,2.206,987,3.594,1033,1.853,1034,3.36,1035,2.206,1043,1.732,1051,1.546,1053,1.632,1068,2.206,1082,2.004,1097,2.206,1119,3.897,1128,2.206,1136,2.206,1145,2.206,1153,1.853,1154,2.206,1204,1.853,1209,1.853,1245,2.206,1258,2.206,1265,1.853,1266,2.206,1273,1.732,1276,1.632,1287,2.004,1288,2.206,1289,2.206,1290,1.853,1291,2.206,1300,1.632,1315,2.206,1332,1.732,1355,2.206,1364,2.309,1373,2.206,1377,1.853,1378,2.206,1387,1.732,1390,1.632,1406,2.206,1442,2.206,1443,2.206,1453,2.206,1456,2.206,1458,2.206,1460,2.206,1462,1.732,1463,3.148,1465,2.206,1467,2.206,1469,2.206,1471,1.732,1480,1.732,1481,2.206,1484,2.206,1494,1.853,1495,2.206,1523,1.632,1548,2.206,1549,2.206,1557,1.853,1558,2.206,1568,1.632,1584,2.206,1603,2.206,1606,2.206,1908,2.004,1909,2.206,1910,2.514,1911,2.514,1912,7.098,1913,6.003,1914,6.664,1915,7.264,1916,5.524,1917,8.398,1918,6.664,1919,2.514,1920,4.875,1921,7.405,1922,2.206,1923,8.066,1924,2.206,1925,2.206,1926,2.206,1927,2.206,1928,2.514,1929,2.206,1930,2.514,1931,2.514,1932,3.465,1933,2.206,1934,3.465,1935,3.465,1936,2.206,1937,3.465,1938,3.465,1939,2.206,1940,3.465,1941,3.465,1942,2.206,1943,3.465,1944,3.465,1945,3.465,1946,3.465,1947,2.206,1948,4.875,1949,2.514,1950,2.514,1951,2.206,1952,2.206,1953,2.206,1954,2.514,1955,2.514]],["title/dependencies.html",[152,1.979,1956,3.116]],["body/dependencies.html",[0,0.375,14,0.011,38,1.117,40,2.021,43,0.009,44,0.009,108,1.086,110,1.748,152,2.285,168,2.438,201,3.161,202,4.076,350,5.739,604,4.715,1107,6.812,1648,5.191,1654,4.715,1957,7.76,1958,5.914,1959,5.914,1960,5.914,1961,5.914,1962,5.914,1963,5.914,1964,5.914,1965,5.914,1966,5.914,1967,5.914,1968,5.914,1969,5.914,1970,5.914,1971,5.914,1972,5.191,1973,5.914,1974,5.914,1975,5.914,1976,5.914,1977,5.914,1978,5.914,1979,5.914,1980,5.914,1981,5.914]],["title/miscellaneous/functions.html",[1982,2.617,1983,4.496]],["body/miscellaneous/functions.html",[9,0.656,14,0.01,43,0.01,44,0.01,1927,5.974,1929,7.226,1982,5.017,1983,5.974,1984,6.806]],["title/index.html",[9,0.342,1635,2.446,1636,2.446]],["body/index.html",[14,0.009,43,0.006,44,0.006,45,1.269,78,2.201,179,2.112,401,3.652,402,4.667,404,4.349,763,4.667,779,2.703,970,2.703,971,2.703,1018,3.414,1711,2.703,1713,2.703,1803,2.703,1854,6.622,1985,4.954,1986,7.725,1987,3.391,1988,3.391,1989,3.391,1990,3.391,1991,3.391,1992,6.485,1993,3.391,1994,4.954,1995,4.954,1996,7.154,1997,3.391,1998,7.725,1999,3.391,2000,3.391,2001,3.391,2002,6.85,2003,4.954,2004,7.851,2005,4.954,2006,3.391,2007,3.391,2008,3.391,2009,4.954,2010,3.391,2011,4.954,2012,5.854,2013,3.391,2014,5.652,2015,5.854,2016,5.854,2017,3.391,2018,6.85,2019,4.954,2020,3.391,2021,3.391,2022,3.391,2023,4.954,2024,3.391,2025,4.954,2026,4.954,2027,3.391,2028,3.391,2029,3.391,2030,3.391,2031,3.391,2032,3.391,2033,4.954,2034,4.954,2035,2.976,2036,3.391,2037,3.391,2038,6.85,2039,3.391,2040,3.391,2041,7.154,2042,4.954,2043,8.047,2044,3.391,2045,6.85,2046,2.976,2047,4.954,2048,3.391,2049,3.391,2050,3.391,2051,3.391,2052,4.954,2053,3.391,2054,4.954,2055,4.954,2056,6.85,2057,3.391,2058,3.391,2059,3.391,2060,4.954,2061,4.349,2062,2.976,2063,3.391,2064,3.391,2065,5.854,2066,3.391,2067,4.954,2068,5.854,2069,3.391,2070,4.954,2071,3.391,2072,3.391,2073,3.391,2074,3.391,2075,3.391,2076,3.391,2077,3.391,2078,4.954,2079,4.954,2080,3.391,2081,3.391,2082,3.391,2083,3.391,2084,3.391,2085,3.391,2086,3.391,2087,3.391,2088,3.391,2089,3.391,2090,3.391,2091,3.391,2092,4.954,2093,3.391,2094,3.391,2095,3.391,2096,3.391,2097,3.391,2098,3.391,2099,3.391,2100,3.391,2101,3.391,2102,4.954,2103,4.954,2104,3.391,2105,3.391,2106,3.391,2107,3.391,2108,5.139,2109,4.349,2110,2.976,2111,4.954,2112,3.391,2113,3.391,2114,4.954,2115,3.391,2116,3.391,2117,3.391,2118,3.391,2119,3.391,2120,3.391,2121,3.391,2122,3.391,2123,3.391,2124,3.391,2125,3.391,2126,3.391,2127,4.954,2128,3.391,2129,3.391,2130,3.391,2131,3.391,2132,3.391,2133,3.391,2134,3.391,2135,3.391,2136,5.854,2137,4.954,2138,4.954,2139,3.391,2140,3.391,2141,5.854,2142,3.391,2143,3.391,2144,3.391,2145,3.391,2146,4.954,2147,3.391,2148,3.391,2149,3.391,2150,3.391,2151,3.391,2152,3.391,2153,3.391,2154,3.391,2155,4.954,2156,3.391,2157,4.954,2158,3.391,2159,3.391,2160,2.976,2161,3.391,2162,3.391,2163,3.391,2164,4.954,2165,4.954,2166,4.954,2167,4.954,2168,3.391,2169,3.391,2170,3.391,2171,2.976,2172,2.499,2173,2.976,2174,3.391,2175,4.954,2176,3.391,2177,3.391,2178,3.391,2179,3.391,2180,3.391,2181,3.391,2182,3.391,2183,3.391,2184,3.391,2185,3.391,2186,3.391,2187,3.391,2188,3.391,2189,3.391,2190,3.391,2191,3.391]],["title/license.html",[1635,2.446,1636,2.446,2172,2.617]],["body/license.html",[0,0.039,4,0.217,5,0.03,13,0.135,14,0.002,19,1.711,20,1.789,22,0.973,28,0.076,36,0.047,43,0.002,44,0.002,52,0.292,55,0.373,67,0.211,77,1.142,101,0.346,134,0.211,159,0.312,192,4.427,213,1.393,221,0.891,224,1.14,239,0.334,251,0.908,303,0.404,319,0.603,341,0.603,346,0.491,350,1.115,402,2.269,403,1.711,427,0.818,433,0.908,509,0.558,510,0.664,516,1.711,527,1.042,550,0.664,622,2.499,703,4.495,718,0.664,812,5.005,840,1.115,843,1.227,845,2.824,847,0.664,851,4.493,852,0.664,856,0.558,896,2.098,902,4.008,907,2.499,908,1.115,921,0.664,940,3.205,942,0.603,949,1.437,950,0.603,975,2.83,989,1.673,991,2.269,995,4.352,997,2.131,1000,1.227,1004,0.664,1007,0.664,1009,0.664,1013,4.382,1014,0.664,1015,1.227,1027,0.664,1045,0.664,1046,0.664,1088,1.227,1118,0.603,1167,2.666,1191,0.664,1197,0.664,1374,3.816,1640,0.664,1641,0.664,1642,2.824,1643,1.711,1651,1.711,1657,0.664,1660,1.935,1666,2.269,1672,0.664,1674,0.664,1676,1.115,1693,0.664,1694,1.115,1696,1.227,1697,4.493,1703,3.372,1706,1.711,1710,1.227,1711,1.935,1713,0.603,1717,1.227,1718,3.113,1719,2.131,1724,1.227,1730,0.664,1735,0.664,1736,0.603,1737,1.711,1738,3.466,1742,1.227,1751,2.499,1761,1.227,1767,0.664,1772,2.824,1773,2.131,1775,1.227,1776,1.227,1786,0.664,1791,0.664,1803,5.07,1805,2.131,1806,3.372,1807,5.272,1808,2.824,1809,0.664,1810,0.603,1811,3.113,1814,0.664,1818,1.227,1819,0.664,1822,0.664,1823,3.372,1824,0.664,1839,2.131,1840,3.113,1846,0.664,1847,1.227,1848,1.227,1849,1.227,1851,1.115,1853,0.664,1854,1.115,1855,0.664,1863,0.664,1865,3.372,1870,2.824,1878,0.664,1879,0.664,1880,1.115,1881,0.664,1882,0.664,1883,0.664,1885,0.664,1888,1.711,1891,1.711,1892,1.227,1904,0.664,1908,1.115,1972,1.227,2061,0.664,2108,0.664,2109,3.372,2110,0.664,2171,5.436,2172,6.11,2173,5.086,2192,2.847,2193,0.757,2194,0.757,2195,1.949,2196,6.703,2197,3.841,2198,6.507,2199,3.217,2200,0.757,2201,0.757,2202,2.847,2203,6.359,2204,2.847,2205,1.949,2206,1.949,2207,0.664,2208,1.949,2209,0.757,2210,0.757,2211,1.398,2212,4.766,2213,3.217,2214,0.757,2215,3.217,2216,0.757,2217,3.841,2218,1.398,2219,0.757,2220,0.757,2221,0.757,2222,5.118,2223,7.461,2224,1.949,2225,1.949,2226,8.229,2227,3.546,2228,3.546,2229,5.118,2230,3.217,2231,0.757,2232,0.757,2233,3.841,2234,3.841,2235,0.757,2236,1.398,2237,0.757,2238,1.949,2239,5.794,2240,2.847,2241,1.398,2242,0.757,2243,0.757,2244,1.398,2245,2.428,2246,2.428,2247,4.766,2248,1.398,2249,1.398,2250,2.131,2251,0.757,2252,3.546,2253,2.499,2254,0.757,2255,3.841,2256,3.217,2257,6.819,2258,3.546,2259,0.757,2260,0.757,2261,3.841,2262,1.398,2263,4.566,2264,1.398,2265,0.757,2266,0.757,2267,5.274,2268,0.757,2269,0.757,2270,4.949,2271,1.398,2272,1.949,2273,0.757,2274,0.757,2275,1.227,2276,0.757,2277,0.757,2278,2.824,2279,0.757,2280,0.757,2281,0.757,2282,0.757,2283,0.757,2284,0.757,2285,1.398,2286,0.757,2287,0.757,2288,0.757,2289,1.398,2290,0.757,2291,1.949,2292,1.398,2293,0.757,2294,1.398,2295,1.398,2296,4.493,2297,0.757,2298,1.398,2299,1.398,2300,0.757,2301,0.757,2302,1.398,2303,1.949,2304,1.398,2305,1.949,2306,1.398,2307,0.757,2308,0.757,2309,3.217,2310,0.757,2311,0.757,2312,0.757,2313,2.847,2314,0.757,2315,0.757,2316,2.428,2317,0.757,2318,0.757,2319,1.398,2320,1.949,2321,0.757,2322,4.184,2323,0.757,2324,4.107,2325,0.757,2326,5.118,2327,2.428,2328,2.847,2329,3.217,2330,0.757,2331,1.949,2332,5.678,2333,1.398,2334,0.757,2335,0.757,2336,0.757,2337,1.949,2338,7.336,2339,0.757,2340,0.757,2341,1.398,2342,1.398,2343,0.757,2344,0.757,2345,2.428,2346,0.757,2347,1.949,2348,1.949,2349,1.398,2350,7.229,2351,1.949,2352,4.107,2353,2.428,2354,1.398,2355,0.757,2356,1.398,2357,1.949,2358,4.107,2359,4.347,2360,2.428,2361,0.757,2362,1.398,2363,1.398,2364,2.428,2365,1.949,2366,0.757,2367,6.435,2368,1.398,2369,0.757,2370,3.841,2371,0.757,2372,1.949,2373,2.428,2374,3.841,2375,0.757,2376,5.274,2377,2.428,2378,1.398,2379,4.566,2380,3.217,2381,0.757,2382,0.757,2383,0.757,2384,0.757,2385,3.841,2386,0.757,2387,1.398,2388,4.949,2389,0.757,2390,1.949,2391,0.757,2392,0.757,2393,1.949,2394,0.757,2395,0.757,2396,0.757,2397,0.757,2398,4.566,2399,1.949,2400,1.949,2401,0.757,2402,1.398,2403,1.949,2404,1.398,2405,4.347,2406,0.757,2407,0.757,2408,0.757,2409,2.847,2410,1.949,2411,1.949,2412,1.949,2413,1.949,2414,0.757,2415,0.757,2416,2.847,2417,2.847,2418,3.217,2419,0.757,2420,0.757,2421,1.398,2422,0.757,2423,1.949,2424,0.757,2425,0.757,2426,0.757,2427,0.757,2428,0.757,2429,1.398,2430,0.757,2431,6.193,2432,0.757,2433,3.841,2434,0.757,2435,2.824,2436,1.398,2437,0.757,2438,0.757,2439,1.398,2440,1.398,2441,0.757,2442,0.757,2443,0.757,2444,1.398,2445,1.949,2446,2.847,2447,0.757,2448,1.398,2449,0.757,2450,3.217,2451,0.757,2452,2.131,2453,0.664,2454,4.347,2455,3.546,2456,2.428,2457,0.757,2458,2.847,2459,0.757,2460,1.398,2461,0.757,2462,0.664,2463,1.949,2464,1.949,2465,0.757,2466,0.757,2467,1.949,2468,1.949,2469,0.757,2470,0.757,2471,1.398,2472,1.398,2473,2.847,2474,1.398,2475,0.757,2476,4.949,2477,1.398,2478,0.757,2479,0.757,2480,0.757,2481,0.757,2482,1.949,2483,0.757,2484,0.757,2485,5.274,2486,0.664,2487,0.757,2488,0.757,2489,2.847,2490,2.847,2491,0.757,2492,1.949,2493,0.757,2494,0.757,2495,2.428,2496,0.757,2497,1.398,2498,0.757,2499,0.757,2500,0.757,2501,0.757,2502,0.757,2503,1.398,2504,1.398,2505,0.757,2506,1.949,2507,0.757,2508,0.757,2509,1.398,2510,0.757,2511,0.757,2512,0.757,2513,0.757,2514,1.398,2515,1.398,2516,1.398,2517,1.398,2518,4.107,2519,1.398,2520,3.217,2521,0.757,2522,0.757,2523,1.398,2524,1.949,2525,2.428,2526,2.428,2527,2.428,2528,1.949,2529,0.757,2530,2.847,2531,2.847,2532,1.711,2533,0.757,2534,1.398,2535,1.398,2536,2.499,2537,1.398,2538,2.428,2539,1.398,2540,1.949,2541,5.118,2542,0.757,2543,0.664,2544,0.757,2545,1.949,2546,1.398,2547,1.398,2548,0.757,2549,0.757,2550,0.757,2551,0.757,2552,1.398,2553,0.757,2554,0.757,2555,0.757,2556,1.949,2557,0.757,2558,0.757,2559,1.949,2560,0.757,2561,1.398,2562,0.757,2563,1.949,2564,0.757,2565,0.757,2566,1.398,2567,1.398,2568,6.006,2569,1.949,2570,1.398,2571,1.398,2572,1.398,2573,1.398,2574,2.428,2575,2.131,2576,0.757,2577,0.757,2578,0.757,2579,0.757,2580,0.757,2581,3.546,2582,3.217,2583,1.398,2584,0.757,2585,0.757,2586,0.757,2587,0.757,2588,1.398,2589,0.757,2590,1.227,2591,0.757,2592,2.499,2593,2.428,2594,0.757,2595,0.757,2596,0.757,2597,0.757,2598,0.757,2599,1.398,2600,0.757,2601,0.757,2602,1.949,2603,2.847,2604,2.428,2605,1.398,2606,0.664,2607,0.757,2608,0.664,2609,0.757,2610,0.757,2611,1.398,2612,0.757,2613,1.949,2614,2.428,2615,0.757,2616,0.757,2617,1.398,2618,0.664,2619,0.757,2620,1.949,2621,0.757,2622,0.757,2623,0.757,2624,0.757,2625,1.398,2626,0.757,2627,0.757,2628,0.757,2629,0.757,2630,0.757,2631,1.949,2632,0.757,2633,0.757,2634,0.757,2635,0.757,2636,2.847,2637,0.757,2638,2.428,2639,0.757,2640,0.757,2641,0.757,2642,2.428,2643,0.757,2644,0.757,2645,0.757,2646,0.757,2647,0.757,2648,1.398,2649,3.546,2650,0.757,2651,2.428,2652,0.757,2653,0.757,2654,1.949,2655,0.757,2656,0.757,2657,1.949,2658,0.757,2659,1.398,2660,1.227,2661,0.757,2662,0.757,2663,0.757,2664,0.757,2665,0.757,2666,0.757,2667,0.757,2668,0.664,2669,0.757,2670,1.398,2671,0.757,2672,0.757,2673,0.757,2674,1.398,2675,1.398,2676,0.757,2677,0.757,2678,1.949,2679,1.711,2680,0.757,2681,1.398,2682,1.398,2683,0.757,2684,1.949,2685,3.546,2686,0.757,2687,1.115,2688,0.757,2689,1.227,2690,0.757,2691,0.757,2692,0.757,2693,0.757,2694,1.398,2695,0.757,2696,1.398,2697,2.428,2698,0.757,2699,2.847,2700,0.757,2701,0.757,2702,0.757,2703,0.757,2704,0.757,2705,0.757,2706,1.398,2707,1.398,2708,1.398,2709,1.949,2710,0.757,2711,1.398,2712,1.949,2713,0.757,2714,1.398,2715,0.757,2716,1.398,2717,0.757,2718,1.949,2719,1.398,2720,0.757,2721,0.757,2722,1.398,2723,6.193,2724,1.398,2725,0.757,2726,2.847,2727,4.347,2728,1.949,2729,0.757,2730,0.757,2731,0.757,2732,0.757,2733,0.757,2734,1.949,2735,0.757,2736,1.398,2737,0.757,2738,0.757,2739,0.757,2740,2.428,2741,0.757,2742,0.757,2743,0.757,2744,0.757,2745,2.428,2746,1.398,2747,1.398,2748,0.757,2749,0.757,2750,1.949,2751,0.757,2752,1.398,2753,1.949,2754,0.757,2755,1.398,2756,0.757,2757,0.757,2758,0.664,2759,0.757,2760,1.398,2761,1.949,2762,0.757,2763,0.757,2764,1.398,2765,0.757,2766,1.398,2767,0.757,2768,0.757,2769,0.757,2770,0.757,2771,0.757,2772,1.949,2773,0.757,2774,0.757,2775,2.428,2776,0.757,2777,1.949,2778,0.757,2779,0.757,2780,0.757,2781,1.398,2782,0.757,2783,0.757,2784,0.757,2785,1.949,2786,1.398,2787,1.398,2788,0.757,2789,1.398,2790,1.949,2791,2.428,2792,0.757,2793,0.757,2794,0.664,2795,1.398,2796,0.757,2797,1.949,2798,0.757,2799,1.398,2800,0.757,2801,0.757,2802,0.757,2803,1.949,2804,0.757,2805,1.949,2806,1.398,2807,0.757,2808,0.757,2809,1.398,2810,1.398,2811,0.757,2812,0.757,2813,1.398,2814,0.757,2815,0.757,2816,0.757,2817,0.757,2818,0.757,2819,0.757,2820,0.757,2821,0.757,2822,0.757,2823,0.757,2824,2.428,2825,1.398,2826,1.949,2827,0.757,2828,0.757,2829,0.757,2830,0.757,2831,1.398,2832,0.757,2833,0.757,2834,0.664,2835,0.757,2836,0.757,2837,0.757,2838,0.757,2839,0.757,2840,0.757,2841,0.664,2842,0.757,2843,0.757,2844,0.757,2845,0.757,2846,2.428,2847,0.757,2848,1.398,2849,0.757,2850,0.757,2851,0.757,2852,0.757,2853,0.757,2854,0.757,2855,0.757,2856,0.757,2857,0.757,2858,0.757,2859,1.949,2860,0.757,2861,0.757,2862,0.757,2863,0.757,2864,0.757,2865,1.398,2866,0.757,2867,0.757,2868,0.757,2869,0.757,2870,0.757,2871,0.757,2872,1.398,2873,1.398,2874,2.847,2875,1.949,2876,0.757,2877,0.757,2878,0.757,2879,0.757,2880,0.757,2881,1.949,2882,1.398,2883,0.757,2884,1.398,2885,1.398,2886,1.398,2887,0.757,2888,0.757,2889,0.757,2890,0.757,2891,0.757,2892,0.757,2893,0.757,2894,0.757,2895,1.398,2896,0.757,2897,1.949,2898,0.757,2899,0.757,2900,0.757,2901,0.757,2902,0.757,2903,0.757,2904,0.757,2905,0.757,2906,0.757,2907,0.757,2908,0.757,2909,1.398,2910,0.757,2911,0.757,2912,0.757,2913,0.664,2914,0.757,2915,0.757,2916,0.757,2917,0.757,2918,0.757,2919,0.757,2920,0.757,2921,0.757,2922,0.757,2923,0.757,2924,0.757,2925,0.757,2926,1.949,2927,1.398,2928,0.757,2929,0.664,2930,0.757,2931,0.757,2932,0.757,2933,0.757,2934,0.757,2935,0.757,2936,1.711,2937,0.757,2938,0.757,2939,0.757,2940,0.757,2941,1.398,2942,0.757,2943,0.757,2944,0.757,2945,0.757,2946,0.757,2947,0.757,2948,0.757,2949,0.757,2950,0.757,2951,0.757,2952,0.757,2953,0.757,2954,0.757,2955,0.757,2956,0.757,2957,0.757,2958,0.757,2959,0.757,2960,0.757,2961,0.757]],["title/modules.html",[151,2.321]],["body/modules.html",[14,0.009,43,0.009,44,0.009,150,3.964,151,2.295,156,2.295,296,3.964,360,4.24,364,3.964,365,3.964,366,3.964,367,3.964,368,3.964,369,3.964,370,3.964,371,3.964,372,3.964,373,3.964,374,3.964,2532,7.761,2962,8.842,2963,8.842,2964,8.842]],["title/overview.html",[2965,5.108]],["body/overview.html",[2,0.776,14,0.011,43,0.007,44,0.007,64,1.115,119,4.098,150,5.299,151,1.548,152,2.108,153,3.406,154,3.406,155,3.406,156,3.421,157,2.326,158,1.654,159,1.599,170,1.654,177,3.068,279,4.098,296,5.299,297,3.406,298,3.406,351,4.098,360,6.5,361,3.406,362,3.406,363,3.406,364,5.299,365,5.499,366,5.299,367,5.299,368,5.299,369,5.299,370,5.299,371,5.299,372,5.299,373,5.299,374,5.299,448,4.098,475,3.406,476,3.406,572,4.098,598,3.406,600,3.406,601,4.35,659,4.098,677,3.406,679,3.406,725,4.098,740,3.406,742,3.406,797,2.674,1053,4.098,1063,3.406,1065,3.406,1209,4.653,1234,3.406,1235,3.406,1239,3.406,1240,3.406,1241,3.406,1276,4.098,1300,4.098,1310,3.406,1311,3.406,1350,3.406,1352,3.406,1390,4.098,1402,3.406,1404,3.406,1523,4.098,1543,3.406,1544,3.406,1568,4.098,1579,3.406,1581,3.406,1676,3.093,2687,3.093,2965,3.406,2966,3.88]],["title/properties.html",[10,1.145,1956,3.116]],["body/properties.html",[10,1.509,14,0.011,42,2.113,43,0.01,44,0.01,1013,4.653,2172,4.977,2689,5.927,2967,6.752,2968,6.752]],["title/todo.html",[1635,2.446,1636,2.446,2969,3.116]],["body/todo.html",[7,3.958,14,0.009,21,2.579,43,0.009,44,0.009,45,2.676,47,2.88,50,2.258,52,2.258,68,2.266,78,3.795,213,1.888,240,2.579,256,2.676,269,3.595,385,2.258,423,4.028,532,5.131,635,3.124,644,2.997,974,4.309,1364,3.42,1654,4.661,1689,4.661,1770,5.131,1909,6.274,2207,5.131,2575,5.131,2668,5.131,2834,5.131,2969,5.131,2970,7.147,2971,5.846,2972,5.846,2973,5.846,2974,8.74,2975,8.043,2976,5.846,2977,5.846,2978,5.846,2979,5.846,2980,5.846,2981,5.846,2982,5.846]],["title/miscellaneous/variables.html",[1721,4.084,1982,2.617]],["body/miscellaneous/variables.html",[7,0.839,9,0.087,13,0.311,14,0.011,15,0.287,18,0.346,42,0.869,43,0.002,44,0.002,45,1.789,47,1.11,50,0.632,51,1.211,52,1.073,68,0.853,69,0.298,72,1.209,77,1.877,78,3.372,90,1.304,114,0.874,115,1.27,117,1.304,134,0.776,173,1.424,179,1.689,193,4.56,194,4.56,196,1.803,204,1.127,205,0.619,207,0.722,208,0.396,212,2.51,213,1.463,214,1.597,219,2.285,221,0.41,222,0.788,224,0.525,225,0.957,234,0.788,239,0.994,256,1.355,260,0.716,277,1.062,319,0.716,344,2.215,401,2.668,523,0.788,527,1.204,552,0.662,580,0.913,620,2.38,628,0.913,644,1.655,693,0.788,703,5.75,760,1.062,765,0.913,774,0.662,831,0.788,833,1.304,840,0.716,841,0.788,846,0.788,855,2.574,856,1.661,896,0.662,940,0.662,975,0.619,976,0.583,988,2.35,989,1.914,991,1.304,994,2.35,995,0.662,996,0.788,1002,0.788,1003,0.788,1006,0.716,1008,0.788,1010,0.716,1011,1.436,1013,1.553,1082,1.304,1117,1.978,1118,1.797,1167,0.583,1246,3.177,1332,1.127,1364,0.957,1369,0.662,1668,1.436,1689,2.574,1694,0.716,1721,0.716,1736,1.304,1738,2.215,1810,0.716,1812,0.788,1851,1.797,1880,0.716,1893,0.788,1922,1.436,1924,1.436,1925,1.436,1926,1.436,1932,0.788,1933,1.436,1934,0.788,1935,1.978,1936,1.436,1937,0.788,1938,1.978,1939,1.436,1940,0.788,1941,1.978,1942,1.436,1943,0.788,1944,1.978,1945,0.788,1946,1.978,1947,1.436,1951,1.436,1952,1.436,1953,0.788,1982,0.662,1992,0.788,2014,0.788,2035,0.788,2046,0.788,2062,0.788,2160,0.788,2250,0.788,2253,2.834,2275,0.788,2278,3.177,2296,0.788,2322,0.788,2435,0.788,2452,0.788,2453,0.788,2462,0.788,2486,0.788,2536,0.788,2543,0.788,2590,0.788,2592,0.788,2606,0.788,2608,0.788,2618,2.834,2660,1.978,2679,0.788,2687,1.304,2758,0.788,2794,0.788,2841,0.788,2913,1.436,2929,0.788,2936,0.788,2983,1.636,2984,1.636,2985,0.898,2986,2.778,2987,1.636,2988,1.636,2989,1.636,2990,1.636,2991,0.898,2992,0.898,2993,4.779,2994,0.898,2995,0.898,2996,0.898,2997,0.898,2998,0.898,2999,0.898,3000,0.898,3001,0.898,3002,0.898,3003,0.898,3004,2.778,3005,0.898,3006,0.898,3007,0.898,3008,0.898,3009,5.69,3010,1.636,3011,0.898,3012,0.898,3013,0.898,3014,0.898,3015,1.636,3016,0.898,3017,0.898,3018,0.898,3019,1.636,3020,0.898,3021,0.898,3022,0.898,3023,0.898,3024,0.898,3025,0.898,3026,0.898,3027,0.898,3028,0.898,3029,0.898,3030,0.898,3031,0.898,3032,0.898,3033,0.898,3034,0.898,3035,0.898,3036,0.898,3037,0.898,3038,0.898,3039,0.898,3040,0.898,3041,0.898,3042,0.898,3043,0.898,3044,0.898,3045,0.898,3046,0.898,3047,0.898,3048,0.898,3049,0.898,3050,0.898,3051,0.898,3052,0.898,3053,0.898,3054,0.898,3055,0.898,3056,0.898,3057,0.898,3058,0.898,3059,0.898,3060,0.898,3061,0.898,3062,0.898,3063,2.778,3064,0.898,3065,0.898,3066,0.898,3067,1.636,3068,0.898,3069,0.898,3070,1.636,3071,0.898,3072,0.898,3073,0.898,3074,0.898,3075,0.898,3076,0.898,3077,0.898,3078,0.898,3079,0.898,3080,0.898,3081,0.898,3082,0.898,3083,0.898,3084,0.898,3085,0.898,3086,0.898,3087,0.898,3088,0.898,3089,0.898,3090,0.898,3091,0.898,3092,0.898,3093,0.898,3094,0.898,3095,5.195,3096,0.898,3097,0.898,3098,0.898,3099,0.898,3100,0.898,3101,1.636,3102,0.898,3103,0.898,3104,0.898,3105,0.898,3106,0.898,3107,0.898,3108,0.898,3109,0.898,3110,0.898,3111,0.898,3112,1.636,3113,0.898,3114,2.254,3115,0.898,3116,0.898,3117,0.898,3118,0.898,3119,0.898,3120,0.898,3121,0.898,3122,0.898,3123,0.898,3124,0.898,3125,0.898,3126,0.898,3127,0.898,3128,0.898,3129,0.898,3130,0.898,3131,0.898,3132,0.898,3133,0.898,3134,0.898,3135,0.898,3136,0.898,3137,0.898,3138,0.898,3139,0.898,3140,0.898,3141,0.898,3142,0.898,3143,0.898,3144,0.898,3145,0.898,3146,2.778,3147,0.898,3148,0.898,3149,0.898,3150,0.898,3151,0.898,3152,0.898,3153,0.898,3154,0.898,3155,0.898,3156,0.898,3157,0.898,3158,0.898,3159,0.898,3160,0.898,3161,0.898,3162,1.636,3163,0.898,3164,0.898,3165,2.254,3166,0.898,3167,0.898,3168,0.898,3169,0.898,3170,0.898,3171,0.898,3172,0.898,3173,0.898,3174,0.898,3175,0.898,3176,0.898,3177,1.636,3178,0.898,3179,0.898,3180,0.898,3181,0.898,3182,0.898,3183,0.898,3184,0.898,3185,0.898,3186,0.898,3187,0.898,3188,0.898,3189,0.898,3190,0.898,3191,0.898,3192,0.898,3193,0.898,3194,0.898,3195,0.898,3196,0.898,3197,0.898,3198,0.898,3199,0.898,3200,0.898,3201,0.898,3202,0.898,3203,0.898,3204,0.898,3205,0.898,3206,0.898,3207,0.898,3208,0.898,3209,0.898,3210,0.898,3211,0.898,3212,0.898,3213,0.898,3214,0.898,3215,0.898,3216,0.898,3217,0.898,3218,0.898,3219,0.898,3220,0.898,3221,0.898,3222,0.898,3223,0.898,3224,0.898,3225,0.898,3226,0.898,3227,0.898,3228,0.898,3229,0.898,3230,0.898,3231,0.898,3232,0.898,3233,0.898,3234,0.898,3235,0.898,3236,0.898,3237,0.898,3238,0.898,3239,0.898,3240,0.898,3241,0.898,3242,0.898,3243,0.898,3244,0.898,3245,0.898,3246,0.898,3247,0.898,3248,0.898,3249,1.636,3250,1.636,3251,0.898,3252,0.898,3253,0.898,3254,0.898,3255,0.898,3256,0.898,3257,0.898,3258,0.898,3259,0.898,3260,0.898,3261,0.898,3262,0.898,3263,0.898,3264,0.898,3265,0.898,3266,0.898,3267,0.898,3268,2.254,3269,0.898,3270,0.898,3271,0.898,3272,0.898,3273,0.898,3274,0.898,3275,0.898,3276,0.898,3277,0.898,3278,0.898,3279,0.898,3280,0.898,3281,0.898,3282,0.898,3283,0.898,3284,0.898,3285,0.898,3286,0.898,3287,0.898,3288,0.898,3289,0.898,3290,0.898,3291,0.898,3292,0.898,3293,0.898,3294,0.898,3295,0.898,3296,0.898,3297,0.898,3298,0.898,3299,0.898,3300,0.898,3301,0.898,3302,0.898,3303,0.898,3304,0.898,3305,0.898,3306,0.898,3307,0.898,3308,0.898,3309,0.898,3310,0.898,3311,0.898,3312,0.898,3313,0.898,3314,0.898,3315,0.898,3316,0.898,3317,0.898,3318,0.898,3319,0.898,3320,0.898,3321,0.898,3322,0.898,3323,0.898,3324,0.898,3325,0.898,3326,0.898,3327,0.898,3328,1.636,3329,0.898,3330,0.898,3331,0.898,3332,0.898,3333,0.898,3334,0.898,3335,0.898,3336,0.898,3337,0.898,3338,0.898,3339,0.898,3340,0.898,3341,0.898,3342,0.898,3343,0.898,3344,0.898,3345,0.898,3346,0.898,3347,0.898,3348,0.898,3349,0.898,3350,0.898,3351,0.898,3352,0.898,3353,0.898,3354,0.898,3355,0.898,3356,0.898,3357,0.898,3358,0.898,3359,0.898,3360,0.898,3361,0.898,3362,0.898,3363,0.898,3364,0.898,3365,0.898,3366,0.898,3367,0.898,3368,0.898,3369,0.898,3370,0.898,3371,0.898,3372,0.898,3373,0.898,3374,0.898,3375,0.898,3376,0.898,3377,0.898,3378,0.898,3379,0.898,3380,0.898,3381,0.898,3382,0.898,3383,0.898,3384,0.898,3385,0.898,3386,0.898,3387,3.228,3388,0.898,3389,0.898,3390,0.898,3391,0.898,3392,0.898,3393,0.898,3394,0.898,3395,0.898,3396,0.898,3397,0.898,3398,0.898,3399,0.898,3400,0.898,3401,0.898,3402,0.898,3403,0.898,3404,0.898,3405,0.898,3406,0.898,3407,0.898,3408,0.898,3409,0.898,3410,0.898,3411,0.898,3412,0.898,3413,0.898,3414,0.898,3415,0.898,3416,0.898,3417,0.898,3418,0.898,3419,0.898,3420,0.898,3421,0.898,3422,0.898,3423,0.898,3424,0.898,3425,0.898,3426,0.898,3427,0.898,3428,0.898,3429,0.898,3430,0.898,3431,2.254,3432,0.898,3433,0.898,3434,0.898,3435,0.898,3436,0.898,3437,0.898,3438,0.898,3439,0.898,3440,0.898,3441,0.898,3442,0.898,3443,0.898,3444,0.898,3445,0.898,3446,0.898,3447,0.898,3448,0.898,3449,0.898,3450,0.898,3451,0.898,3452,0.898,3453,0.898,3454,0.898,3455,0.898,3456,0.898,3457,0.898,3458,0.898,3459,0.898,3460,0.898,3461,0.898,3462,0.898,3463,0.898,3464,0.898,3465,0.898,3466,0.898,3467,0.898,3468,0.898,3469,0.898,3470,0.898,3471,0.898,3472,0.898,3473,0.898,3474,0.898,3475,0.898,3476,0.898,3477,0.898,3478,0.898,3479,0.898,3480,0.898,3481,0.898,3482,0.898,3483,0.898,3484,0.898,3485,0.898,3486,0.898,3487,0.898,3488,0.898,3489,0.898,3490,0.898,3491,0.898,3492,0.898,3493,0.898,3494,0.898,3495,0.898,3496,0.898,3497,0.898,3498,0.898,3499,0.898,3500,0.898,3501,0.898,3502,0.898,3503,0.898,3504,0.898,3505,0.898,3506,0.898,3507,0.898,3508,0.898,3509,1.636,3510,0.898,3511,0.898,3512,0.898,3513,0.898,3514,0.898,3515,0.898,3516,0.898,3517,0.898,3518,0.898,3519,0.898,3520,0.898,3521,0.898,3522,0.898,3523,0.898,3524,0.898,3525,0.898,3526,0.898,3527,0.898,3528,2.254,3529,0.898,3530,0.898,3531,0.898,3532,0.898,3533,0.898,3534,0.898,3535,0.898,3536,0.898,3537,2.254,3538,2.778,3539,2.778,3540,2.778,3541,2.778,3542,1.636,3543,0.898,3544,0.898,3545,0.898,3546,0.898,3547,1.636,3548,2.254,3549,0.898,3550,0.898,3551,0.898,3552,0.898,3553,0.898,3554,0.898,3555,0.898,3556,0.898,3557,0.898,3558,0.898,3559,0.898,3560,0.898,3561,0.898,3562,0.898,3563,0.898,3564,0.898,3565,0.898,3566,0.898,3567,0.898,3568,0.898,3569,0.898,3570,0.898,3571,0.898,3572,0.898,3573,0.898,3574,0.898,3575,0.898,3576,0.898,3577,0.898,3578,0.898,3579,0.898,3580,0.898,3581,0.898,3582,0.898,3583,1.636,3584,3.228,3585,0.898,3586,2.254,3587,0.898,3588,2.254,3589,0.898,3590,0.898,3591,0.898,3592,1.636,3593,0.898,3594,0.898,3595,0.898,3596,0.898,3597,1.636,3598,0.898,3599,0.898,3600,0.898,3601,0.898,3602,0.898,3603,0.898,3604,1.636,3605,1.636,3606,0.898,3607,1.636,3608,2.254,3609,0.898,3610,0.898,3611,1.636,3612,1.636,3613,1.636,3614,0.898,3615,0.898,3616,0.898,3617,0.898,3618,0.898,3619,0.898,3620,0.898,3621,0.898,3622,0.898,3623,0.898,3624,0.898,3625,0.898]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":334,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"classes/CreateUserPlanDto.html":{},"injectables/HomePageService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0",{"_index":1030,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["0.0.1",{"_index":2967,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1975,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1969,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":1675,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":1968,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1970,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1917,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1950,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1949,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1920,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1919,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1931,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1918,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1921,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1916,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1914,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1912,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1948,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1915,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1913,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":870,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["07",{"_index":1649,"title":{},"body":{"changelog.html":{}}}],["0eee08d7",{"_index":933,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/LoginProfileDto.html":{},"classes/UpdateSongDto.html":{}}}],["1",{"_index":991,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1648,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.4",{"_index":1905,"title":{},"body":{"contributing.html":{}}}],["10",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"classes/CreateUserDto.html":{},"injectables/HomePageService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":849,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["11",{"_index":2497,"title":{},"body":{"license.html":{}}}],["11781579099a",{"_index":981,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePlanDto.html":{}}}],["11f38851",{"_index":977,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePlanDto.html":{}}}],["12",{"_index":770,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["123.123.123",{"_index":769,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["123.456.789",{"_index":965,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["13",{"_index":2862,"title":{},"body":{"license.html":{}}}],["14",{"_index":797,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["14)@apiproperty({description",{"_index":768,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["15",{"_index":2687,"title":{},"body":{"license.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["153.743.513",{"_index":2999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16",{"_index":1676,"title":{},"body":{"changelog.html":{},"license.html":{},"overview.html":{}}}],["18",{"_index":1650,"title":{},"body":{"changelog.html":{}}}],["19.90",{"_index":3582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1900",{"_index":337,"title":{},"body":{"injectables/AlbumService.html":{}}}],["1985",{"_index":839,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["1991",{"_index":818,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["1996",{"_index":2502,"title":{},"body":{"license.html":{}}}],["1]?.trim",{"_index":3530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1f0bd61a6987",{"_index":937,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/LoginProfileDto.html":{},"classes/UpdateSongDto.html":{}}}],["2",{"_index":896,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateUserPlanDto.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["2)@apiproperty({description",{"_index":892,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["20",{"_index":921,"title":{},"body":{"classes/CreateProfileDto.html":{},"license.html":{}}}],["20)@apiproperty({description",{"_index":917,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["2007",{"_index":2195,"title":{},"body":{"license.html":{}}}],["2022",{"_index":335,"title":{},"body":{"injectables/AlbumService.html":{},"changelog.html":{}}}],["21.90",{"_index":3606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24h",{"_index":612,"title":{},"body":{"modules/AuthModule.html":{}}}],["26.90",{"_index":3615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["28",{"_index":2842,"title":{},"body":{"license.html":{}}}],["29",{"_index":2193,"title":{},"body":{"license.html":{}}}],["2})@min(0)@isnotempty()@apiproperty({description",{"_index":1024,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["3",{"_index":2192,"title":{},"body":{"license.html":{}}}],["3.0.2",{"_index":1977,"title":{},"body":{"dependencies.html":{}}}],["3.15.2",{"_index":1965,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":1027,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["30)@apiproperty({description",{"_index":1021,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["300",{"_index":824,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateProfileDto.html":{}}}],["300)@apiproperty({description",{"_index":805,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateProfileDto.html":{}}}],["321.654.987",{"_index":869,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["34e588103949",{"_index":34,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["36e8f88f",{"_index":23,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["4",{"_index":516,"title":{},"body":{"injectables/ArtistService.html":{},"license.html":{}}}],["4.0.0",{"_index":1971,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":1981,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":823,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["40)@apiproperty({description",{"_index":811,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["407e",{"_index":945,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["41",{"_index":2966,"title":{},"body":{"overview.html":{}}}],["41ae",{"_index":979,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePlanDto.html":{}}}],["4202",{"_index":928,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{}}}],["43",{"_index":854,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["4470",{"_index":32,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["4751",{"_index":935,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/LoginProfileDto.html":{},"classes/UpdateSongDto.html":{}}}],["48c0",{"_index":31,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["4b61",{"_index":863,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["4cc5",{"_index":25,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["4fe8",{"_index":864,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["5",{"_index":510,"title":{},"body":{"injectables/ArtistService.html":{},"license.html":{}}}],["5.0.1",{"_index":1966,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1964,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":795,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{}}}],["50)@apiproperty({description",{"_index":773,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{}}}],["50)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":782,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{}}}],["500",{"_index":1032,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["500)@apiproperty({description",{"_index":993,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["5432']/spotify",{"_index":2083,"title":{},"body":{"index.html":{}}}],["5ec96e39",{"_index":926,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{}}}],["6",{"_index":3616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60",{"_index":2735,"title":{},"body":{"license.html":{}}}],["6ad807ac6282",{"_index":866,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["6b",{"_index":2589,"title":{},"body":{"license.html":{}}}],["6d",{"_index":2609,"title":{},"body":{"license.html":{}}}],["7",{"_index":2528,"title":{},"body":{"license.html":{}}}],["7.2.0",{"_index":1979,"title":{},"body":{"dependencies.html":{}}}],["713.443.513",{"_index":3001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["76b73966",{"_index":943,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["7a1a",{"_index":927,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{}}}],["8.0.0",{"_index":1957,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1959,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":1962,"title":{},"body":{"dependencies.html":{}}}],["8.50",{"_index":3589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8a4b",{"_index":934,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/LoginProfileDto.html":{},"classes/UpdateSongDto.html":{}}}],["8c35",{"_index":946,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["8cf4",{"_index":33,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["8fd6",{"_index":865,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["928c",{"_index":944,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["_",{"_index":3545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_count",{"_index":519,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/HomePageService.html":{}}}],["ability",{"_index":2656,"title":{},"body":{"license.html":{}}}],["above",{"_index":2718,"title":{},"body":{"license.html":{}}}],["abre",{"_index":2131,"title":{},"body":{"index.html":{}}}],["absence",{"_index":2529,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":2918,"title":{},"body":{"license.html":{}}}],["absolutely",{"_index":2940,"title":{},"body":{"license.html":{}}}],["abuse",{"_index":2288,"title":{},"body":{"license.html":{}}}],["abusive",{"_index":1868,"title":{},"body":{"contributing.html":{}}}],["ac06f36e",{"_index":862,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["accept",{"_index":2746,"title":{},"body":{"license.html":{}}}],["acceptable",{"_index":1821,"title":{},"body":{"contributing.html":{}}}],["acceptance",{"_index":2745,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":1782,"title":{},"body":{"contributing.html":{}}}],["access",{"_index":2278,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":2812,"title":{},"body":{"license.html":{}}}],["accompanied",{"_index":2569,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":2922,"title":{},"body":{"license.html":{}}}],["accord",{"_index":2527,"title":{},"body":{"license.html":{}}}],["according",{"_index":2913,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["account",{"_index":1369,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UserController.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["account')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":1513,"title":{},"body":{"controllers/UserController.html":{}}}],["account')@useguards(undefined)@apibearerauth()@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":1504,"title":{},"body":{"controllers/UserController.html":{}}}],["accounts",{"_index":988,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"injectables/ProfileService.html":{},"classes/UserPlan.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["acesse",{"_index":2059,"title":{},"body":{"index.html":{}}}],["acesso",{"_index":2135,"title":{},"body":{"index.html":{}}}],["achieve",{"_index":2925,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":2466,"title":{},"body":{"license.html":{}}}],["aconteça",{"_index":2130,"title":{},"body":{"index.html":{}}}],["acquired",{"_index":2795,"title":{},"body":{"license.html":{}}}],["acting",{"_index":1859,"title":{},"body":{"contributing.html":{}}}],["action",{"_index":1826,"title":{},"body":{"contributing.html":{}}}],["actions",{"_index":2754,"title":{},"body":{"license.html":{}}}],["activities",{"_index":2365,"title":{},"body":{"license.html":{}}}],["activity",{"_index":2837,"title":{},"body":{"license.html":{}}}],["actual",{"_index":2817,"title":{},"body":{"license.html":{}}}],["actually",{"_index":2630,"title":{},"body":{"license.html":{}}}],["ad",{"_index":3017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adapt",{"_index":2343,"title":{},"body":{"license.html":{}}}],["adapted",{"_index":1903,"title":{},"body":{"contributing.html":{}}}],["add",{"_index":20,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileFavoriteSongController.html":{},"license.html":{}}}],["added",{"_index":1651,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["adding",{"_index":1653,"title":{},"body":{"changelog.html":{}}}],["addition",{"_index":1006,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"miscellaneous/variables.html":{}}}],["additional",{"_index":2541,"title":{},"body":{"license.html":{}}}],["addplaylistfavorite",{"_index":1155,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["addplaylistfavorite(userprofileid",{"_index":1164,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["address",{"_index":1810,"title":{},"body":{"contributing.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["addressed",{"_index":2340,"title":{},"body":{"license.html":{}}}],["addsongplaylistdto",{"_index":1,"title":{"classes/AddSongPlaylistDto.html":{}},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/PlaylistController.html":{},"coverage.html":{}}}],["addsongtoplaylist",{"_index":1156,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["addsongtoplaylist(userprofileid",{"_index":1170,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["adheres",{"_index":1644,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":45,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"classes/CreateAdminDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"controllers/PlaylistController.html":{},"classes/UpdateAdminDto.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["admin')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin(@loggedadmin",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin(admin",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin)'})@httpcode(httpstatus.no_content",{"_index":715,"title":{},"body":{"controllers/CountryController.html":{},"controllers/PlaylistController.html":{}}}],["admin.controller",{"_index":165,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.decorator",{"_index":116,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["admin.decorator.ts",{"_index":1922,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.dto",{"_index":122,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["admin.dto.ts",{"_index":759,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginAdminDto.html":{},"coverage.html":{}}}],["admin.dto.ts:11",{"_index":1121,"title":{},"body":{"classes/LoginAdminDto.html":{}}}],["admin.dto.ts:17",{"_index":780,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:19",{"_index":1123,"title":{},"body":{"classes/LoginAdminDto.html":{}}}],["admin.dto.ts:26",{"_index":771,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:35",{"_index":775,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:46",{"_index":788,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:54",{"_index":766,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.password",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["admin.service",{"_index":120,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{}}}],["admin.ts",{"_index":1944,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.usercategoryname",{"_index":3542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin/admin.module",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["admin@admin.com",{"_index":774,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginAdminDto.html":{},"classes/UpdateAdminDto.html":{},"miscellaneous/variables.html":{}}}],["admincontroller",{"_index":63,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["administradores",{"_index":2031,"title":{},"body":{"index.html":{}}}],["adminmodule",{"_index":150,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":90,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminselect",{"_index":172,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminservice",{"_index":119,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adopted",{"_index":2500,"title":{},"body":{"license.html":{}}}],["ads",{"_index":1003,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"miscellaneous/variables.html":{}}}],["advances",{"_index":1797,"title":{},"body":{"contributing.html":{}}}],["advantages",{"_index":3611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adversely",{"_index":2665,"title":{},"body":{"license.html":{}}}],["advised",{"_index":2910,"title":{},"body":{"license.html":{}}}],["ae",{"_index":3493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["af",{"_index":3007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["afc7",{"_index":978,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePlanDto.html":{}}}],["affects",{"_index":2666,"title":{},"body":{"license.html":{}}}],["affero",{"_index":2859,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":2776,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":2461,"title":{},"body":{"license.html":{}}}],["afghanistan",{"_index":3006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["africa",{"_index":3432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["african",{"_index":3094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ag",{"_index":3026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["against",{"_index":2517,"title":{},"body":{"license.html":{}}}],["age",{"_index":1752,"title":{},"body":{"contributing.html":{}}}],["aggregate",{"_index":2556,"title":{},"body":{"license.html":{}}}],["agradecemos",{"_index":2175,"title":{},"body":{"index.html":{}}}],["agradecimentos",{"_index":2174,"title":{},"body":{"index.html":{}}}],["agree",{"_index":2854,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":2896,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":2805,"title":{},"body":{"license.html":{}}}],["aguardado",{"_index":2105,"title":{},"body":{"index.html":{}}}],["ai",{"_index":3021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aim",{"_index":2284,"title":{},"body":{"license.html":{}}}],["aimed",{"_index":3607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["al",{"_index":3012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["albania",{"_index":3011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["album",{"_index":240,"title":{"classes/Album.html":{}},"body":{"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateSongDto.html":{},"injectables/HomePageService.html":{},"injectables/ProfileFavoriteSongService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"coverage.html":{},"todo.html":{}}}],["album.controller",{"_index":301,"title":{},"body":{"modules/AlbumModule.html":{}}}],["album.dto",{"_index":281,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/UpdateAlbumDto.html":{}}}],["album.dto.ts",{"_index":803,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["album.dto.ts:12",{"_index":815,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:20",{"_index":819,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:29",{"_index":809,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.jpg",{"_index":808,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.service",{"_index":280,"title":{},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{}}}],["album/album.module",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["albumcontroller",{"_index":253,"title":{"controllers/AlbumController.html":{}},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"coverage.html":{}}}],["albumid",{"_index":263,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/CreateSongDto.html":{},"classes/Music.html":{},"injectables/SongService.html":{},"changelog.html":{}}}],["albumidexist",{"_index":1407,"title":{},"body":{"injectables/SongService.html":{},"changelog.html":{}}}],["albumidexist(albumid",{"_index":1411,"title":{},"body":{"injectables/SongService.html":{}}}],["albuminartist",{"_index":330,"title":{},"body":{"injectables/AlbumService.html":{}}}],["albuminartist.albums.length",{"_index":333,"title":{},"body":{"injectables/AlbumService.html":{}}}],["albummodule",{"_index":296,"title":{"modules/AlbumModule.html":{}},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["albums",{"_index":332,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"classes/CreateArtistDto.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{}}}],["albums.length",{"_index":1093,"title":{},"body":{"injectables/HomePageService.html":{}}}],["albumselect",{"_index":304,"title":{},"body":{"injectables/AlbumService.html":{}}}],["albumservice",{"_index":279,"title":{"injectables/AlbumService.html":{}},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"coverage.html":{},"overview.html":{}}}],["algeria",{"_index":3013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["algum",{"_index":3533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alguma",{"_index":2116,"title":{},"body":{"index.html":{}}}],["aligned",{"_index":1836,"title":{},"body":{"contributing.html":{}}}],["all')@apioperation({summary",{"_index":88,"title":{},"body":{"controllers/AdminController.html":{}}}],["allcategories",{"_index":695,"title":{},"body":{"injectables/CategoryService.html":{}}}],["allcategories.length",{"_index":696,"title":{},"body":{"injectables/CategoryService.html":{}}}],["allcountries",{"_index":755,"title":{},"body":{"injectables/CountryService.html":{}}}],["allcountries.length",{"_index":756,"title":{},"body":{"injectables/CountryService.html":{}}}],["alleging",{"_index":2784,"title":{},"body":{"license.html":{}}}],["allfavorites",{"_index":1339,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["allfavorites.songs.length",{"_index":1340,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["allow",{"_index":2310,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":2208,"title":{},"body":{"license.html":{}}}],["allusers",{"_index":1631,"title":{},"body":{"injectables/UserService.html":{}}}],["allusers.length",{"_index":1632,"title":{},"body":{"injectables/UserService.html":{}}}],["alok",{"_index":1375,"title":{},"body":{"classes/SearchDto.html":{}}}],["alone",{"_index":857,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["along",{"_index":2531,"title":{},"body":{"license.html":{}}}],["already",{"_index":2794,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["alteração",{"_index":2117,"title":{},"body":{"index.html":{}}}],["alternative",{"_index":2585,"title":{},"body":{"license.html":{}}}],["although",{"_index":2280,"title":{},"body":{"license.html":{}}}],["além",{"_index":2028,"title":{},"body":{"index.html":{}}}],["american",{"_index":831,"title":{},"body":{"classes/CreateArtistDto.html":{},"miscellaneous/variables.html":{}}}],["ancillary",{"_index":2748,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":622,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["andorra",{"_index":3016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angeles",{"_index":837,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["angola",{"_index":3018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anguilla",{"_index":3020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["antarctica",{"_index":3022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anti",{"_index":2488,"title":{},"body":{"license.html":{}}}],["antigua",{"_index":3024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["antilles",{"_index":3330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anyone",{"_index":2538,"title":{},"body":{"license.html":{}}}],["anything",{"_index":2353,"title":{},"body":{"license.html":{}}}],["ao",{"_index":3019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aos",{"_index":2137,"title":{},"body":{"index.html":{}}}],["api",{"_index":404,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["apibearerauth",{"_index":111,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["apioperation",{"_index":112,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["apiproperty",{"_index":37,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/SearchDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":1129,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["apitags",{"_index":113,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["apitags('album",{"_index":282,"title":{},"body":{"controllers/AlbumController.html":{}}}],["apitags('artist",{"_index":452,"title":{},"body":{"controllers/ArtistController.html":{}}}],["apitags('auth",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":662,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('country",{"_index":728,"title":{},"body":{"controllers/CountryController.html":{}}}],["apitags('home",{"_index":1055,"title":{},"body":{"controllers/HomePageController.html":{}}}],["apitags('manager",{"_index":127,"title":{},"body":{"controllers/AdminController.html":{}}}],["apitags('playlist",{"_index":1211,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["apitags('profile",{"_index":1278,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["apitags('song",{"_index":1391,"title":{},"body":{"controllers/SongController.html":{}}}],["apitags('status",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('user",{"_index":1525,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["aplication",{"_index":347,"title":{},"body":{"controllers/AppController.html":{}}}],["aplicação",{"_index":2065,"title":{},"body":{"index.html":{}}}],["app",{"_index":1252,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":1257,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":339,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appearance",{"_index":1762,"title":{},"body":{"contributing.html":{}}}],["applicable",{"_index":2358,"title":{},"body":{"license.html":{}}}],["applications",{"_index":2956,"title":{},"body":{"license.html":{}}}],["applied",{"_index":2318,"title":{},"body":{"license.html":{}}}],["applies",{"_index":1847,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["apply",{"_index":2229,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":360,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointed",{"_index":1860,"title":{},"body":{"contributing.html":{}}}],["appropriate",{"_index":1823,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["appropriately",{"_index":2522,"title":{},"body":{"license.html":{}}}],["approval",{"_index":3598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["approximates",{"_index":2917,"title":{},"body":{"license.html":{}}}],["appservice",{"_index":351,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["aprendemos",{"_index":2183,"title":{},"body":{"index.html":{}}}],["aprimorar",{"_index":1999,"title":{},"body":{"index.html":{}}}],["após",{"_index":2102,"title":{},"body":{"index.html":{}}}],["aq",{"_index":3023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ar",{"_index":3028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arab",{"_index":3268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arabia",{"_index":3410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["area",{"_index":2290,"title":{},"body":{"license.html":{}}}],["argentina",{"_index":3027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arise",{"_index":2297,"title":{},"body":{"license.html":{}}}],["arising",{"_index":2900,"title":{},"body":{"license.html":{}}}],["armenia",{"_index":3029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["around",{"_index":853,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["arquivo",{"_index":2070,"title":{},"body":{"index.html":{}}}],["arrange",{"_index":2813,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":2826,"title":{},"body":{"license.html":{}}}],["article",{"_index":2496,"title":{},"body":{"license.html":{}}}],["artist",{"_index":256,"title":{"classes/Artist.html":{}},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/CreateArtistDto.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginArtistDto.html":{},"injectables/ProfileFavoriteSongService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["artist')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{}}}],["artist(@loggedartist",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{}}}],["artist(artist",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{}}}],["artist)'})@httpcode(httpstatus.no_content",{"_index":265,"title":{},"body":{"controllers/AlbumController.html":{}}}],["artist.controller",{"_index":479,"title":{},"body":{"modules/ArtistModule.html":{}}}],["artist.decorator",{"_index":278,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/SongController.html":{}}}],["artist.decorator.ts",{"_index":1924,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["artist.dto",{"_index":450,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateArtistDto.html":{}}}],["artist.dto.ts",{"_index":826,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/LoginArtistDto.html":{},"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["artist.dto.ts:11",{"_index":1124,"title":{},"body":{"classes/LoginArtistDto.html":{}}}],["artist.dto.ts:19",{"_index":879,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/LoginArtistDto.html":{}}}],["artist.dto.ts:27",{"_index":877,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:35",{"_index":871,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:43",{"_index":874,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:54",{"_index":881,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:62",{"_index":860,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:71",{"_index":858,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:79",{"_index":867,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.password",{"_index":634,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["artist.service",{"_index":449,"title":{},"body":{"controllers/ArtistController.html":{},"modules/ArtistModule.html":{}}}],["artist.usercategoryname",{"_index":3543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artist/artist.module",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["artist@artist.com",{"_index":873,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/LoginArtistDto.html":{}}}],["artista",{"_index":2150,"title":{},"body":{"index.html":{}}}],["artistas",{"_index":2025,"title":{},"body":{"index.html":{}}}],["artistcontroller",{"_index":419,"title":{"controllers/ArtistController.html":{}},"body":{"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"coverage.html":{}}}],["artistdid",{"_index":1427,"title":{},"body":{"injectables/SongService.html":{}}}],["artistdiscography",{"_index":518,"title":{},"body":{"injectables/ArtistService.html":{}}}],["artistdiscography.albums.length",{"_index":520,"title":{},"body":{"injectables/ArtistService.html":{}}}],["artistid",{"_index":242,"title":{},"body":{"classes/Album.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/Music.html":{},"injectables/SongService.html":{}}}],["artistmodule",{"_index":364,"title":{"modules/ArtistModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules.html":{},"overview.html":{}}}],["artists",{"_index":434,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{}}}],["artists.length",{"_index":515,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/HomePageService.html":{}}}],["artistselect",{"_index":481,"title":{},"body":{"injectables/ArtistService.html":{}}}],["artistservice",{"_index":448,"title":{"injectables/ArtistService.html":{}},"body":{"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"coverage.html":{},"overview.html":{}}}],["aruba",{"_index":3030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asc",{"_index":1085,"title":{},"body":{"injectables/HomePageService.html":{}}}],["asking",{"_index":2243,"title":{},"body":{"license.html":{}}}],["assert",{"_index":2260,"title":{},"body":{"license.html":{}}}],["assets",{"_index":2767,"title":{},"body":{"license.html":{}}}],["assina",{"_index":2024,"title":{},"body":{"index.html":{}}}],["associate",{"_index":259,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/SongController.html":{}}}],["associated",{"_index":2441,"title":{},"body":{"license.html":{}}}],["assume",{"_index":2892,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":2921,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":2708,"title":{},"body":{"license.html":{}}}],["assures",{"_index":2321,"title":{},"body":{"license.html":{}}}],["async",{"_index":173,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["atenção",{"_index":2090,"title":{},"body":{"index.html":{}}}],["através",{"_index":2091,"title":{},"body":{"index.html":{}}}],["attach",{"_index":2927,"title":{},"body":{"license.html":{}}}],["attacks",{"_index":1802,"title":{},"body":{"contributing.html":{}}}],["attempt",{"_index":2721,"title":{},"body":{"license.html":{}}}],["attention",{"_index":1796,"title":{},"body":{"contributing.html":{}}}],["attributed",{"_index":2273,"title":{},"body":{"license.html":{}}}],["attribution",{"_index":1902,"title":{},"body":{"contributing.html":{}}}],["attributions",{"_index":2690,"title":{},"body":{"license.html":{}}}],["au",{"_index":3033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["australia",{"_index":3032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["austria",{"_index":3034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{},"todo.html":{}}}],["auth.controller",{"_index":605,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":530,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":1134,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["authentication",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":109,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["authmodule",{"_index":365,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2689,"title":{},"body":{"license.html":{},"properties.html":{}}}],["authorization",{"_index":2640,"title":{},"body":{"license.html":{}}}],["authorized",{"_index":1118,"title":{},"body":{"injectables/JwtStrategy.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["authorizes",{"_index":2789,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":2829,"title":{},"body":{"license.html":{}}}],["authors",{"_index":2228,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":572,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["automatic",{"_index":2758,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":2452,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["automaticamente",{"_index":2114,"title":{},"body":{"index.html":{}}}],["autores",{"_index":2155,"title":{},"body":{"index.html":{}}}],["available",{"_index":975,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePlanDto.html":{},"contributing.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["avoid",{"_index":2315,"title":{},"body":{"license.html":{}}}],["aw",{"_index":3031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":214,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":2216,"title":{},"body":{"license.html":{}}}],["ax",{"_index":3010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["az",{"_index":3036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["azerbaijan",{"_index":3035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b",{"_index":2418,"title":{},"body":{"license.html":{}}}],["b2d7",{"_index":980,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePlanDto.html":{}}}],["b593",{"_index":929,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{}}}],["ba",{"_index":3059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ba327f4d200c",{"_index":947,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["back",{"_index":1993,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":199,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{}}}],["badrequestexception('manager",{"_index":235,"title":{},"body":{"injectables/AdminService.html":{}}}],["badrequestexception('no",{"_index":521,"title":{},"body":{"injectables/ArtistService.html":{}}}],["badrequestexception('profile",{"_index":3625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception('the",{"_index":3623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bahamas",{"_index":3037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bahrain",{"_index":3039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ban",{"_index":1837,"title":{},"body":{"contributing.html":{}}}],["banco",{"_index":2078,"title":{},"body":{"index.html":{}}}],["band",{"_index":834,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["bangladesh",{"_index":3041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["barack",{"_index":918,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["barbados",{"_index":3043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["barbuda",{"_index":3025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1642,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["baseurl",{"_index":356,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["basic",{"_index":2453,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["bb",{"_index":3044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":202,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":624,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(data.password",{"_index":525,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["bcrypt.hash(dto.password",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["bcrypt.hash(obj.password",{"_index":2996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bd",{"_index":3042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bd74",{"_index":26,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["bdfe",{"_index":936,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/LoginProfileDto.html":{},"classes/UpdateSongDto.html":{}}}],["before",{"_index":1702,"title":{},"body":{"contributing.html":{}}}],["behalf",{"_index":2478,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":1768,"title":{},"body":{"contributing.html":{}}}],["behaviors",{"_index":1841,"title":{},"body":{"contributing.html":{}}}],["being",{"_index":1776,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["belarus",{"_index":3045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["belgium",{"_index":3046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["believe",{"_index":2822,"title":{},"body":{"license.html":{}}}],["belize",{"_index":3047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["below",{"_index":2483,"title":{},"body":{"license.html":{}}}],["benefit",{"_index":2816,"title":{},"body":{"license.html":{}}}],["benefited",{"_index":3618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["benefits",{"_index":3604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["benin",{"_index":3049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bermuda",{"_index":3051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["best",{"_index":1786,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["between",{"_index":1004,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["beyond",{"_index":2558,"title":{},"body":{"license.html":{}}}],["bf",{"_index":3079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bg",{"_index":3076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bh",{"_index":3040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bhutan",{"_index":3053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bi",{"_index":3081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bissau",{"_index":3199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bj",{"_index":3050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blue",{"_index":1994,"title":{},"body":{"index.html":{}}}],["blues",{"_index":3553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bm",{"_index":3052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bn",{"_index":3074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bo",{"_index":3056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":101,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"contributing.html":{},"license.html":{}}}],["bolivia",{"_index":3055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":904,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"classes/Playlist.html":{}}}],["bootstrap",{"_index":1929,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bosnia",{"_index":3057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["both",{"_index":1848,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["botswana",{"_index":3060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bouvet",{"_index":3062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["box",{"_index":2947,"title":{},"body":{"license.html":{}}}],["br",{"_index":3066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brazil",{"_index":3065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brings",{"_index":996,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"miscellaneous/variables.html":{}}}],["british",{"_index":3067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":2964,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2962,"title":{},"body":{"modules.html":{}}}],["brunei",{"_index":3072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bs",{"_index":3038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bt",{"_index":3054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1661,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["bulgaria",{"_index":3075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["burkina",{"_index":3077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["burundi",{"_index":3080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["business",{"_index":2834,"title":{},"body":{"license.html":{},"todo.html":{}}}],["bv",{"_index":3064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bw",{"_index":3061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bz",{"_index":3048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c",{"_index":2197,"title":{},"body":{"license.html":{}}}],["c079",{"_index":24,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["c6df1b67f0eb",{"_index":930,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{}}}],["ca",{"_index":3087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["caicos",{"_index":3484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["caledonia",{"_index":3331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["california",{"_index":838,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["called",{"_index":2348,"title":{},"body":{"license.html":{}}}],["cambodia",{"_index":3082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cameroon",{"_index":3084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canada",{"_index":3086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cape",{"_index":3088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carry",{"_index":2534,"title":{},"body":{"license.html":{}}}],["cascade",{"_index":1680,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":2402,"title":{},"body":{"license.html":{}}}],["cases",{"_index":2625,"title":{},"body":{"license.html":{}}}],["caso",{"_index":2111,"title":{},"body":{"index.html":{}}}],["catalog",{"_index":998,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["catch(handleerror",{"_index":218,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["categorie",{"_index":648,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories",{"_index":651,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/HomePageController.html":{}}}],["categories.ts",{"_index":1946,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["category",{"_index":635,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateSongDto.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{},"todo.html":{}}}],["category.controller",{"_index":681,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto",{"_index":661,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":885,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:11",{"_index":887,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.service",{"_index":660,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["category.ts",{"_index":1935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["category/category.module",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["categorycontroller",{"_index":641,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categoryid",{"_index":646,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateSongDto.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"changelog.html":{}}}],["categoryidexist",{"_index":1408,"title":{},"body":{"injectables/SongService.html":{},"changelog.html":{}}}],["categoryidexist(categoryids",{"_index":1413,"title":{},"body":{"injectables/SongService.html":{}}}],["categoryids",{"_index":1415,"title":{},"body":{"injectables/SongService.html":{}}}],["categorymodule",{"_index":366,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categorymusic",{"_index":2977,"title":{},"body":{"todo.html":{}}}],["categoryservice",{"_index":659,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["categorysongs",{"_index":701,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/SongService.html":{}}}],["cause",{"_index":2561,"title":{},"body":{"license.html":{}}}],["cayman",{"_index":3091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cc",{"_index":3107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cd",{"_index":2062,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["cease",{"_index":2725,"title":{},"body":{"license.html":{}}}],["central",{"_index":3093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certain",{"_index":2246,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":2737,"title":{},"body":{"license.html":{}}}],["cf",{"_index":3096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cg",{"_index":3113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ch",{"_index":3454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chad",{"_index":3097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["change",{"_index":1666,"title":{},"body":{"changelog.html":{},"contributing.html":{},"license.html":{}}}],["changed",{"_index":1672,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["changelog",{"_index":1637,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":1638,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["changing",{"_index":2207,"title":{},"body":{"license.html":{},"todo.html":{}}}],["characterized",{"_index":2653,"title":{},"body":{"license.html":{}}}],["charge",{"_index":2233,"title":{},"body":{"license.html":{}}}],["check",{"_index":2970,"title":{},"body":{"todo.html":{}}}],["children",{"_index":3622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chile",{"_index":3099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["china",{"_index":3101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["choose",{"_index":1015,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["choosing",{"_index":2880,"title":{},"body":{"license.html":{}}}],["chore(prisma",{"_index":1682,"title":{},"body":{"changelog.html":{}}}],["christmas",{"_index":3103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ci",{"_index":3122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["circumstances",{"_index":1881,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["circumvention",{"_index":2489,"title":{},"body":{"license.html":{}}}],["city",{"_index":3210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["civil",{"_index":2920,"title":{},"body":{"license.html":{}}}],["ck",{"_index":3116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cl",{"_index":3100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["claim",{"_index":2781,"title":{},"body":{"license.html":{}}}],["claims",{"_index":2791,"title":{},"body":{"license.html":{}}}],["clarified",{"_index":1866,"title":{},"body":{"contributing.html":{}}}],["clarifying",{"_index":1820,"title":{},"body":{"contributing.html":{}}}],["class",{"_index":0,"title":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/ProfileFavoriteSong.html":{},"classes/SearchDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"classes/UserPlan.html":{},"classes/UserProfileId.html":{}},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/ProfileFavoriteSong.html":{},"classes/SearchDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"classes/UserPlan.html":{},"classes/UserProfileId.html":{},"overview.html":{}}}],["clear",{"_index":2596,"title":{},"body":{"license.html":{}}}],["clearly",{"_index":2265,"title":{},"body":{"license.html":{}}}],["clone",{"_index":2054,"title":{},"body":{"index.html":{}}}],["closely",{"_index":2916,"title":{},"body":{"license.html":{}}}],["cluster_adminmodule",{"_index":153,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":154,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":155,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_albummodule",{"_index":297,"title":{},"body":{"modules/AlbumModule.html":{},"overview.html":{}}}],["cluster_albummodule_imports",{"_index":299,"title":{},"body":{"modules/AlbumModule.html":{}}}],["cluster_albummodule_providers",{"_index":298,"title":{},"body":{"modules/AlbumModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_artistmodule",{"_index":475,"title":{},"body":{"modules/ArtistModule.html":{},"overview.html":{}}}],["cluster_artistmodule_imports",{"_index":477,"title":{},"body":{"modules/ArtistModule.html":{}}}],["cluster_artistmodule_providers",{"_index":476,"title":{},"body":{"modules/ArtistModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":598,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":599,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":600,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":677,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":678,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":679,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_countrymodule",{"_index":740,"title":{},"body":{"modules/CountryModule.html":{},"overview.html":{}}}],["cluster_countrymodule_imports",{"_index":741,"title":{},"body":{"modules/CountryModule.html":{}}}],["cluster_countrymodule_providers",{"_index":742,"title":{},"body":{"modules/CountryModule.html":{},"overview.html":{}}}],["cluster_homepagemodule",{"_index":1063,"title":{},"body":{"modules/HomePageModule.html":{},"overview.html":{}}}],["cluster_homepagemodule_imports",{"_index":1064,"title":{},"body":{"modules/HomePageModule.html":{}}}],["cluster_homepagemodule_providers",{"_index":1065,"title":{},"body":{"modules/HomePageModule.html":{},"overview.html":{}}}],["cluster_playlistmodule",{"_index":1234,"title":{},"body":{"modules/PlaylistModule.html":{},"overview.html":{}}}],["cluster_playlistmodule_imports",{"_index":1236,"title":{},"body":{"modules/PlaylistModule.html":{}}}],["cluster_playlistmodule_providers",{"_index":1235,"title":{},"body":{"modules/PlaylistModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1239,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1240,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1241,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_profilefavoritesongmodule",{"_index":1310,"title":{},"body":{"modules/ProfileFavoriteSongModule.html":{},"overview.html":{}}}],["cluster_profilefavoritesongmodule_imports",{"_index":1312,"title":{},"body":{"modules/ProfileFavoriteSongModule.html":{}}}],["cluster_profilefavoritesongmodule_providers",{"_index":1311,"title":{},"body":{"modules/ProfileFavoriteSongModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":1350,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_imports",{"_index":1351,"title":{},"body":{"modules/ProfileModule.html":{}}}],["cluster_profilemodule_providers",{"_index":1352,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_songmodule",{"_index":1402,"title":{},"body":{"modules/SongModule.html":{},"overview.html":{}}}],["cluster_songmodule_imports",{"_index":1403,"title":{},"body":{"modules/SongModule.html":{}}}],["cluster_songmodule_providers",{"_index":1404,"title":{},"body":{"modules/SongModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1543,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1545,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1544,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userplanmodule",{"_index":1579,"title":{},"body":{"modules/UserPlanModule.html":{},"overview.html":{}}}],["cluster_userplanmodule_imports",{"_index":1580,"title":{},"body":{"modules/UserPlanModule.html":{}}}],["cluster_userplanmodule_providers",{"_index":1581,"title":{},"body":{"modules/UserPlanModule.html":{},"overview.html":{}}}],["clássica",{"_index":3554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cm",{"_index":3085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cn",{"_index":3102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["co",{"_index":3109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cocos",{"_index":3105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":703,"title":{},"body":{"classes/Country.html":{},"injectables/CountryService.html":{},"classes/CreateCountryDto.html":{},"contributing.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["collect",{"_index":2856,"title":{},"body":{"license.html":{}}}],["colocar",{"_index":2180,"title":{},"body":{"index.html":{}}}],["colombia",{"_index":3108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["com",{"_index":1996,"title":{},"body":{"index.html":{}}}],["comando",{"_index":2056,"title":{},"body":{"index.html":{}}}],["combination",{"_index":2864,"title":{},"body":{"license.html":{}}}],["combine",{"_index":2861,"title":{},"body":{"license.html":{}}}],["combined",{"_index":2552,"title":{},"body":{"license.html":{}}}],["comes",{"_index":2539,"title":{},"body":{"license.html":{}}}],["commands",{"_index":2390,"title":{},"body":{"license.html":{}}}],["comments",{"_index":1800,"title":{},"body":{"contributing.html":{}}}],["commercial",{"_index":2634,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":2806,"title":{},"body":{"license.html":{}}}],["commits",{"_index":1831,"title":{},"body":{"contributing.html":{}}}],["common",{"_index":2629,"title":{},"body":{"license.html":{}}}],["communication",{"_index":2448,"title":{},"body":{"license.html":{}}}],["community",{"_index":1748,"title":{},"body":{"contributing.html":{}}}],["como",{"_index":2012,"title":{},"body":{"index.html":{}}}],["comoros",{"_index":3110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compilation",{"_index":2547,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":2557,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":2839,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":2428,"title":{},"body":{"license.html":{}}}],["complaints",{"_index":1875,"title":{},"body":{"contributing.html":{}}}],["compliance",{"_index":2763,"title":{},"body":{"license.html":{}}}],["comply",{"_index":2475,"title":{},"body":{"license.html":{}}}],["compodoc",{"_index":2982,"title":{},"body":{"todo.html":{}}}],["component",{"_index":2417,"title":{},"body":{"license.html":{}}}],["computador",{"_index":2042,"title":{},"body":{"index.html":{}}}],["computer",{"_index":2362,"title":{},"body":{"license.html":{}}}],["computers",{"_index":2314,"title":{},"body":{"license.html":{}}}],["concerning",{"_index":2863,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":2870,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":2833,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":2326,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":1705,"title":{},"body":{"contributing.html":{}}}],["confidentiality",{"_index":1884,"title":{},"body":{"contributing.html":{}}}],["configurado",{"_index":2104,"title":{},"body":{"index.html":{}}}],["confirmation",{"_index":859,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["confirmação",{"_index":762,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["confirmpassword",{"_index":760,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["congo",{"_index":3112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["connection",{"_index":2824,"title":{},"body":{"license.html":{}}}],["consecutive",{"_index":3600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consequence",{"_index":2750,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":2899,"title":{},"body":{"license.html":{}}}],["consider",{"_index":2954,"title":{},"body":{"license.html":{}}}],["considered",{"_index":1814,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["consistent",{"_index":2799,"title":{},"body":{"license.html":{}}}],["console.error(error",{"_index":3531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(song",{"_index":1435,"title":{},"body":{"injectables/SongService.html":{}}}],["conspicuously",{"_index":2521,"title":{},"body":{"license.html":{}}}],["const",{"_index":212,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constantly",{"_index":2308,"title":{},"body":{"license.html":{}}}],["constitutes",{"_index":2465,"title":{},"body":{"license.html":{}}}],["constructive",{"_index":1783,"title":{},"body":{"contributing.html":{}}}],["constructor",{"_index":175,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["constructor(prisma",{"_index":176,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":129,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["construed",{"_index":2844,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":2614,"title":{},"body":{"license.html":{}}}],["contact",{"_index":2937,"title":{},"body":{"license.html":{}}}],["contacting",{"_index":1872,"title":{},"body":{"contributing.html":{}}}],["contain",{"_index":2840,"title":{},"body":{"license.html":{}}}],["container",{"_index":1726,"title":{},"body":{"contributing.html":{}}}],["containing",{"_index":2691,"title":{},"body":{"license.html":{}}}],["contains",{"_index":2711,"title":{},"body":{"license.html":{}}}],["content",{"_index":1009,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["contents",{"_index":2802,"title":{},"body":{"license.html":{}}}],["context",{"_index":2422,"title":{},"body":{"license.html":{}}}],["continue",{"_index":2659,"title":{},"body":{"license.html":{}}}],["continued",{"_index":2644,"title":{},"body":{"license.html":{}}}],["contractual",{"_index":2707,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":2850,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":2219,"title":{},"body":{"license.html":{}}}],["contrataagente",{"_index":2163,"title":{},"body":{"index.html":{}}}],["contribuir",{"_index":2153,"title":{},"body":{"index.html":{}}}],["contribuições",{"_index":2152,"title":{},"body":{"index.html":{}}}],["contributes",{"_index":1769,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":1691,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contributions",{"_index":1835,"title":{},"body":{"contributing.html":{}}}],["contributor",{"_index":1840,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["contributor's",{"_index":2790,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":1745,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":2435,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["controlled",{"_index":2793,"title":{},"body":{"license.html":{}}}],["controller",{"_index":62,"title":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"coverage.html":{}}}],["controller('/status",{"_index":354,"title":{},"body":{"controllers/AppController.html":{}}}],["controller('admin",{"_index":126,"title":{},"body":{"controllers/AdminController.html":{}}}],["controller('album",{"_index":283,"title":{},"body":{"controllers/AlbumController.html":{}}}],["controller('artist",{"_index":453,"title":{},"body":{"controllers/ArtistController.html":{}}}],["controller('auth",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('category",{"_index":663,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('country",{"_index":729,"title":{},"body":{"controllers/CountryController.html":{}}}],["controller('playlist",{"_index":1212,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["controller('profile",{"_index":1279,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('song",{"_index":1392,"title":{},"body":{"controllers/SongController.html":{}}}],["controller('tracks",{"_index":1302,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["controller('user",{"_index":1526,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["controllers",{"_index":64,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"overview.html":{}}}],["convenient",{"_index":2381,"title":{},"body":{"license.html":{}}}],["convey",{"_index":2367,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":2828,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":2654,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":2376,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":2706,"title":{},"body":{"license.html":{}}}],["cook",{"_index":3115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["copies",{"_index":851,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{}}}],["copy",{"_index":2203,"title":{},"body":{"license.html":{}}}],["copying",{"_index":2327,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":2210,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2196,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":2336,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":2480,"title":{},"body":{"license.html":{}}}],["correction",{"_index":1674,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["corrective",{"_index":1825,"title":{},"body":{"contributing.html":{}}}],["corresponding",{"_index":2431,"title":{},"body":{"license.html":{}}}],["cost",{"_index":2583,"title":{},"body":{"license.html":{}}}],["costa",{"_index":3117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cote",{"_index":3120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["counterclaim",{"_index":2782,"title":{},"body":{"license.html":{}}}],["countries",{"_index":718,"title":{},"body":{"controllers/CountryController.html":{},"license.html":{}}}],["country",{"_index":527,"title":{"classes/Country.html":{}},"body":{"injectables/ArtistService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCountryDto.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["country,controller",{"_index":744,"title":{},"body":{"modules/CountryModule.html":{}}}],["country.dto",{"_index":727,"title":{},"body":{"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/UpdateCountryDto.html":{}}}],["country.dto.ts",{"_index":890,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["country.dto.ts:11",{"_index":894,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:20",{"_index":893,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.service",{"_index":726,"title":{},"body":{"controllers/CountryController.html":{},"modules/CountryModule.html":{}}}],["country.ts",{"_index":1938,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country/country.module",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["countrycontroller",{"_index":709,"title":{"controllers/CountryController.html":{}},"body":{"controllers/CountryController.html":{},"modules/CountryModule.html":{},"coverage.html":{}}}],["countryid",{"_index":406,"title":{},"body":{"classes/Artist.html":{},"injectables/ArtistService.html":{},"classes/CreateArtistDto.html":{}}}],["countrymodule",{"_index":367,"title":{"modules/CountryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CountryModule.html":{},"modules.html":{},"overview.html":{}}}],["countryrelacion",{"_index":499,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/AuthService.html":{}}}],["countrys",{"_index":1939,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["countryservice",{"_index":725,"title":{"injectables/CountryService.html":{}},"body":{"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"coverage.html":{},"overview.html":{}}}],["couples",{"_index":3609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["course",{"_index":2945,"title":{},"body":{"license.html":{}}}],["court",{"_index":2849,"title":{},"body":{"license.html":{}}}],["courts",{"_index":2915,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":1904,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["covenant.org/version/1/4",{"_index":1907,"title":{},"body":{"contributing.html":{}}}],["coverage",{"_index":1908,"title":{"coverage.html":{}},"body":{"coverage.html":{},"license.html":{}}}],["covered",{"_index":2350,"title":{},"body":{"license.html":{}}}],["cpf",{"_index":47,"title":{},"body":{"classes/Admin.html":{},"injectables/AdminService.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["cr",{"_index":3119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create",{"_index":68,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateSongDto.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserPlanDto.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["create')@apioperation({summary",{"_index":1196,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["create(@body",{"_index":454,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/UserController.html":{}}}],["create(@loggedadmin",{"_index":664,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["create(@loggedartist",{"_index":285,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/SongController.html":{}}}],["create(@loggedmanager",{"_index":133,"title":{},"body":{"controllers/AdminController.html":{}}}],["create(admin",{"_index":73,"title":{},"body":{"controllers/AdminController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["create(artist",{"_index":255,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/SongController.html":{}}}],["create(artistid",{"_index":308,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/SongService.html":{}}}],["create(dto",{"_index":180,"title":{},"body":{"injectables/AdminService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"controllers/UserController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["create(userid",{"_index":1320,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["create(userprofileid",{"_index":1175,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["createadmindto",{"_index":75,"title":{"classes/CreateAdminDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["createalbumdto",{"_index":257,"title":{"classes/CreateAlbumDto.html":{}},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/CreateAlbumDto.html":{},"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["createartistdto",{"_index":424,"title":{"classes/CreateArtistDto.html":{}},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/CreateArtistDto.html":{},"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["createcategorydto",{"_index":643,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createcountrydto",{"_index":711,"title":{"classes/CreateCountryDto.html":{}},"body":{"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["created",{"_index":260,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/SongController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":49,"title":{},"body":{"classes/Admin.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/User.html":{},"classes/UserPlan.html":{}}}],["createmany",{"_index":1433,"title":{},"body":{"injectables/SongService.html":{}}}],["createparamdecorator",{"_index":3544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createparamdecorator((_",{"_index":3537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createplaylistdto",{"_index":897,"title":{"classes/CreatePlaylistDto.html":{}},"body":{"classes/CreatePlaylistDto.html":{},"controllers/PlaylistController.html":{},"classes/UpdatePlaylistDto.html":{},"coverage.html":{}}}],["createprofiledto",{"_index":912,"title":{"classes/CreateProfileDto.html":{}},"body":{"classes/CreateProfileDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["createprofilefavoritesongdto",{"_index":922,"title":{"classes/CreateProfileFavoriteSongDto.html":{}},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"coverage.html":{}}}],["createsongdto",{"_index":931,"title":{"classes/CreateSongDto.html":{}},"body":{"classes/CreateSongDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":959,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserplandto",{"_index":984,"title":{"classes/CreateUserPlanDto.html":{}},"body":{"classes/CreateUserPlanDto.html":{},"classes/UpdateUserPlanDto.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"coverage.html":{}}}],["creating",{"_index":1770,"title":{},"body":{"contributing.html":{},"todo.html":{}}}],["creator",{"_index":1192,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["criadas",{"_index":2139,"title":{},"body":{"index.html":{}}}],["criado",{"_index":2148,"title":{},"body":{"index.html":{}}}],["criar",{"_index":2002,"title":{},"body":{"index.html":{}}}],["crie",{"_index":2069,"title":{},"body":{"index.html":{}}}],["criterion",{"_index":2396,"title":{},"body":{"license.html":{}}}],["criticism",{"_index":1784,"title":{},"body":{"contributing.html":{}}}],["croatia",{"_index":3123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cross",{"_index":2780,"title":{},"body":{"license.html":{}}}],["crud",{"_index":2974,"title":{},"body":{"todo.html":{}}}],["cs",{"_index":3416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":3538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cu",{"_index":3126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cuba",{"_index":3125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cure",{"_index":2741,"title":{},"body":{"license.html":{}}}],["curso",{"_index":1991,"title":{},"body":{"index.html":{}}}],["customarily",{"_index":2572,"title":{},"body":{"license.html":{}}}],["customer",{"_index":2578,"title":{},"body":{"license.html":{}}}],["cv",{"_index":3090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cx",{"_index":3104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cy",{"_index":3128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cyprus",{"_index":3127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cz",{"_index":3130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["czech",{"_index":3129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["código",{"_index":2118,"title":{},"body":{"index.html":{}}}],["d",{"_index":2545,"title":{},"body":{"license.html":{}}}],["d'ivoire",{"_index":3121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d450edf0",{"_index":30,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["da",{"_index":763,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{},"index.html":{}}}],["dados",{"_index":2079,"title":{},"body":{"index.html":{}}}],["damages",{"_index":2897,"title":{},"body":{"license.html":{}}}],["danger",{"_index":2317,"title":{},"body":{"license.html":{}}}],["darussalam",{"_index":3073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["das",{"_index":2092,"title":{},"body":{"index.html":{}}}],["data",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"classes/LoginUserResponseDto.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["data.password",{"_index":232,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["database_url=\"postgresql://[nome",{"_index":2075,"title":{},"body":{"index.html":{}}}],["date",{"_index":55,"title":{},"body":{"classes/Admin.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/CreateArtistDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/User.html":{},"classes/UserPlan.html":{},"license.html":{}}}],["days",{"_index":2736,"title":{},"body":{"license.html":{}}}],["db",{"_index":2122,"title":{},"body":{"index.html":{}}}],["db.varchar",{"_index":1658,"title":{},"body":{"changelog.html":{}}}],["de",{"_index":1992,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["december",{"_index":2501,"title":{},"body":{"license.html":{}}}],["decide",{"_index":2878,"title":{},"body":{"license.html":{}}}],["declining",{"_index":2698,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"classes/UserProfileId.html":{}}}],["deem",{"_index":1842,"title":{},"body":{"contributing.html":{}}}],["deemed",{"_index":1879,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["default",{"_index":193,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":167,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["defective",{"_index":2891,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":2847,"title":{},"body":{"license.html":{}}}],["defined",{"_index":28,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"contributing.html":{},"license.html":{}}}],["definition",{"_index":2440,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":2330,"title":{},"body":{"license.html":{}}}],["delete",{"_index":69,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["delete('/delete",{"_index":469,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/UserController.html":{}}}],["delete('/delete')@useguards(undefined)@apibearerauth()@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":426,"title":{},"body":{"controllers/ArtistController.html":{}}}],["delete('/delete/:adminid",{"_index":145,"title":{},"body":{"controllers/AdminController.html":{}}}],["delete('/delete/:adminid')@apioperation({summary",{"_index":83,"title":{},"body":{"controllers/AdminController.html":{}}}],["delete('/delete/:artistid",{"_index":471,"title":{},"body":{"controllers/ArtistController.html":{}}}],["delete('/delete/:artistid')@useguards(undefined)@apibearerauth()@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":430,"title":{},"body":{"controllers/ArtistController.html":{}}}],["delete('/delete/:countryid",{"_index":738,"title":{},"body":{"controllers/CountryController.html":{}}}],["delete('/delete/:countryid')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":714,"title":{},"body":{"controllers/CountryController.html":{}}}],["delete('/delete/:songid",{"_index":1400,"title":{},"body":{"controllers/SongController.html":{}}}],["delete('/delete/:songid')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":1380,"title":{},"body":{"controllers/SongController.html":{}}}],["delete(':id",{"_index":1577,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["delete(':id')@useguards(undefined)@apibearerauth()@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":1561,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["delete('delete",{"_index":1182,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{}}}],["delete('delete')@apioperation({summary",{"_index":1268,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete('delete/:albumid",{"_index":293,"title":{},"body":{"controllers/AlbumController.html":{}}}],["delete('delete/:albumid')@apioperation({summary",{"_index":264,"title":{},"body":{"controllers/AlbumController.html":{}}}],["delete('delete/:categoryid",{"_index":674,"title":{},"body":{"controllers/CategoryController.html":{}}}],["delete('delete/:categoryid')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":647,"title":{},"body":{"controllers/CategoryController.html":{}}}],["delete('delete/:id",{"_index":1540,"title":{},"body":{"controllers/UserController.html":{}}}],["delete('delete/:id')@useguards(undefined)@apibearerauth()@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":1507,"title":{},"body":{"controllers/UserController.html":{}}}],["delete('delete/:playlistid",{"_index":1223,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["delete('delete/:playlistid')@apioperation({summary",{"_index":1178,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["delete('delete/:songid",{"_index":1308,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["delete('delete/:songid')@apioperation({summary",{"_index":1297,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["delete('spotify",{"_index":1200,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["delete(@loggedadmin",{"_index":675,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["delete(@loggedartist",{"_index":294,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/SongController.html":{}}}],["delete(@loggedmanager",{"_index":147,"title":{},"body":{"controllers/AdminController.html":{}}}],["delete(@loggeduser",{"_index":1285,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(admin",{"_index":82,"title":{},"body":{"controllers/AdminController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["delete(artist",{"_index":262,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/SongController.html":{}}}],["delete(artistid",{"_index":310,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/SongService.html":{}}}],["delete(categoryid",{"_index":685,"title":{},"body":{"injectables/CategoryService.html":{}}}],["delete(id",{"_index":183,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CountryService.html":{},"injectables/UserPlanService.html":{}}}],["delete(userid",{"_index":1322,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["delete(userprofileid",{"_index":1177,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["delete/:playlistid",{"_index":1232,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["delete/:playlistid')@apioperation({summary",{"_index":1201,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["deleteartist",{"_index":421,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["deleteartist(@loggedadmin",{"_index":472,"title":{},"body":{"controllers/ArtistController.html":{}}}],["deleteartist(admin",{"_index":429,"title":{},"body":{"controllers/ArtistController.html":{}}}],["deleteartist(id",{"_index":487,"title":{},"body":{"injectables/ArtistService.html":{}}}],["deleted",{"_index":236,"title":{},"body":{"injectables/AdminService.html":{}}}],["deletemyaccount",{"_index":1496,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletemyaccount(@loggeduser",{"_index":1538,"title":{},"body":{"controllers/UserController.html":{}}}],["deletemyaccount(userid",{"_index":1610,"title":{},"body":{"injectables/UserService.html":{}}}],["deletemyaccount(userprofileid",{"_index":1503,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteplaylistfavorite",{"_index":1157,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["deleteplaylistfavorite(userprofileid",{"_index":1181,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["deletesongtoplaylist",{"_index":1158,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["deletesongtoplaylist(userprofileid",{"_index":1184,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["deleteuser",{"_index":1497,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@loggedadmin",{"_index":1541,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(admin",{"_index":1506,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":1612,"title":{},"body":{"injectables/UserService.html":{}}}],["democratic",{"_index":3114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["denied",{"_index":2662,"title":{},"body":{"license.html":{}}}],["denmark",{"_index":3131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["denominated",{"_index":2807,"title":{},"body":{"license.html":{}}}],["deny",{"_index":2277,"title":{},"body":{"license.html":{}}}],["denying",{"_index":2242,"title":{},"body":{"license.html":{}}}],["dependencias",{"_index":2106,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":152,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"contributing.html":{},"dependencies.html":{},"overview.html":{}}}],["dependendo",{"_index":2021,"title":{},"body":{"index.html":{}}}],["deprive",{"_index":2814,"title":{},"body":{"license.html":{}}}],["description",{"_index":42,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/SearchDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserPlan.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["desenvolvedor",{"_index":2164,"title":{},"body":{"index.html":{}}}],["desenvolvido",{"_index":1988,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":2107,"title":{},"body":{"index.html":{}}}],["designated",{"_index":2591,"title":{},"body":{"license.html":{}}}],["designed",{"_index":2215,"title":{},"body":{"license.html":{}}}],["desse",{"_index":2156,"title":{},"body":{"index.html":{}}}],["detail",{"_index":2869,"title":{},"body":{"license.html":{}}}],["details",{"_index":1717,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["details.the",{"_index":2943,"title":{},"body":{"license.html":{}}}],["determined",{"_index":1899,"title":{},"body":{"contributing.html":{}}}],["determining",{"_index":2623,"title":{},"body":{"license.html":{}}}],["develop",{"_index":2923,"title":{},"body":{"license.html":{}}}],["developers",{"_index":1737,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["development",{"_index":2312,"title":{},"body":{"license.html":{}}}],["devices",{"_index":2276,"title":{},"body":{"license.html":{}}}],["differ",{"_index":2868,"title":{},"body":{"license.html":{}}}],["different",{"_index":2593,"title":{},"body":{"license.html":{}}}],["differently",{"_index":2686,"title":{},"body":{"license.html":{}}}],["differing",{"_index":1778,"title":{},"body":{"contributing.html":{}}}],["digite",{"_index":2066,"title":{},"body":{"index.html":{}}}],["direction",{"_index":2479,"title":{},"body":{"license.html":{}}}],["directions",{"_index":2597,"title":{},"body":{"license.html":{}}}],["directly",{"_index":2354,"title":{},"body":{"license.html":{}}}],["disability",{"_index":1754,"title":{},"body":{"contributing.html":{}}}],["disclaim",{"_index":2512,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":2881,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":2683,"title":{},"body":{"license.html":{}}}],["discount",{"_index":3596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discriminatory",{"_index":2831,"title":{},"body":{"license.html":{}}}],["discuss",{"_index":1695,"title":{},"body":{"contributing.html":{}}}],["display",{"_index":2546,"title":{},"body":{"license.html":{}}}],["displayed",{"_index":1191,"title":{},"body":{"controllers/PlaylistController.html":{},"license.html":{}}}],["displays",{"_index":2378,"title":{},"body":{"license.html":{}}}],["disponível",{"_index":2125,"title":{},"body":{"index.html":{}}}],["disso",{"_index":2029,"title":{},"body":{"index.html":{}}}],["distinguishing",{"_index":2871,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":2204,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2934,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":2835,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":2328,"title":{},"body":{"license.html":{}}}],["dj",{"_index":3134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["djibouti",{"_index":3133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dk",{"_index":3132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dm",{"_index":3136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":1652,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":400,"title":{},"body":{"injectables/AppService.html":{}}}],["document",{"_index":2206,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":1909,"title":{},"body":{"coverage.html":{},"todo.html":{}}}],["documented",{"_index":1640,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["doing",{"_index":1715,"title":{},"body":{"contributing.html":{}}}],["domains",{"_index":2299,"title":{},"body":{"license.html":{}}}],["dominica",{"_index":3135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dominican",{"_index":3137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["done",{"_index":2973,"title":{},"body":{"todo.html":{}}}],["door",{"_index":951,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["doubtful",{"_index":2624,"title":{},"body":{"license.html":{}}}],["download",{"_index":1008,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"miscellaneous/variables.html":{}}}],["downstream",{"_index":2760,"title":{},"body":{"license.html":{}}}],["dto",{"_index":74,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["dto.about",{"_index":506,"title":{},"body":{"injectables/ArtistService.html":{}}}],["dto.albumid",{"_index":1432,"title":{},"body":{"injectables/SongService.html":{}}}],["dto.categoryid.map((categoryid",{"_index":1434,"title":{},"body":{"injectables/SongService.html":{}}}],["dto.confirmpassword",{"_index":211,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["dto.countryid",{"_index":507,"title":{},"body":{"injectables/ArtistService.html":{}}}],["dto.cpf",{"_index":505,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["dto.email",{"_index":217,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["dto.image",{"_index":504,"title":{},"body":{"injectables/ArtistService.html":{}}}],["dto.name",{"_index":503,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["dto.password",{"_index":230,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["dto.search",{"_index":1087,"title":{},"body":{"injectables/HomePageService.html":{}}}],["dto.songurl",{"_index":1431,"title":{},"body":{"injectables/SongService.html":{}}}],["dto.userplanid",{"_index":1630,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/create",{"_index":121,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["dto/logged",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/login",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/search.dto",{"_index":1052,"title":{},"body":{"controllers/HomePageController.html":{},"injectables/HomePageService.html":{}}}],["dto/update",{"_index":123,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["duo",{"_index":3605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["durable",{"_index":2571,"title":{},"body":{"license.html":{}}}],["during",{"_index":3594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dwelling",{"_index":2622,"title":{},"body":{"license.html":{}}}],["dynamically",{"_index":2443,"title":{},"body":{"license.html":{}}}],["dz",{"_index":3014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e",{"_index":1854,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["each",{"_index":940,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["earlier",{"_index":2349,"title":{},"body":{"license.html":{}}}],["ec",{"_index":3139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ecuador",{"_index":3138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["edit",{"_index":98,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"changelog.html":{},"contributing.html":{}}}],["edits",{"_index":1833,"title":{},"body":{"contributing.html":{}}}],["edtech",{"_index":1995,"title":{},"body":{"index.html":{}}}],["education",{"_index":3592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ee",{"_index":3151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effect",{"_index":2912,"title":{},"body":{"license.html":{}}}],["effected",{"_index":2510,"title":{},"body":{"license.html":{}}}],["effective",{"_index":2491,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":2319,"title":{},"body":{"license.html":{}}}],["efforts",{"_index":2774,"title":{},"body":{"license.html":{}}}],["eg",{"_index":3141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["egypt",{"_index":3140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eh",{"_index":3518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el",{"_index":3142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ele",{"_index":2023,"title":{},"body":{"index.html":{}}}],["electronic",{"_index":1809,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["eletrônica",{"_index":3555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["em",{"_index":1998,"title":{},"body":{"index.html":{}}}],["email",{"_index":50,"title":{},"body":{"classes/Admin.html":{},"injectables/AdminService.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"contributing.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["embodied",{"_index":2567,"title":{},"body":{"license.html":{}}}],["emirates",{"_index":3492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empathy",{"_index":1788,"title":{},"body":{"contributing.html":{}}}],["employer",{"_index":2948,"title":{},"body":{"license.html":{}}}],["empresa",{"_index":2161,"title":{},"body":{"index.html":{}}}],["enable",{"_index":2420,"title":{},"body":{"license.html":{}}}],["enables",{"_index":2369,"title":{},"body":{"license.html":{}}}],["enableshutdownhooks",{"_index":1247,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1249,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":1713,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["endereço",{"_index":2132,"title":{},"body":{"index.html":{}}}],["enforce",{"_index":1892,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["enforcement",{"_index":1867,"title":{},"body":{"contributing.html":{}}}],["enforcing",{"_index":2516,"title":{},"body":{"license.html":{}}}],["ensinamento",{"_index":2177,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":1710,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["entered",{"_index":2841,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["entire",{"_index":997,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["entirely",{"_index":2858,"title":{},"body":{"license.html":{}}}],["entities/admin.entity",{"_index":125,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["entities/artist.entity",{"_index":451,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["entities/country,entity",{"_index":753,"title":{},"body":{"injectables/CountryService.html":{}}}],["entities/profile.entity",{"_index":1363,"title":{},"body":{"injectables/ProfileService.html":{}}}],["entities/user",{"_index":1594,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["entities/user.entity",{"_index":1627,"title":{},"body":{"injectables/UserService.html":{}}}],["entity",{"_index":2764,"title":{},"body":{"license.html":{}}}],["env",{"_index":2071,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":2074,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1720,"title":{},"body":{"contributing.html":{}}}],["eps",{"_index":844,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["equatorial",{"_index":3145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equivalent",{"_index":2467,"title":{},"body":{"license.html":{}}}],["er",{"_index":3149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eritrea",{"_index":3148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["erro",{"_index":3534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["erroneously",{"_index":2274,"title":{},"body":{"license.html":{}}}],["error",{"_index":1668,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["error.message?.split('\\n",{"_index":3527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error.util",{"_index":209,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["error.util.ts",{"_index":1952,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorlines",{"_index":3526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errorlines[errorlines.length",{"_index":3529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errors",{"_index":1687,"title":{},"body":{"changelog.html":{}}}],["es",{"_index":3437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["especificadas",{"_index":2094,"title":{},"body":{"index.html":{}}}],["esse",{"_index":2055,"title":{},"body":{"index.html":{}}}],["essential",{"_index":2423,"title":{},"body":{"license.html":{}}}],["est",{"_index":2080,"title":{},"body":{"index.html":{}}}],["estar",{"_index":2124,"title":{},"body":{"index.html":{}}}],["este",{"_index":1985,"title":{},"body":{"index.html":{}}}],["estonia",{"_index":3150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["et",{"_index":3153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ethiopia",{"_index":3152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ethnicity",{"_index":1755,"title":{},"body":{"contributing.html":{}}}],["even",{"_index":2909,"title":{},"body":{"license.html":{}}}],["event",{"_index":1863,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["everyone",{"_index":908,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"contributing.html":{},"license.html":{}}}],["ex",{"_index":2082,"title":{},"body":{"index.html":{}}}],["exact",{"_index":2346,"title":{},"body":{"license.html":{}}}],["example",{"_index":22,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/SearchDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"license.html":{}}}],["examples",{"_index":1729,"title":{},"body":{"contributing.html":{}}}],["except",{"_index":2360,"title":{},"body":{"license.html":{}}}],["exceptions",{"_index":2675,"title":{},"body":{"license.html":{}}}],["excluded",{"_index":2612,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":2845,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":2930,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":2800,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":2472,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":2851,"title":{},"body":{"license.html":{}}}],["executable",{"_index":2411,"title":{},"body":{"license.html":{}}}],["executar",{"_index":2046,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["execute",{"_index":2108,"title":{},"body":{"index.html":{},"license.html":{}}}],["executing",{"_index":2361,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":3539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exemplo",{"_index":2053,"title":{},"body":{"index.html":{}}}],["exercise",{"_index":2775,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":2511,"title":{},"body":{"license.html":{}}}],["expected",{"_index":1822,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["expects",{"_index":2632,"title":{},"body":{"license.html":{}}}],["experience",{"_index":1750,"title":{},"body":{"contributing.html":{}}}],["experiences",{"_index":1780,"title":{},"body":{"contributing.html":{}}}],["expiresin",{"_index":611,"title":{},"body":{"modules/AuthModule.html":{}}}],["explains",{"_index":2266,"title":{},"body":{"license.html":{}}}],["explicit",{"_index":1812,"title":{},"body":{"contributing.html":{},"miscellaneous/variables.html":{}}}],["explicitly",{"_index":2460,"title":{},"body":{"license.html":{}}}],["export",{"_index":41,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":1243,"title":{},"body":{"modules/PrismaModule.html":{}}}],["exposed",{"_index":1722,"title":{},"body":{"contributing.html":{}}}],["express",{"_index":350,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":2883,"title":{},"body":{"license.html":{}}}],["expression",{"_index":1758,"title":{},"body":{"contributing.html":{}}}],["expressly",{"_index":2720,"title":{},"body":{"license.html":{}}}],["extend",{"_index":2302,"title":{},"body":{"license.html":{}}}],["extended",{"_index":2830,"title":{},"body":{"license.html":{}}}],["extends",{"_index":1108,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserPlanDto.html":{}}}],["extensions",{"_index":2551,"title":{},"body":{"license.html":{}}}],["extent",{"_index":2380,"title":{},"body":{"license.html":{}}}],["extractjwt",{"_index":1105,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1112,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjuawnrbmftzsi6imd1dhmilcjpyxqioje2ntq4mjqwmdusimv4cci6mty1ndkxmdqwnx0.d3wiqiyk5lqumcybyl",{"_index":1131,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["f",{"_index":2704,"title":{},"body":{"license.html":{}}}],["f8e87669ec99",{"_index":27,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["face",{"_index":1895,"title":{},"body":{"contributing.html":{}}}],["facilities",{"_index":2474,"title":{},"body":{"license.html":{}}}],["fails",{"_index":2732,"title":{},"body":{"license.html":{}}}],["failure",{"_index":2907,"title":{},"body":{"license.html":{}}}],["fair",{"_index":1824,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["faith",{"_index":1894,"title":{},"body":{"contributing.html":{}}}],["falkland",{"_index":3154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":909,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"injectables/JwtStrategy.html":{}}}],["family",{"_index":2618,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["faroe",{"_index":3157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fashion",{"_index":2344,"title":{},"body":{"license.html":{}}}],["faso",{"_index":3078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["favor",{"_index":2627,"title":{},"body":{"license.html":{}}}],["favoritar",{"_index":2142,"title":{},"body":{"index.html":{}}}],["favorite",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"controllers/PlaylistController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"changelog.html":{},"coverage.html":{}}}],["favorite/:playlistid",{"_index":1227,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["favorite/:playlistid')@apioperation({summary",{"_index":1166,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["favorited",{"_index":925,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{}}}],["favoriteplaylists",{"_index":1079,"title":{},"body":{"injectables/HomePageService.html":{}}}],["favorites",{"_index":1294,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["favoritesongservice",{"_index":1303,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["fazer",{"_index":2115,"title":{},"body":{"index.html":{}}}],["faça",{"_index":2089,"title":{},"body":{"index.html":{}}}],["feat",{"_index":1659,"title":{},"body":{"changelog.html":{}}}],["feat(album",{"_index":1677,"title":{},"body":{"changelog.html":{}}}],["feat(artist",{"_index":1685,"title":{},"body":{"changelog.html":{}}}],["feat(category",{"_index":1662,"title":{},"body":{"changelog.html":{}}}],["feat(playlist",{"_index":1655,"title":{},"body":{"changelog.html":{}}}],["feat(prisma",{"_index":1678,"title":{},"body":{"changelog.html":{}}}],["feat(profile",{"_index":1667,"title":{},"body":{"changelog.html":{}}}],["feat(schema",{"_index":1670,"title":{},"body":{"changelog.html":{}}}],["feat(song",{"_index":1664,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":2384,"title":{},"body":{"license.html":{}}}],["federated",{"_index":3307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["federation",{"_index":3383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fee",{"_index":2250,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":89,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ArtistController.html":{},"controllers/ProfileController.html":{}}}],["fi",{"_index":3162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":522,"title":{},"body":{"injectables/ArtistService.html":{}}}],["fiji",{"_index":3159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"license.html":{}}}],["files",{"_index":1660,"title":{},"body":{"changelog.html":{},"contributing.html":{},"license.html":{}}}],["finally",{"_index":2306,"title":{},"body":{"license.html":{}}}],["find",{"_index":2599,"title":{},"body":{"license.html":{}}}],["findall",{"_index":70,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["findall(@loggedadmin",{"_index":1528,"title":{},"body":{"controllers/UserController.html":{}}}],["findall(@loggedmanager",{"_index":136,"title":{},"body":{"controllers/AdminController.html":{}}}],["findall(@loggeduser",{"_index":1281,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{}}}],["findall(admin",{"_index":86,"title":{},"body":{"controllers/AdminController.html":{},"controllers/UserController.html":{}}}],["findall(user",{"_index":1382,"title":{},"body":{"controllers/SongController.html":{}}}],["findall(userid",{"_index":1324,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["findall(userprofileid",{"_index":1270,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["findallplaylistprofile",{"_index":1159,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["findallplaylistprofile(@loggeduser",{"_index":1216,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["findallplaylistprofile(userprofileid",{"_index":1187,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["findbyid",{"_index":174,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["findbyid(artistid",{"_index":1419,"title":{},"body":{"injectables/SongService.html":{}}}],["findbyid(categoryid",{"_index":688,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findbyid(id",{"_index":186,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CountryService.html":{}}}],["findbyid(userid",{"_index":1615,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyidprofileuser",{"_index":1316,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["findbyidprofileuser(userid",{"_index":1326,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["findbyidsonginprofile",{"_index":1317,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["findbyidsonginprofile(profileid",{"_index":1328,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["findmany",{"_index":228,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["findmyaccount",{"_index":1498,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findmyaccount(@loggeduser",{"_index":1530,"title":{},"body":{"controllers/UserController.html":{}}}],["findmyaccount(userid",{"_index":1617,"title":{},"body":{"injectables/UserService.html":{}}}],["findmyaccount(userprofileid",{"_index":1511,"title":{},"body":{"controllers/UserController.html":{}}}],["findone",{"_index":71,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{}}}],["findone(@loggedmanager",{"_index":139,"title":{},"body":{"controllers/AdminController.html":{}}}],["findone(@loggeduser",{"_index":1396,"title":{},"body":{"controllers/SongController.html":{}}}],["findone(@param('albumid",{"_index":288,"title":{},"body":{"controllers/AlbumController.html":{}}}],["findone(@param('artistid",{"_index":462,"title":{},"body":{"controllers/ArtistController.html":{}}}],["findone(@param('categoryid",{"_index":669,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findone(@param('countryid",{"_index":733,"title":{},"body":{"controllers/CountryController.html":{}}}],["findone(@param('id",{"_index":1573,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["findone(admin",{"_index":92,"title":{},"body":{"controllers/AdminController.html":{}}}],["findone(albumid",{"_index":267,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{}}}],["findone(categoryid",{"_index":653,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findone(id",{"_index":188,"title":{},"body":{"injectables/AdminService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{}}}],["findone(songid",{"_index":1421,"title":{},"body":{"injectables/SongService.html":{}}}],["findone(user",{"_index":1384,"title":{},"body":{"controllers/SongController.html":{}}}],["findonealbuminartist",{"_index":305,"title":{},"body":{"injectables/AlbumService.html":{},"changelog.html":{}}}],["findonealbuminartist(artistid",{"_index":313,"title":{},"body":{"injectables/AlbumService.html":{}}}],["findoneartist",{"_index":482,"title":{},"body":{"injectables/ArtistService.html":{}}}],["findoneartist(artistid",{"_index":491,"title":{},"body":{"injectables/ArtistService.html":{}}}],["findonebyartist",{"_index":422,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["findonebyartist(@param('artistid",{"_index":465,"title":{},"body":{"controllers/ArtistController.html":{}}}],["findonebyartist(artistid",{"_index":438,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["findonebyartsit",{"_index":1409,"title":{},"body":{"injectables/SongService.html":{}}}],["findonebyartsit(artistid",{"_index":1423,"title":{},"body":{"injectables/SongService.html":{}}}],["findoneplaylist",{"_index":1160,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["findoneplaylist(userprofileid",{"_index":1189,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["findoneprofileinuser",{"_index":1069,"title":{},"body":{"injectables/HomePageService.html":{},"injectables/ProfileService.html":{}}}],["findoneprofileinuser(userid",{"_index":1071,"title":{},"body":{"injectables/HomePageService.html":{},"injectables/ProfileService.html":{}}}],["findoneuser",{"_index":1499,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findoneuser(@loggedadmin",{"_index":1533,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuser(admin",{"_index":1515,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuser(id",{"_index":1619,"title":{},"body":{"injectables/UserService.html":{}}}],["findunique",{"_index":216,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["finland",{"_index":3161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["first",{"_index":1694,"title":{},"body":{"contributing.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["fitness",{"_index":2886,"title":{},"body":{"license.html":{}}}],["fix",{"_index":1690,"title":{},"body":{"changelog.html":{}}}],["fix(auth",{"_index":1673,"title":{},"body":{"changelog.html":{}}}],["fix(country",{"_index":1688,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":2570,"title":{},"body":{"license.html":{}}}],["fj",{"_index":3160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fk",{"_index":3156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flow",{"_index":2449,"title":{},"body":{"license.html":{}}}],["fm",{"_index":3308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fo",{"_index":3158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foco",{"_index":1997,"title":{},"body":{"index.html":{}}}],["focusing",{"_index":1785,"title":{},"body":{"contributing.html":{}}}],["foi",{"_index":1987,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1706,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["following",{"_index":2803,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":2509,"title":{},"body":{"license.html":{}}}],["force",{"_index":2469,"title":{},"body":{"license.html":{}}}],["form",{"_index":2398,"title":{},"body":{"license.html":{}}}],["format",{"_index":1641,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["formed",{"_index":835,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["former",{"_index":3280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forms",{"_index":2562,"title":{},"body":{"license.html":{}}}],["forr",{"_index":3556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["for})@httpcode(httpstatus.ok",{"_index":1049,"title":{},"body":{"controllers/HomePageController.html":{}}}],["fostering",{"_index":1743,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":239,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["foundation",{"_index":2199,"title":{},"body":{"license.html":{}}}],["fr",{"_index":3164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fraca",{"_index":801,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["fraca'})@apiproperty({description",{"_index":787,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["france",{"_index":3163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":995,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"contributing.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["freedom",{"_index":2217,"title":{},"body":{"license.html":{}}}],["freedoms",{"_index":2254,"title":{},"body":{"license.html":{}}}],["french",{"_index":3165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fulfilling",{"_index":2494,"title":{},"body":{"license.html":{}}}],["full",{"_index":2933,"title":{},"body":{"license.html":{}}}],["funcionalidades",{"_index":2016,"title":{},"body":{"index.html":{}}}],["funcionamento",{"_index":2100,"title":{},"body":{"index.html":{}}}],["function",{"_index":1928,"title":{},"body":{"coverage.html":{}}}],["functioning",{"_index":2645,"title":{},"body":{"license.html":{}}}],["functions",{"_index":1983,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fundamentally",{"_index":2282,"title":{},"body":{"license.html":{}}}],["funk",{"_index":3557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["further",{"_index":1865,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["futuna",{"_index":3514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["future",{"_index":2304,"title":{},"body":{"license.html":{}}}],["ga",{"_index":3174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gabon",{"_index":3173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gambia",{"_index":3175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gb",{"_index":3495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gd",{"_index":3189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ge",{"_index":3178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gender",{"_index":1756,"title":{},"body":{"contributing.html":{}}}],["general",{"_index":2171,"title":{},"body":{"index.html":{},"license.html":{}}}],["generally",{"_index":2438,"title":{},"body":{"license.html":{}}}],["generate",{"_index":2432,"title":{},"body":{"license.html":{}}}],["generated",{"_index":1130,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["genre",{"_index":2981,"title":{},"body":{"todo.html":{}}}],["georgia",{"_index":3177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gerir",{"_index":2033,"title":{},"body":{"index.html":{}}}],["germany",{"_index":3179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get('/:artistid",{"_index":461,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/:artistid')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":436,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/:artistid/discography",{"_index":464,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/:artistid/discography')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":439,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/:countryid",{"_index":732,"title":{},"body":{"controllers/CountryController.html":{}}}],["get('/:countryid')@apioperation({summary",{"_index":720,"title":{},"body":{"controllers/CountryController.html":{}}}],["get('/:playlistid",{"_index":1218,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["get('/:playlistid')@apioperation({summary",{"_index":1190,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["get('/:songid",{"_index":1395,"title":{},"body":{"controllers/SongController.html":{}}}],["get('/:songid')@apioperation({summary",{"_index":1385,"title":{},"body":{"controllers/SongController.html":{}}}],["get('/admin",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/admin')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/all",{"_index":459,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/SongController.html":{}}}],["get('/all')@apioperation({summary",{"_index":717,"title":{},"body":{"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/SongController.html":{}}}],["get('/all')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":432,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/artist",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/artist')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/find",{"_index":87,"title":{},"body":{"controllers/AdminController.html":{}}}],["get('/home",{"_index":456,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/home')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":442,"title":{},"body":{"controllers/ArtistController.html":{}}}],["get('/my",{"_index":1512,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/search/:id",{"_index":1532,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/search/:id')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":1516,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/user",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/user')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':albumid",{"_index":287,"title":{},"body":{"controllers/AlbumController.html":{}}}],["get(':albumid')@apioperation({summary",{"_index":268,"title":{},"body":{"controllers/AlbumController.html":{}}}],["get(':categoryid",{"_index":668,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':categoryid')@apioperation({summary",{"_index":654,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':id",{"_index":1572,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["get(':id')@apioperation({summary",{"_index":1564,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["get('all",{"_index":666,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/UserController.html":{}}}],["get('all')@apioperation({summary",{"_index":650,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["get('all')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":1509,"title":{},"body":{"controllers/UserController.html":{}}}],["get()@apioperation({summary",{"_index":345,"title":{},"body":{"controllers/AppController.html":{},"controllers/HomePageController.html":{},"controllers/UserPlanController.html":{}}}],["getappstatus",{"_index":342,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getappstatus(@req",{"_index":355,"title":{},"body":{"controllers/AppController.html":{}}}],["getappstatus(baseurl",{"_index":398,"title":{},"body":{"injectables/AppService.html":{}}}],["getappstatus(req",{"_index":343,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":1635,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["gf",{"_index":3167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gg",{"_index":3197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gh",{"_index":3181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ghana",{"_index":3180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gi",{"_index":3183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gibraltar",{"_index":3182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["git",{"_index":2057,"title":{},"body":{"index.html":{}}}],["github",{"_index":2166,"title":{},"body":{"index.html":{}}}],["give",{"_index":2530,"title":{},"body":{"license.html":{}}}],["given",{"_index":2464,"title":{},"body":{"license.html":{}}}],["gives",{"_index":2543,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["giving",{"_index":2262,"title":{},"body":{"license.html":{}}}],["gl",{"_index":3187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gm",{"_index":3176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gn",{"_index":3198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gnu",{"_index":2173,"title":{},"body":{"index.html":{},"license.html":{}}}],["good",{"_index":1893,"title":{},"body":{"contributing.html":{},"miscellaneous/variables.html":{}}}],["gospel",{"_index":3558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["governed",{"_index":2678,"title":{},"body":{"license.html":{}}}],["gp",{"_index":3191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gpl",{"_index":2258,"title":{},"body":{"license.html":{}}}],["gq",{"_index":3147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gr",{"_index":3185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gracefully",{"_index":1781,"title":{},"body":{"contributing.html":{}}}],["grant",{"_index":2699,"title":{},"body":{"license.html":{}}}],["granted",{"_index":2455,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2753,"title":{},"body":{"license.html":{}}}],["gratis",{"_index":2249,"title":{},"body":{"license.html":{}}}],["greater",{"_index":338,"title":{},"body":{"injectables/AlbumService.html":{}}}],["greatest",{"_index":2924,"title":{},"body":{"license.html":{}}}],["greece",{"_index":3184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["greenland",{"_index":3186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grenada",{"_index":3188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grenadines",{"_index":3399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gs",{"_index":3435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gt",{"_index":3195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gu",{"_index":3193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guadeloupe",{"_index":3190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guam",{"_index":3192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guarantee",{"_index":2221,"title":{},"body":{"license.html":{}}}],["guatemala",{"_index":3194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guernsey",{"_index":3196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gui",{"_index":2946,"title":{},"body":{"license.html":{}}}],["guiana",{"_index":3166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guinea",{"_index":3146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guns",{"_index":828,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["gustavo",{"_index":970,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["guyana",{"_index":3201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gw",{"_index":3200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gy",{"_index":3202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["habilidades",{"_index":2001,"title":{},"body":{"index.html":{}}}],["haiti",{"_index":3203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handleerror",{"_index":207,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":1669,"title":{},"body":{"changelog.html":{}}}],["harassing",{"_index":1869,"title":{},"body":{"contributing.html":{}}}],["harassment",{"_index":1749,"title":{},"body":{"contributing.html":{}}}],["hard",{"_index":832,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["harmful",{"_index":1845,"title":{},"body":{"contributing.html":{}}}],["having",{"_index":2471,"title":{},"body":{"license.html":{}}}],["heard",{"_index":3205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["helena",{"_index":3388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hell",{"_index":952,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["hereafter",{"_index":2796,"title":{},"body":{"license.html":{}}}],["herzegovina",{"_index":3058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["higher",{"_index":3591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hip",{"_index":3559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hk",{"_index":3216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hm",{"_index":3207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hn",{"_index":3213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holder",{"_index":2727,"title":{},"body":{"license.html":{}}}],["holders",{"_index":2682,"title":{},"body":{"license.html":{}}}],["holy",{"_index":3208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["home",{"_index":394,"title":{},"body":{"modules/AppModule.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{}}}],["homepage",{"_index":423,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"todo.html":{}}}],["homepage(@loggedartist",{"_index":457,"title":{},"body":{"controllers/ArtistController.html":{}}}],["homepage(@loggeduser",{"_index":1056,"title":{},"body":{"controllers/HomePageController.html":{}}}],["homepage(artist",{"_index":441,"title":{},"body":{"controllers/ArtistController.html":{}}}],["homepage(artistid",{"_index":494,"title":{},"body":{"injectables/ArtistService.html":{}}}],["homepage(userid",{"_index":1074,"title":{},"body":{"injectables/HomePageService.html":{}}}],["homepage(userprofile",{"_index":1037,"title":{},"body":{"controllers/HomePageController.html":{}}}],["homepagecontroller",{"_index":1033,"title":{"controllers/HomePageController.html":{}},"body":{"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"coverage.html":{}}}],["homepagemodule",{"_index":368,"title":{"modules/HomePageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"modules.html":{},"overview.html":{}}}],["homepageservice",{"_index":1053,"title":{"injectables/HomePageService.html":{}},"body":{"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"coverage.html":{},"overview.html":{}}}],["honduras",{"_index":3212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hong",{"_index":3214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hop",{"_index":3560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hope",{"_index":2935,"title":{},"body":{"license.html":{}}}],["hosts",{"_index":2600,"title":{},"body":{"license.html":{}}}],["household",{"_index":2619,"title":{},"body":{"license.html":{}}}],["hr",{"_index":3124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ht",{"_index":3204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://contributor",{"_index":1906,"title":{},"body":{"contributing.html":{}}}],["httpcode",{"_index":102,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["httpcode(httpstatus.created",{"_index":1228,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":146,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["httpcode(httpstatus.ok",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HomePageController.html":{}}}],["https://fsf.org",{"_index":2201,"title":{},"body":{"license.html":{}}}],["https://github.com/mlucasdev/spotify",{"_index":2058,"title":{},"body":{"index.html":{}}}],["https://i.scdn.co/image/ab6761610000e5eb50defaf9fc059a1efc541f4c",{"_index":876,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["https://image",{"_index":807,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["https://nodejs.org/en/download",{"_index":2049,"title":{},"body":{"index.html":{}}}],["https://playlistimage.jpg",{"_index":900,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["https://profileimage.jpg",{"_index":915,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["https://www.gnu.org/licenses",{"_index":2951,"title":{},"body":{"license.html":{}}}],["https://www.gnu.org/licenses/why",{"_index":2960,"title":{},"body":{"license.html":{}}}],["https://www.postgresql.org/download",{"_index":2051,"title":{},"body":{"index.html":{}}}],["https://youtu.be/zqo7j2yfofs",{"_index":955,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["httpstatus",{"_index":103,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["hu",{"_index":3218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hungary",{"_index":3217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hypothetical",{"_index":2944,"title":{},"body":{"license.html":{}}}],["iceland",{"_index":3219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":18,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"injectables/AlbumService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"injectables/HomePageService.html":{},"classes/LoginProfileDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["idealizador",{"_index":2165,"title":{},"body":{"index.html":{}}}],["identifiable",{"_index":2820,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":1910,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":1757,"title":{},"body":{"contributing.html":{}}}],["ie",{"_index":3228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ignoreexpiration",{"_index":1113,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["il",{"_index":3233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["illusion",{"_index":814,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["im",{"_index":3231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image",{"_index":243,"title":{},"body":{"classes/Album.html":{},"injectables/AlbumService.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"injectables/HomePageService.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["imagery",{"_index":1794,"title":{},"body":{"contributing.html":{}}}],["implement",{"_index":1657,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["implementation",{"_index":2421,"title":{},"body":{"license.html":{}}}],["implements",{"_index":1254,"title":{},"body":{"injectables/PrismaService.html":{}}}],["implemetn",{"_index":1656,"title":{},"body":{"changelog.html":{}}}],["implied",{"_index":2846,"title":{},"body":{"license.html":{}}}],["import",{"_index":36,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"license.html":{}}}],["importante",{"_index":2088,"title":{},"body":{"index.html":{}}}],["importing",{"_index":2788,"title":{},"body":{"license.html":{}}}],["imports",{"_index":162,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"changelog.html":{}}}],["impose",{"_index":2709,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":2848,"title":{},"body":{"license.html":{}}}],["imprescindível",{"_index":2037,"title":{},"body":{"index.html":{}}}],["inability",{"_index":2901,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":2904,"title":{},"body":{"license.html":{}}}],["inappropriate",{"_index":1815,"title":{},"body":{"contributing.html":{}}}],["inc",{"_index":2200,"title":{},"body":{"license.html":{}}}],["incident",{"_index":1887,"title":{},"body":{"contributing.html":{}}}],["incidental",{"_index":2898,"title":{},"body":{"license.html":{}}}],["include",{"_index":1772,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["included",{"_index":2413,"title":{},"body":{"license.html":{}}}],["includes",{"_index":1719,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["including",{"_index":2433,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":2560,"title":{},"body":{"license.html":{}}}],["inclusive",{"_index":1774,"title":{},"body":{"contributing.html":{}}}],["incompatible",{"_index":2283,"title":{},"body":{"license.html":{}}}],["incorporating",{"_index":2952,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":2621,"title":{},"body":{"license.html":{}}}],["increase",{"_index":1727,"title":{},"body":{"contributing.html":{}}}],["indemnification",{"_index":2705,"title":{},"body":{"license.html":{}}}],["independent",{"_index":2549,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["india",{"_index":3220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indian",{"_index":3068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicar",{"_index":2158,"title":{},"body":{"index.html":{}}}],["indicate",{"_index":2757,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":2717,"title":{},"body":{"license.html":{}}}],["individual",{"_index":1851,"title":{},"body":{"contributing.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["individuals",{"_index":2292,"title":{},"body":{"license.html":{}}}],["indonesia",{"_index":3221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["industrial",{"_index":2635,"title":{},"body":{"license.html":{}}}],["inestapplication",{"_index":1250,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{}}}],["inform",{"_index":2606,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":1806,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["informações",{"_index":2093,"title":{},"body":{"index.html":{}}}],["informed",{"_index":523,"title":{},"body":{"injectables/ArtistService.html":{},"miscellaneous/variables.html":{}}}],["infringe",{"_index":2755,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":2785,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":2357,"title":{},"body":{"license.html":{}}}],["initiate",{"_index":2778,"title":{},"body":{"license.html":{}}}],["injectable",{"_index":169,"title":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/AppService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/AppService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/AppService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["insensitive",{"_index":1089,"title":{},"body":{"injectables/HomePageService.html":{}}}],["insert",{"_index":1874,"title":{},"body":{"contributing.html":{}}}],["inside",{"_index":2279,"title":{},"body":{"license.html":{}}}],["instalado",{"_index":2040,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":2052,"title":{},"body":{"index.html":{}}}],["install",{"_index":1711,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["installation",{"_index":2638,"title":{},"body":{"license.html":{}}}],["installed",{"_index":2657,"title":{},"body":{"license.html":{}}}],["instances",{"_index":1828,"title":{},"body":{"contributing.html":{}}}],["instead",{"_index":2958,"title":{},"body":{"license.html":{}}}],["institutions",{"_index":3593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instrumental",{"_index":3561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insulting/derogatory",{"_index":1799,"title":{},"body":{"contributing.html":{}}}],["intact",{"_index":2524,"title":{},"body":{"license.html":{}}}],["intended",{"_index":2220,"title":{},"body":{"license.html":{}}}],["intention",{"_index":2513,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":2372,"title":{},"body":{"license.html":{}}}],["interactions",{"_index":1707,"title":{},"body":{"contributing.html":{}}}],["interactive",{"_index":2377,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":2573,"title":{},"body":{"license.html":{}}}],["interest",{"_index":1742,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["interface",{"_index":1718,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["interfaces",{"_index":2403,"title":{},"body":{"license.html":{}}}],["interfered",{"_index":2647,"title":{},"body":{"license.html":{}}}],["interpretation",{"_index":2911,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":2430,"title":{},"body":{"license.html":{}}}],["intimate",{"_index":2447,"title":{},"body":{"license.html":{}}}],["invalidate",{"_index":2544,"title":{},"body":{"license.html":{}}}],["investigated",{"_index":1877,"title":{},"body":{"contributing.html":{}}}],["io",{"_index":3071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iq",{"_index":3226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ir",{"_index":3224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iran",{"_index":3222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iraq",{"_index":3225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ireland",{"_index":3227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["irrevocable",{"_index":2457,"title":{},"body":{"license.html":{}}}],["isboolean",{"_index":911,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["isboolean()@apiproperty({description",{"_index":905,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["isemail",{"_index":789,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["isemail()@isnotempty()@apiproperty({description",{"_index":1120,"title":{},"body":{"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginUserDto.html":{}}}],["isemail()@isnotempty()@length(5",{"_index":772,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{}}}],["isemail()@length(5",{"_index":872,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["ishashvalid",{"_index":623,"title":{},"body":{"injectables/AuthService.html":{}}}],["islamic",{"_index":3223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["island",{"_index":3063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["islands",{"_index":3009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isle",{"_index":3229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":790,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginUserDto.html":{},"classes/SearchDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isnumber()@apiproperty({description",{"_index":816,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["isnotempty()@isoptional()@isemail()@apiproperty({description",{"_index":1475,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isnotempty()@isoptional()@isstring()@length(3",{"_index":1476,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring()@length(1",{"_index":810,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateProfileDto.html":{}}}],["isnotempty()@isurl()@length(5",{"_index":804,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateProfileDto.html":{}}}],["isnumber",{"_index":820,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateUserPlanDto.html":{}}}],["isnumber()@min(1)@isnotempty()@apiproperty({description",{"_index":990,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["isnumber({maxdecimalplaces",{"_index":1023,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["isoptional",{"_index":1452,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isemail()@isnotempty()@length(5",{"_index":1446,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["isoptional()@isstring()@apiproperty({description",{"_index":1472,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring()@isnotempty()@apiproperty({description",{"_index":1444,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["isoptional()@isstring()@length(11",{"_index":1474,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring()@length(3",{"_index":1448,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["isoptional()@isstring()@length(8",{"_index":1450,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["isoptional()@isstring()@minlength(8)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":1477,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isuuid()@apiproperty({description",{"_index":1464,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["israel",{"_index":3232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isso",{"_index":2128,"title":{},"body":{"index.html":{}}}],["isstring",{"_index":791,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginUserDto.html":{},"classes/SearchDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@apiproperty({description",{"_index":963,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":761,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCountryDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginUserDto.html":{},"classes/SearchDto.html":{}}}],["isstring()@isnotempty()@length(11",{"_index":767,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@length(2",{"_index":891,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["isstring()@isnotempty()@length(3",{"_index":969,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@length(1",{"_index":878,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["isstring()@length(10",{"_index":827,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserPlanDto.html":{}}}],["isstring()@length(11",{"_index":868,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["isstring()@length(2",{"_index":1020,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["isstring()@length(3",{"_index":776,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["isstring()@length(50)@apiproperty({description",{"_index":886,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["isstring()@length(8",{"_index":781,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{}}}],["issue",{"_index":1699,"title":{},"body":{"contributing.html":{}}}],["issues",{"_index":1834,"title":{},"body":{"contributing.html":{}}}],["isurl",{"_index":821,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["isurl()@length(1",{"_index":875,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreatePlaylistDto.html":{}}}],["isurl()@maxlength(2000)@apiproperty({description",{"_index":954,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["isuuid",{"_index":39,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginProfileDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UserProfileId.html":{}}}],["isuuid()@apiproperty({description",{"_index":17,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginProfileDto.html":{}}}],["isuuid()@isnotempty()@apiproperty({description",{"_index":861,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["isuuid(undefined",{"_index":939,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["italy",{"_index":3234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item",{"_index":2394,"title":{},"body":{"license.html":{}}}],["itself",{"_index":2663,"title":{},"body":{"license.html":{}}}],["j",{"_index":2064,"title":{},"body":{"index.html":{}}}],["jamahiriya",{"_index":3269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jamaica",{"_index":3235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jan",{"_index":3446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["japan",{"_index":3237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jazz",{"_index":3562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["je",{"_index":3240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jersey",{"_index":3239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jm",{"_index":3236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jo",{"_index":3242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jordan",{"_index":3241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jp",{"_index":3238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["june",{"_index":2194,"title":{},"body":{"license.html":{}}}],["jwt",{"_index":168,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserResponseDto.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":1111,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":603,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":607,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":614,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":601,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["k",{"_index":3563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kazakhstan",{"_index":3243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ke",{"_index":3246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keeling",{"_index":3106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keep",{"_index":1643,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["kenya",{"_index":3245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kernel",{"_index":2424,"title":{},"body":{"license.html":{}}}],["key",{"_index":2671,"title":{},"body":{"license.html":{}}}],["keys",{"_index":2641,"title":{},"body":{"license.html":{}}}],["kg",{"_index":3256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kh",{"_index":3083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ki",{"_index":3248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kids",{"_index":3621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":2368,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":2211,"title":{},"body":{"license.html":{}}}],["kingdom",{"_index":3494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kiribati",{"_index":3247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kitts",{"_index":3390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["km",{"_index":3111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kn",{"_index":3392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["know",{"_index":2236,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":2809,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":2818,"title":{},"body":{"license.html":{}}}],["kong",{"_index":3215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["korea",{"_index":3249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kp",{"_index":3251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kr",{"_index":3252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kuwait",{"_index":3253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kw",{"_index":3254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ky",{"_index":3092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kyrgyzstan",{"_index":3255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kz",{"_index":3244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["la",{"_index":3258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["land",{"_index":3008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":1775,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["lanka",{"_index":3439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lao",{"_index":3257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["larger",{"_index":2553,"title":{},"body":{"license.html":{}}}],["lasterrorline",{"_index":3528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":2874,"title":{},"body":{"license.html":{}}}],["latvia",{"_index":3259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["law",{"_index":2359,"title":{},"body":{"license.html":{}}}],["laws",{"_index":2333,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":2783,"title":{},"body":{"license.html":{}}}],["layer",{"_index":1714,"title":{},"body":{"contributing.html":{}}}],["lb",{"_index":3262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lbuns",{"_index":2138,"title":{},"body":{"index.html":{}}}],["lc",{"_index":3394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leadership",{"_index":1901,"title":{},"body":{"contributing.html":{}}}],["lebanon",{"_index":3261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legal",{"_index":2263,"title":{},"body":{"license.html":{}}}],["length",{"_index":792,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["length(1",{"_index":822,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["length(10",{"_index":883,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserPlanDto.html":{}}}],["length(11",{"_index":796,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["length(2",{"_index":895,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/CreateUserPlanDto.html":{}}}],["length(3",{"_index":794,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["length(5",{"_index":798,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{}}}],["length(50",{"_index":888,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["length(8",{"_index":799,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{}}}],["leo",{"_index":2187,"title":{},"body":{"index.html":{}}}],["leone",{"_index":3420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lesotho",{"_index":3263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["less",{"_index":336,"title":{},"body":{"injectables/AlbumService.html":{}}}],["lesser",{"_index":2957,"title":{},"body":{"license.html":{}}}],["leste",{"_index":3467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["level",{"_index":1759,"title":{},"body":{"contributing.html":{}}}],["lgpl.html",{"_index":2961,"title":{},"body":{"license.html":{}}}],["li",{"_index":3272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["liability",{"_index":2685,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2356,"title":{},"body":{"license.html":{}}}],["liberia",{"_index":3265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libraries",{"_index":2410,"title":{},"body":{"license.html":{}}}],["library",{"_index":2613,"title":{},"body":{"license.html":{}}}],["libyan",{"_index":3267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":2172,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2337,"title":{},"body":{"license.html":{}}}],["licensee",{"_index":2339,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":2341,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":2213,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":2759,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":2697,"title":{},"body":{"license.html":{}}}],["licença",{"_index":2170,"title":{},"body":{"index.html":{}}}],["liechtenstein",{"_index":3271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["likewise",{"_index":2751,"title":{},"body":{"license.html":{}}}],["limit",{"_index":2514,"title":{},"body":{"license.html":{}}}],["limitation",{"_index":2895,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2884,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":2684,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1367,"title":{},"body":{"injectables/ProfileService.html":{}}}],["line",{"_index":2931,"title":{},"body":{"license.html":{}}}],["link",{"_index":2860,"title":{},"body":{"license.html":{}}}],["linked",{"_index":1197,"title":{},"body":{"controllers/PlaylistController.html":{},"license.html":{}}}],["linkedin",{"_index":2167,"title":{},"body":{"index.html":{}}}],["linking",{"_index":2955,"title":{},"body":{"license.html":{}}}],["list",{"_index":433,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"license.html":{}}}],["literal",{"_index":1101,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["lithuania",{"_index":3273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["litigation",{"_index":2779,"title":{},"body":{"license.html":{}}}],["live",{"_index":846,"title":{},"body":{"classes/CreateArtistDto.html":{},"miscellaneous/variables.html":{}}}],["lk",{"_index":3440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lo",{"_index":3565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":1972,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["localhost:3006/api",{"_index":2133,"title":{},"body":{"index.html":{}}}],["locations",{"_index":1725,"title":{},"body":{"contributing.html":{}}}],["log",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{}}}],["logged",{"_index":99,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["loggedadmin",{"_index":114,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggedartist",{"_index":277,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/SongController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggedmanager",{"_index":117,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggeduser",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":1122,"title":{},"body":{"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{}}}],["loginadmin",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginadmin(@body",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginadmin(loginadmindto",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginadmindto",{"_index":546,"title":{"classes/LoginAdminDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginAdminDto.html":{},"coverage.html":{}}}],["loginartist",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginartist(@body",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginartist(loginartistdto",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginartistdto",{"_index":555,"title":{"classes/LoginArtistDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginArtistDto.html":{},"coverage.html":{}}}],["loginprofile",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginprofile(user",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginprofiledto",{"_index":560,"title":{"classes/LoginProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginProfileDto.html":{},"coverage.html":{}}}],["loginprofiledto.profileid",{"_index":629,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginuser(@body",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(loginuserdto",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":564,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserresponsedto",{"_index":577,"title":{"classes/LoginUserResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserResponseDto.html":{},"coverage.html":{}}}],["long",{"_index":2468,"title":{},"body":{"license.html":{}}}],["looking",{"_index":1048,"title":{},"body":{"controllers/HomePageController.html":{}}}],["los",{"_index":836,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["loss",{"_index":2902,"title":{},"body":{"license.html":{}}}],["losses",{"_index":2905,"title":{},"body":{"license.html":{}}}],["lr",{"_index":3266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ls",{"_index":3264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lt",{"_index":3274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lu",{"_index":3276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lucas",{"_index":2168,"title":{},"body":{"index.html":{}}}],["lucia",{"_index":3393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["luxembourg",{"_index":3275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lv",{"_index":3260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ly",{"_index":3270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ma",{"_index":3318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["macao",{"_index":3277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["macedonia",{"_index":3279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["machine",{"_index":2564,"title":{},"body":{"license.html":{}}}],["madagascar",{"_index":3283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["made",{"_index":2648,"title":{},"body":{"license.html":{}}}],["mail",{"_index":1855,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["maintain",{"_index":1883,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["maintainers",{"_index":1746,"title":{},"body":{"contributing.html":{}}}],["mais",{"_index":2087,"title":{},"body":{"index.html":{}}}],["major",{"_index":2416,"title":{},"body":{"license.html":{}}}],["make",{"_index":1697,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["makes",{"_index":2486,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":1703,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["malawi",{"_index":3285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["malaysia",{"_index":3287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maldives",{"_index":3288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mali",{"_index":3290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["malta",{"_index":3292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["malvinas",{"_index":3155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["man",{"_index":3230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manager",{"_index":78,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["manager)'})@httpcode(httpstatus.no_content",{"_index":84,"title":{},"body":{"controllers/AdminController.html":{}}}],["manager.decorator",{"_index":118,"title":{},"body":{"controllers/AdminController.html":{}}}],["manager.decorator.ts",{"_index":1925,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.usercategoryname",{"_index":234,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["manager@manager.com",{"_index":3000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manageradmin.dto",{"_index":124,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["manageradmin.dto.ts",{"_index":1443,"title":{},"body":{"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["manageradmin.dto.ts:19",{"_index":1449,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["manageradmin.dto.ts:29",{"_index":1447,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["manageradmin.dto.ts:41",{"_index":1451,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["manageradmin.dto.ts:50",{"_index":1445,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["manner",{"_index":2797,"title":{},"body":{"license.html":{}}}],["manufacturer",{"_index":2281,"title":{},"body":{"license.html":{}}}],["march",{"_index":2843,"title":{},"body":{"license.html":{}}}],["marcus",{"_index":2189,"title":{},"body":{"index.html":{}}}],["maria",{"_index":778,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["mariana",{"_index":3346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marino",{"_index":3403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marked",{"_index":2271,"title":{},"body":{"license.html":{}}}],["marks",{"_index":2703,"title":{},"body":{"license.html":{}}}],["marques",{"_index":2169,"title":{},"body":{"index.html":{}}}],["marshall",{"_index":3294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["martinique",{"_index":3296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["martins",{"_index":971,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["masks",{"_index":2335,"title":{},"body":{"license.html":{}}}],["matches",{"_index":793,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":800,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["matching",{"_index":44,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2476,"title":{},"body":{"license.html":{}}}],["materially",{"_index":2664,"title":{},"body":{"license.html":{}}}],["mauritania",{"_index":3298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mauritius",{"_index":3300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxdecimalplaces",{"_index":1028,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["maxlength",{"_index":957,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateSongDto.html":{}}}],["maxlength(2000",{"_index":958,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["mayen",{"_index":3447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mayotte",{"_index":3302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mc",{"_index":3312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mcdonald",{"_index":3206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["md",{"_index":3310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meaning",{"_index":2710,"title":{},"body":{"license.html":{}}}],["means",{"_index":2332,"title":{},"body":{"license.html":{}}}],["measure",{"_index":2493,"title":{},"body":{"license.html":{}}}],["measures",{"_index":2506,"title":{},"body":{"license.html":{}}}],["media",{"_index":1858,"title":{},"body":{"contributing.html":{}}}],["medium",{"_index":2520,"title":{},"body":{"license.html":{}}}],["meet",{"_index":2533,"title":{},"body":{"license.html":{}}}],["meets",{"_index":2395,"title":{},"body":{"license.html":{}}}],["members",{"_index":1790,"title":{},"body":{"contributing.html":{}}}],["mentioned",{"_index":3610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["menu",{"_index":2392,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":2885,"title":{},"body":{"license.html":{}}}],["mere",{"_index":2371,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1733,"title":{},"body":{"contributing.html":{}}}],["merging",{"_index":2769,"title":{},"body":{"license.html":{}}}],["message",{"_index":785,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["met",{"_index":2459,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1974,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1700,"title":{},"body":{"contributing.html":{}}}],["methods",{"_index":67,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["mexico",{"_index":3304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mg",{"_index":3284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mh",{"_index":3295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["micronesia",{"_index":3306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["million",{"_index":850,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["min",{"_index":1026,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["min(0",{"_index":1029,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["min(1",{"_index":1031,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["minlength",{"_index":983,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(8",{"_index":1479,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["minor",{"_index":3496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miquelon",{"_index":3396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1982,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misrepresentation",{"_index":2692,"title":{},"body":{"license.html":{}}}],["mix",{"_index":3612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mk",{"_index":3282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ml",{"_index":3291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":3322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mn",{"_index":3314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mo",{"_index":3278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mobile",{"_index":1012,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["mode",{"_index":1088,"title":{},"body":{"injectables/HomePageService.html":{},"license.html":{}}}],["model",{"_index":2579,"title":{},"body":{"license.html":{}}}],["modification",{"_index":2329,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":2399,"title":{},"body":{"license.html":{}}}],["modified",{"_index":2270,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":2537,"title":{},"body":{"license.html":{}}}],["modify",{"_index":2247,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":2363,"title":{},"body":{"license.html":{}}}],["module",{"_index":149,"title":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["modules",{"_index":151,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"modules.html":{},"overview.html":{}}}],["moldova",{"_index":3309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["monaco",{"_index":3311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongolia",{"_index":3313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["montenegro",{"_index":3415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["month",{"_index":3587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["monthly",{"_index":3602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["months",{"_index":3601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["montserrat",{"_index":3315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":2581,"title":{},"body":{"license.html":{}}}],["moreover",{"_index":2738,"title":{},"body":{"license.html":{}}}],["morocco",{"_index":3317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mozambique",{"_index":3319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mp",{"_index":3347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mpb",{"_index":3566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mq",{"_index":3297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mr",{"_index":3299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ms",{"_index":3316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mt",{"_index":3293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mu",{"_index":3301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["muito",{"_index":786,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["music",{"_index":644,"title":{"classes/Music.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"classes/Music.html":{},"controllers/ProfileFavoriteSongController.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["musiccategorie",{"_index":1947,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["musiccategories",{"_index":1082,"title":{},"body":{"injectables/HomePageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["musicfavorite",{"_index":2976,"title":{},"body":{"todo.html":{}}}],["musicurl",{"_index":1137,"title":{},"body":{"classes/Music.html":{}}}],["mv",{"_index":3289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mw",{"_index":3286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mx",{"_index":3305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myanmar",{"_index":3321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mz",{"_index":3320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["módulo",{"_index":1990,"title":{},"body":{"index.html":{}}}],["módulos",{"_index":2184,"title":{},"body":{"index.html":{}}}],["músicas",{"_index":2136,"title":{},"body":{"index.html":{}}}],["n",{"_index":829,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["na",{"_index":2160,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["nam",{"_index":3507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":51,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":2696,"title":{},"body":{"license.html":{}}}],["namibia",{"_index":3323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nationality",{"_index":1760,"title":{},"body":{"contributing.html":{}}}],["nature",{"_index":2550,"title":{},"body":{"license.html":{}}}],["nauru",{"_index":3324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["navegador",{"_index":2127,"title":{},"body":{"index.html":{}}}],["nc",{"_index":3332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ne",{"_index":3338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessary",{"_index":1880,"title":{},"body":{"contributing.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":2240,"title":{},"body":{"license.html":{}}}],["needed",{"_index":2305,"title":{},"body":{"license.html":{}}}],["nele",{"_index":2095,"title":{},"body":{"index.html":{}}}],["nepal",{"_index":3326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs",{"_index":2007,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":108,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1958,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":604,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1960,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":110,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1963,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":38,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"dependencies.html":{}}}],["netherlands",{"_index":3328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["network",{"_index":2374,"title":{},"body":{"license.html":{}}}],["nevis",{"_index":3391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":77,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"contributing.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":950,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{},"license.html":{}}}],["nf",{"_index":3344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ng",{"_index":3340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ni",{"_index":3336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nicaragua",{"_index":3335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["niger",{"_index":3337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nigeria",{"_index":3339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["niue",{"_index":3341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nl",{"_index":3329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":2048,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":2044,"title":{},"body":{"index.html":{}}}],["nome",{"_index":777,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["non",{"_index":2324,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":2587,"title":{},"body":{"license.html":{}}}],["norfolk",{"_index":3343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normal",{"_index":2414,"title":{},"body":{"license.html":{}}}],["normally",{"_index":2617,"title":{},"body":{"license.html":{}}}],["northern",{"_index":3345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["norway",{"_index":3348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nos",{"_index":2157,"title":{},"body":{"index.html":{}}}],["nossas",{"_index":2000,"title":{},"body":{"index.html":{}}}],["notable",{"_index":1001,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"changelog.html":{}}}],["note",{"_index":1704,"title":{},"body":{"contributing.html":{}}}],["notfoundexception",{"_index":200,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('no",{"_index":514,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('nothing",{"_index":1094,"title":{},"body":{"injectables/HomePageService.html":{}}}],["notfoundexception('profile",{"_index":1345,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["notfoundexception('user",{"_index":1602,"title":{},"body":{"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["notfoundexception(`album",{"_index":328,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/SongService.html":{}}}],["notfoundexception(`artist",{"_index":517,"title":{},"body":{"injectables/ArtistService.html":{}}}],["notfoundexception(`category",{"_index":1441,"title":{},"body":{"injectables/SongService.html":{}}}],["notfoundexception(`country",{"_index":529,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/CountryService.html":{}}}],["notfoundexception(`profile",{"_index":1096,"title":{},"body":{"injectables/HomePageService.html":{}}}],["notfoundexception(`record",{"_index":238,"title":{},"body":{"injectables/AdminService.html":{},"injectables/UserService.html":{}}}],["notfoundexception(`song",{"_index":1349,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"injectables/SongService.html":{}}}],["nothing",{"_index":2752,"title":{},"body":{"license.html":{}}}],["notice",{"_index":2385,"title":{},"body":{"license.html":{}}}],["notices",{"_index":2379,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":2739,"title":{},"body":{"license.html":{}}}],["notify",{"_index":2733,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":2681,"title":{},"body":{"license.html":{}}}],["now",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{}}}],["np",{"_index":3327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":2068,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2121,"title":{},"body":{"index.html":{}}}],["nr",{"_index":3325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nu",{"_index":3342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":251,"title":{},"body":{"classes/Album.html":{},"injectables/AlbumService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/UserPlan.html":{},"license.html":{}}}],["numbered",{"_index":2873,"title":{},"body":{"license.html":{}}}],["numbers",{"_index":1728,"title":{},"body":{"contributing.html":{}}}],["nz",{"_index":3334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["não",{"_index":2129,"title":{},"body":{"index.html":{}}}],["o",{"_index":2043,"title":{},"body":{"index.html":{}}}],["obama",{"_index":919,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["obj",{"_index":2993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obj.cpf",{"_index":2998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obj.name",{"_index":3004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obj.password",{"_index":2995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":192,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"license.html":{}}}],["object.entries(seed",{"_index":3575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(admins",{"_index":2994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(countrys",{"_index":3002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(musiccategories",{"_index":3551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(usercategorys",{"_index":3576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(userplans",{"_index":3579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objetivo",{"_index":2013,"title":{},"body":{"index.html":{}}}],["obligate",{"_index":2855,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":1882,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["obligations",{"_index":2495,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":2586,"title":{},"body":{"license.html":{}}}],["occupied",{"_index":3356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occurring",{"_index":2749,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":2289,"title":{},"body":{"license.html":{}}}],["ocean",{"_index":3069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ocorreu",{"_index":3535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offensive",{"_index":1844,"title":{},"body":{"contributing.html":{}}}],["offer",{"_index":2261,"title":{},"body":{"license.html":{}}}],["offered",{"_index":2608,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["offering",{"_index":2590,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["offers",{"_index":3586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["official",{"_index":1853,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["offline",{"_index":1010,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["om",{"_index":3350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oman",{"_index":3349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["once",{"_index":1734,"title":{},"body":{"contributing.html":{}}}],["ondelete",{"_index":1679,"title":{},"body":{"changelog.html":{}}}],["one",{"_index":845,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{}}}],["one/:adminid",{"_index":138,"title":{},"body":{"controllers/AdminController.html":{}}}],["one/:adminid')@apioperation({summary",{"_index":93,"title":{},"body":{"controllers/AdminController.html":{}}}],["online",{"_index":1862,"title":{},"body":{"contributing.html":{}}}],["onmoduleinit",{"_index":1248,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":270,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"classes/CreatePlaylistDto.html":{},"controllers/UserPlanController.html":{},"contributing.html":{}}}],["operate",{"_index":2908,"title":{},"body":{"license.html":{}}}],["operated",{"_index":2594,"title":{},"body":{"license.html":{}}}],["operating",{"_index":2426,"title":{},"body":{"license.html":{}}}],["operation",{"_index":2515,"title":{},"body":{"license.html":{}}}],["operação",{"_index":3536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oportunidade",{"_index":2178,"title":{},"body":{"index.html":{}}}],["optimize",{"_index":1684,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":2679,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":48,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["options",{"_index":2391,"title":{},"body":{"license.html":{}}}],["order",{"_index":2747,"title":{},"body":{"license.html":{}}}],["orderby",{"_index":1084,"title":{},"body":{"injectables/HomePageService.html":{}}}],["organization",{"_index":2766,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":2342,"title":{},"body":{"license.html":{}}}],["orientation",{"_index":1766,"title":{},"body":{"contributing.html":{}}}],["origin",{"_index":2693,"title":{},"body":{"license.html":{}}}],["original",{"_index":2694,"title":{},"body":{"license.html":{}}}],["orm",{"_index":2008,"title":{},"body":{"index.html":{}}}],["os",{"_index":2154,"title":{},"body":{"index.html":{}}}],["others",{"_index":1805,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["otherwise",{"_index":1870,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["out",{"_index":159,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"license.html":{},"overview.html":{}}}],["outlying",{"_index":3497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["output",{"_index":2463,"title":{},"body":{"license.html":{}}}],["outras",{"_index":2096,"title":{},"body":{"index.html":{}}}],["outros",{"_index":2143,"title":{},"body":{"index.html":{}}}],["outside",{"_index":2481,"title":{},"body":{"license.html":{}}}],["over",{"_index":848,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["overview",{"_index":2965,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":2792,"title":{},"body":{"license.html":{}}}],["owners",{"_index":1701,"title":{},"body":{"contributing.html":{}}}],["pa",{"_index":3359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1956,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packaged",{"_index":2542,"title":{},"body":{"license.html":{}}}],["packaging",{"_index":2415,"title":{},"body":{"license.html":{}}}],["page",{"_index":1039,"title":{},"body":{"controllers/HomePageController.html":{}}}],["page.controller",{"_index":1067,"title":{},"body":{"modules/HomePageModule.html":{}}}],["page.controller.ts",{"_index":1035,"title":{},"body":{"controllers/HomePageController.html":{},"coverage.html":{}}}],["page.controller.ts:28",{"_index":1040,"title":{},"body":{"controllers/HomePageController.html":{}}}],["page.controller.ts:40",{"_index":1050,"title":{},"body":{"controllers/HomePageController.html":{}}}],["page.module",{"_index":396,"title":{},"body":{"modules/AppModule.html":{}}}],["page.module.ts",{"_index":1066,"title":{},"body":{"modules/HomePageModule.html":{}}}],["page.service",{"_index":1054,"title":{},"body":{"controllers/HomePageController.html":{},"modules/HomePageModule.html":{}}}],["page.service.ts",{"_index":1068,"title":{},"body":{"injectables/HomePageService.html":{},"coverage.html":{}}}],["page.service.ts:10",{"_index":1075,"title":{},"body":{"injectables/HomePageService.html":{}}}],["page.service.ts:102",{"_index":1076,"title":{},"body":{"injectables/HomePageService.html":{}}}],["page.service.ts:218",{"_index":1072,"title":{},"body":{"injectables/HomePageService.html":{}}}],["page.service.ts:7",{"_index":1070,"title":{},"body":{"injectables/HomePageService.html":{}}}],["page/dto/search.dto.ts",{"_index":1373,"title":{},"body":{"classes/SearchDto.html":{},"coverage.html":{}}}],["page/dto/search.dto.ts:12",{"_index":1376,"title":{},"body":{"classes/SearchDto.html":{}}}],["page/home",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"coverage.html":{}}}],["pagode",{"_index":3567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pakistan",{"_index":3351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["palau",{"_index":3353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["palestinian",{"_index":3355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["panama",{"_index":3358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paper",{"_index":2938,"title":{},"body":{"license.html":{}}}],["papua",{"_index":3360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["para",{"_index":2045,"title":{},"body":{"index.html":{}}}],["paragraph",{"_index":2724,"title":{},"body":{"license.html":{}}}],["paragraphs",{"_index":2804,"title":{},"body":{"license.html":{}}}],["paraguay",{"_index":3362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":104,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["param('adminid",{"_index":140,"title":{},"body":{"controllers/AdminController.html":{}}}],["param('albumid",{"_index":291,"title":{},"body":{"controllers/AlbumController.html":{}}}],["param('artistid",{"_index":473,"title":{},"body":{"controllers/ArtistController.html":{}}}],["param('categoryid",{"_index":672,"title":{},"body":{"controllers/CategoryController.html":{}}}],["param('countryid",{"_index":736,"title":{},"body":{"controllers/CountryController.html":{}}}],["param('id",{"_index":1534,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["param('playlistid",{"_index":1219,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["param('songid",{"_index":1305,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{}}}],["parameters",{"_index":80,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"contributing.html":{}}}],["parecidas",{"_index":2017,"title":{},"body":{"index.html":{}}}],["part",{"_index":1374,"title":{},"body":{"classes/SearchDto.html":{},"license.html":{}}}],["partial",{"_index":231,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/CountryService.html":{},"injectables/ProfileService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":1454,"title":{},"body":{"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserPlanDto.html":{}}}],["partialtype(createalbumdto",{"_index":1455,"title":{},"body":{"classes/UpdateAlbumDto.html":{}}}],["partialtype(createartistdto",{"_index":1457,"title":{},"body":{"classes/UpdateArtistDto.html":{}}}],["partialtype(createcategorydto",{"_index":1459,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createcountrydto",{"_index":1461,"title":{},"body":{"classes/UpdateCountryDto.html":{}}}],["partialtype(createplaylistdto",{"_index":1466,"title":{},"body":{"classes/UpdatePlaylistDto.html":{}}}],["partialtype(createprofiledto",{"_index":1468,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["partialtype(createuserplandto",{"_index":1483,"title":{},"body":{"classes/UpdateUserPlanDto.html":{}}}],["participants",{"_index":1792,"title":{},"body":{"contributing.html":{}}}],["participation",{"_index":1747,"title":{},"body":{"contributing.html":{}}}],["particular",{"_index":2405,"title":{},"body":{"license.html":{}}}],["parties",{"_index":2370,"title":{},"body":{"license.html":{}}}],["parts",{"_index":2450,"title":{},"body":{"license.html":{}}}],["party",{"_index":902,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"license.html":{}}}],["party's",{"_index":2771,"title":{},"body":{"license.html":{}}}],["pass",{"_index":2251,"title":{},"body":{"license.html":{}}}],["passados",{"_index":2185,"title":{},"body":{"index.html":{}}}],["passport",{"_index":1107,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":163,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["passportmodule.register",{"_index":166,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["passportstrategy",{"_index":1104,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1109,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":52,"title":{},"body":{"classes/Admin.html":{},"injectables/AdminService.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"changelog.html":{},"license.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["password.ultil",{"_index":206,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["password.ultil.ts",{"_index":1951,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":3624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pasta",{"_index":2060,"title":{},"body":{"index.html":{}}}],["patch",{"_index":105,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["patch('/update",{"_index":142,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ArtistController.html":{}}}],["patch('/update')@apioperation({summary",{"_index":97,"title":{},"body":{"controllers/AdminController.html":{}}}],["patch('/update')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":445,"title":{},"body":{"controllers/ArtistController.html":{}}}],["patch('/update/:countryid",{"_index":735,"title":{},"body":{"controllers/CountryController.html":{}}}],["patch('/update/:countryid')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":723,"title":{},"body":{"controllers/CountryController.html":{}}}],["patch('/update/:songid",{"_index":1398,"title":{},"body":{"controllers/SongController.html":{}}}],["patch('/update/:songid')@apioperation({summary",{"_index":1388,"title":{},"body":{"controllers/SongController.html":{}}}],["patch(':id",{"_index":1575,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["patch(':id')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":1566,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["patch('add",{"_index":1165,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["patch('add/:songid",{"_index":1304,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["patch('add/:songid')@apioperation({summary",{"_index":1293,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["patch('delete",{"_index":1185,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["patch('update",{"_index":1283,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["patch('update')@apioperation({summary",{"_index":1274,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patch('update/:albumid",{"_index":290,"title":{},"body":{"controllers/AlbumController.html":{}}}],["patch('update/:albumid')@apioperation({summary",{"_index":274,"title":{},"body":{"controllers/AlbumController.html":{}}}],["patch('update/:categoryid",{"_index":671,"title":{},"body":{"controllers/CategoryController.html":{}}}],["patch('update/:categoryid')@apioperation({summary",{"_index":657,"title":{},"body":{"controllers/CategoryController.html":{}}}],["patch('update/:playlistid",{"_index":1221,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["patch('update/:playlistid')@apioperation({summary",{"_index":1205,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["patent",{"_index":2723,"title":{},"body":{"license.html":{}}}],["patents",{"_index":2309,"title":{},"body":{"license.html":{}}}],["pattern",{"_index":2287,"title":{},"body":{"license.html":{}}}],["paulo",{"_index":2190,"title":{},"body":{"index.html":{}}}],["payload",{"_index":1103,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":1116,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.profileid",{"_index":1115,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payment",{"_index":2836,"title":{},"body":{"license.html":{}}}],["pe",{"_index":3365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peer",{"_index":2604,"title":{},"body":{"license.html":{}}}],["peers",{"_index":2607,"title":{},"body":{"license.html":{}}}],["pelo",{"_index":2176,"title":{},"body":{"index.html":{}}}],["pelos",{"_index":2140,"title":{},"body":{"index.html":{}}}],["people",{"_index":3608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["people's",{"_index":3250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perfis",{"_index":2020,"title":{},"body":{"index.html":{}}}],["performance",{"_index":2889,"title":{},"body":{"license.html":{}}}],["performing",{"_index":2439,"title":{},"body":{"license.html":{}}}],["permanent",{"_index":1897,"title":{},"body":{"contributing.html":{}}}],["permanently",{"_index":1839,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["permission",{"_index":1738,"title":{},"body":{"contributing.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["permissions",{"_index":2454,"title":{},"body":{"license.html":{}}}],["permissive",{"_index":2526,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2559,"title":{},"body":{"license.html":{}}}],["permits",{"_index":2713,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":2202,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":2652,"title":{},"body":{"license.html":{}}}],["personal",{"_index":1761,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["pertinent",{"_index":2853,"title":{},"body":{"license.html":{}}}],["peru",{"_index":3364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pessoas",{"_index":2097,"title":{},"body":{"index.html":{}}}],["pessssrmission",{"_index":3546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pf",{"_index":3169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pg",{"_index":3361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ph",{"_index":3367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["philippines",{"_index":3366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["physical",{"_index":1808,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["physically",{"_index":2584,"title":{},"body":{"license.html":{}}}],["picture",{"_index":899,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{}}}],["pieces",{"_index":2235,"title":{},"body":{"license.html":{}}}],["pierre",{"_index":3395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pitcairn",{"_index":3368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pk",{"_index":3352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pl",{"_index":3371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["place",{"_index":2592,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["plan",{"_index":994,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["plan')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":1521,"title":{},"body":{"controllers/UserController.html":{}}}],["plan.controller",{"_index":1583,"title":{},"body":{"modules/UserPlanModule.html":{}}}],["plan.controller.ts",{"_index":1558,"title":{},"body":{"controllers/UserPlanController.html":{},"coverage.html":{}}}],["plan.controller.ts:32",{"_index":1560,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["plan.controller.ts:40",{"_index":1563,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["plan.controller.ts:48",{"_index":1565,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["plan.controller.ts:58",{"_index":1567,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["plan.controller.ts:73",{"_index":1562,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["plan.dto",{"_index":1482,"title":{},"body":{"classes/UpdateUserPlanDto.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["plan.dto.ts",{"_index":987,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateUserPlanDto.html":{},"coverage.html":{}}}],["plan.dto.ts:11",{"_index":1022,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:20",{"_index":1025,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["plan.dto.ts:29",{"_index":992,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["plan.dto.ts:38",{"_index":1019,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["plan.entity",{"_index":1595,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.entity.ts",{"_index":1549,"title":{},"body":{"classes/UserPlan.html":{},"coverage.html":{}}}],["plan.entity.ts:2",{"_index":1553,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:3",{"_index":1554,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:4",{"_index":1555,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:5",{"_index":1550,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:6",{"_index":1552,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:7",{"_index":1551,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.entity.ts:8",{"_index":1556,"title":{},"body":{"classes/UserPlan.html":{}}}],["plan.module",{"_index":392,"title":{},"body":{"modules/AppModule.html":{}}}],["plan.module.ts",{"_index":1582,"title":{},"body":{"modules/UserPlanModule.html":{}}}],["plan.service",{"_index":1569,"title":{},"body":{"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{}}}],["plan.service.ts",{"_index":1584,"title":{},"body":{"injectables/UserPlanService.html":{},"coverage.html":{}}}],["plan.service.ts:12",{"_index":1587,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:20",{"_index":1589,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:39",{"_index":1590,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:48",{"_index":1591,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:61",{"_index":1588,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:66",{"_index":1593,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.service.ts:9",{"_index":1586,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["plan.ts",{"_index":1941,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["plan/dto/create",{"_index":986,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"coverage.html":{}}}],["plan/dto/update",{"_index":1481,"title":{},"body":{"classes/UpdateUserPlanDto.html":{},"coverage.html":{}}}],["plan/entities/user",{"_index":1548,"title":{},"body":{"classes/UserPlan.html":{},"coverage.html":{}}}],["plan/user",{"_index":391,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"coverage.html":{}}}],["plano",{"_index":2022,"title":{},"body":{"index.html":{}}}],["plans",{"_index":974,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePlanDto.html":{},"controllers/UserPlanController.html":{},"todo.html":{}}}],["plataforma",{"_index":2034,"title":{},"body":{"index.html":{}}}],["platform",{"_index":976,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["playback",{"_index":1011,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"miscellaneous/variables.html":{}}}],["played",{"_index":1016,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["playlist",{"_index":7,"title":{"classes/Playlist.html":{}},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreatePlaylistDto.html":{},"injectables/HomePageService.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"classes/SearchDto.html":{},"changelog.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["playlist.controller",{"_index":1238,"title":{},"body":{"modules/PlaylistModule.html":{}}}],["playlist.dto",{"_index":1208,"title":{},"body":{"controllers/PlaylistController.html":{},"classes/UpdatePlaylistDto.html":{}}}],["playlist.dto.ts",{"_index":898,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"classes/UpdatePlaylistDto.html":{},"coverage.html":{}}}],["playlist.dto.ts:11",{"_index":903,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["playlist.dto.ts:19",{"_index":901,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["playlist.dto.ts:26",{"_index":910,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["playlist.service",{"_index":1210,"title":{},"body":{"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{}}}],["playlist/playlist.module",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["playlistcontroller",{"_index":1153,"title":{"controllers/PlaylistController.html":{}},"body":{"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"coverage.html":{}}}],["playlistfavorite",{"_index":2979,"title":{},"body":{"todo.html":{}}}],["playlistid",{"_index":11,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"controllers/PlaylistController.html":{}}}],["playlistmodule",{"_index":369,"title":{"modules/PlaylistModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlaylistModule.html":{},"modules.html":{},"overview.html":{}}}],["playlistmusic",{"_index":2978,"title":{},"body":{"todo.html":{}}}],["playlists",{"_index":1018,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"controllers/PlaylistController.html":{},"index.html":{}}}],["playlists.length",{"_index":1092,"title":{},"body":{"injectables/HomePageService.html":{}}}],["playlistservice",{"_index":1209,"title":{},"body":{"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"coverage.html":{},"overview.html":{}}}],["playlistsong",{"_index":1171,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["playlistsspotify",{"_index":1080,"title":{},"body":{"injectables/HomePageService.html":{}}}],["please",{"_index":1693,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["pledge",{"_index":1741,"title":{},"body":{"contributing.html":{}}}],["plus",{"_index":2773,"title":{},"body":{"license.html":{}}}],["pm",{"_index":3397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pn",{"_index":3369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["podcasts",{"_index":999,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["pode",{"_index":2146,"title":{},"body":{"index.html":{}}}],["poder",{"_index":2141,"title":{},"body":{"index.html":{}}}],["poderam",{"_index":2098,"title":{},"body":{"index.html":{}}}],["podermos",{"_index":2179,"title":{},"body":{"index.html":{}}}],["pointer",{"_index":2932,"title":{},"body":{"license.html":{}}}],["poland",{"_index":3370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["policies",{"_index":1889,"title":{},"body":{"contributing.html":{}}}],["political",{"_index":1801,"title":{},"body":{"contributing.html":{}}}],["polynesia",{"_index":3168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pop",{"_index":3569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pop/k",{"_index":3564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["por",{"_index":2149,"title":{},"body":{"index.html":{}}}],["portion",{"_index":2611,"title":{},"body":{"license.html":{}}}],["ports",{"_index":1723,"title":{},"body":{"contributing.html":{}}}],["portugal",{"_index":3372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["positive",{"_index":1771,"title":{},"body":{"contributing.html":{}}}],["possa",{"_index":2019,"title":{},"body":{"index.html":{}}}],["possam",{"_index":2032,"title":{},"body":{"index.html":{}}}],["possesses",{"_index":2580,"title":{},"body":{"license.html":{}}}],["possession",{"_index":2540,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":1014,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["possible",{"_index":1007,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["possível",{"_index":2030,"title":{},"body":{"index.html":{}}}],["post",{"_index":106,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["post('/create",{"_index":131,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ArtistController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/SongController.html":{}}}],["post('/create')@apioperation({summary",{"_index":76,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ArtistController.html":{},"controllers/PlaylistController.html":{},"controllers/SongController.html":{}}}],["post('/create')@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":712,"title":{},"body":{"controllers/CountryController.html":{}}}],["post('/search",{"_index":1060,"title":{},"body":{"controllers/HomePageController.html":{}}}],["post('/search')@apioperation({summary",{"_index":1044,"title":{},"body":{"controllers/HomePageController.html":{}}}],["post('/sign",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('add",{"_index":1172,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["post('create",{"_index":284,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/CategoryController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["post('create')@apioperation({summary",{"_index":258,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/CategoryController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["post('spotify",{"_index":1195,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["post()@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":1559,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["posted",{"_index":1890,"title":{},"body":{"contributing.html":{}}}],["postgres",{"_index":2050,"title":{},"body":{"index.html":{}}}],["postgres]:[senha",{"_index":2076,"title":{},"body":{"index.html":{}}}],["postgresql",{"_index":2009,"title":{},"body":{"index.html":{}}}],["posting",{"_index":1856,"title":{},"body":{"contributing.html":{}}}],["power",{"_index":2508,"title":{},"body":{"license.html":{}}}],["pr",{"_index":2035,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["practical",{"_index":2214,"title":{},"body":{"license.html":{}}}],["practice",{"_index":2295,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":2209,"title":{},"body":{"license.html":{}}}],["precise",{"_index":2325,"title":{},"body":{"license.html":{}}}],["precisely",{"_index":2293,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":2772,"title":{},"body":{"license.html":{}}}],["preencha",{"_index":2072,"title":{},"body":{"index.html":{}}}],["preferences",{"_index":3613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preferred",{"_index":2397,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":66,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["premium",{"_index":3584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["presence",{"_index":1002,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"miscellaneous/variables.html":{}}}],["present",{"_index":2867,"title":{},"body":{"license.html":{}}}],["presente",{"_index":2010,"title":{},"body":{"index.html":{}}}],["presents",{"_index":2389,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":2688,"title":{},"body":{"license.html":{}}}],["prevent",{"_index":2241,"title":{},"body":{"license.html":{}}}],["prevented",{"_index":2646,"title":{},"body":{"license.html":{}}}],["previewfeature",{"_index":1683,"title":{},"body":{"changelog.html":{}}}],["previous",{"_index":2275,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["price",{"_index":989,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"classes/UserPlan.html":{},"injectables/UserPlanService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["primarily",{"_index":2838,"title":{},"body":{"license.html":{}}}],["principe",{"_index":3407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prior",{"_index":2734,"title":{},"body":{"license.html":{}}}],["prisma",{"_index":179,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prisma.admin.upsert",{"_index":2997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma.admincreateinput",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["prisma.albumcreateinput",{"_index":324,"title":{},"body":{"injectables/AlbumService.html":{}}}],["prisma.artistcreateinput",{"_index":502,"title":{},"body":{"injectables/ArtistService.html":{}}}],["prisma.category.upsert",{"_index":3552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma.categorycreateinput",{"_index":693,"title":{},"body":{"injectables/CategoryService.html":{},"miscellaneous/variables.html":{}}}],["prisma.categoryupdateinput",{"_index":699,"title":{},"body":{"injectables/CategoryService.html":{}}}],["prisma.country.upsert",{"_index":3003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma.countrycreateinput",{"_index":3005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma.profilecreateinput",{"_index":1370,"title":{},"body":{"injectables/ProfileService.html":{}}}],["prisma.profilefavoritesongcreateinput",{"_index":1337,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["prisma.service",{"_index":1244,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.songcreateinput",{"_index":1430,"title":{},"body":{"injectables/SongService.html":{}}}],["prisma.songupdateinput",{"_index":1437,"title":{},"body":{"injectables/SongService.html":{}}}],["prisma.usercategory.upsert",{"_index":3577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma.usercategorycreateinput",{"_index":3578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma.usercreateinput",{"_index":1629,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userplan.upsert",{"_index":3580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma.userplancreateinput",{"_index":3581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":201,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":1246,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismamodule",{"_index":156,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":177,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":303,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"classes/CreatePlaylistDto.html":{},"injectables/HomePageService.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileFavoriteSongController.html":{},"contributing.html":{},"license.html":{}}}],["problems",{"_index":2272,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":2639,"title":{},"body":{"license.html":{}}}],["process",{"_index":1709,"title":{},"body":{"contributing.html":{}}}],["process.env.jwt_secret",{"_index":609,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["procuring",{"_index":2827,"title":{},"body":{"license.html":{}}}],["produce",{"_index":2429,"title":{},"body":{"license.html":{}}}],["product",{"_index":2568,"title":{},"body":{"license.html":{}}}],["products",{"_index":2291,"title":{},"body":{"license.html":{}}}],["professional",{"_index":1816,"title":{},"body":{"contributing.html":{}}}],["professores",{"_index":2186,"title":{},"body":{"index.html":{}}}],["profile",{"_index":385,"title":{"classes/Profile.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"controllers/HomePageController.html":{},"classes/LoginProfileDto.html":{},"controllers/PlaylistController.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"classes/UserProfileId.html":{},"coverage.html":{},"todo.html":{}}}],["profile')@httpcode(httpstatus.ok)@useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile.controller",{"_index":1354,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.dto",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{}}}],["profile.dto.ts",{"_index":914,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/LoginProfileDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:10",{"_index":1125,"title":{},"body":{"classes/LoginProfileDto.html":{}}}],["profile.dto.ts:12",{"_index":920,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:21",{"_index":916,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.profiles.length",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile.service",{"_index":1277,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/profile.module",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["profilecontroller",{"_index":1265,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilefavoritesong",{"_index":1287,"title":{"classes/ProfileFavoriteSong.html":{}},"body":{"classes/ProfileFavoriteSong.html":{},"coverage.html":{}}}],["profilefavoritesongcontroller",{"_index":1290,"title":{"controllers/ProfileFavoriteSongController.html":{}},"body":{"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"coverage.html":{}}}],["profilefavoritesongmodule",{"_index":370,"title":{"modules/ProfileFavoriteSongModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules.html":{},"overview.html":{}}}],["profilefavoritesongservice",{"_index":1300,"title":{"injectables/ProfileFavoriteSongService.html":{}},"body":{"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"coverage.html":{},"overview.html":{}}}],["profileid",{"_index":628,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginProfileDto.html":{},"classes/Playlist.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"classes/UserProfileId.html":{},"miscellaneous/variables.html":{}}}],["profileid_songid",{"_index":1342,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["profilemodule",{"_index":371,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profiles",{"_index":630,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserPlanDto.html":{},"injectables/HomePageService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["profileservice",{"_index":1276,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profileuser",{"_index":1343,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["profileuser.profiles.length",{"_index":1344,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["program",{"_index":2223,"title":{},"body":{"license.html":{}}}],["program's",{"_index":2519,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":2949,"title":{},"body":{"license.html":{}}}],["programming",{"_index":2406,"title":{},"body":{"license.html":{}}}],["programs",{"_index":2230,"title":{},"body":{"license.html":{}}}],["progress",{"_index":2972,"title":{},"body":{"todo.html":{}}}],["prohibit",{"_index":2294,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":2504,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":2832,"title":{},"body":{"license.html":{}}}],["project",{"_index":1639,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["project's",{"_index":1900,"title":{},"body":{"contributing.html":{}}}],["projeto",{"_index":1986,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":2393,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":2382,"title":{},"body":{"license.html":{}}}],["promise",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["proof",{"_index":3620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["propagate",{"_index":2352,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":2756,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":2364,"title":{},"body":{"license.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"injectables/AlbumService.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/SearchDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserPlan.html":{},"classes/UserProfileId.html":{},"properties.html":{}}}],["property",{"_index":2616,"title":{},"body":{"license.html":{}}}],["proprietary",{"_index":2320,"title":{},"body":{"license.html":{}}}],["protect",{"_index":2238,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":2285,"title":{},"body":{"license.html":{}}}],["protection",{"_index":2264,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":2669,"title":{},"body":{"license.html":{}}}],["prove",{"_index":2890,"title":{},"body":{"license.html":{}}}],["provide",{"_index":2473,"title":{},"body":{"license.html":{}}}],["provided",{"_index":2388,"title":{},"body":{"license.html":{}}}],["providers",{"_index":161,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["province",{"_index":3458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provision",{"_index":2303,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":2729,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":2877,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":2879,"title":{},"body":{"license.html":{}}}],["prática",{"_index":2181,"title":{},"body":{"index.html":{}}}],["próprias",{"_index":2027,"title":{},"body":{"index.html":{}}}],["ps",{"_index":3357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["psicodelia",{"_index":3568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pt",{"_index":3373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":1803,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["publicar",{"_index":2151,"title":{},"body":{"index.html":{}}}],["publicity",{"_index":2695,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":2670,"title":{},"body":{"license.html":{}}}],["publish",{"_index":2523,"title":{},"body":{"license.html":{}}}],["published",{"_index":2875,"title":{},"body":{"license.html":{}}}],["publishing",{"_index":1804,"title":{},"body":{"contributing.html":{}}}],["puerto",{"_index":3374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pull",{"_index":1708,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":2313,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":2620,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":2823,"title":{},"body":{"license.html":{}}}],["push",{"_index":2123,"title":{},"body":{"index.html":{}}}],["pw",{"_index":3354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["py",{"_index":3363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["qa",{"_index":3377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["qatar",{"_index":3376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["qualify",{"_index":2744,"title":{},"body":{"license.html":{}}}],["quality",{"_index":2888,"title":{},"body":{"license.html":{}}}],["que",{"_index":2004,"title":{},"body":{"index.html":{}}}],["queira",{"_index":2112,"title":{},"body":{"index.html":{}}}],["quinto",{"_index":1989,"title":{},"body":{"index.html":{}}}],["r$8.50",{"_index":3603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["race",{"_index":1763,"title":{},"body":{"contributing.html":{}}}],["rap",{"_index":3570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["re",{"_index":3379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reached",{"_index":1368,"title":{},"body":{"injectables/ProfileService.html":{}}}],["read",{"_index":2959,"title":{},"body":{"license.html":{}}}],["readable",{"_index":2565,"title":{},"body":{"license.html":{}}}],["readily",{"_index":2811,"title":{},"body":{"license.html":{}}}],["reading",{"_index":2673,"title":{},"body":{"license.html":{}}}],["readme.md",{"_index":1716,"title":{},"body":{"contributing.html":{}}}],["readonly",{"_index":130,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["ready",{"_index":2301,"title":{},"body":{"license.html":{}}}],["reason",{"_index":2821,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2582,"title":{},"body":{"license.html":{}}}],["reasonably",{"_index":1813,"title":{},"body":{"contributing.html":{}}}],["receipt",{"_index":2742,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2234,"title":{},"body":{"license.html":{}}}],["received",{"_index":2255,"title":{},"body":{"license.html":{}}}],["receives",{"_index":2761,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{},"license.html":{}}}],["recipient",{"_index":2651,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":2819,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":2252,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":2401,"title":{},"body":{"license.html":{}}}],["record",{"_index":327,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"injectables/HomePageService.html":{},"injectables/SongService.html":{},"injectables/UserService.html":{}}}],["record.albums.length",{"_index":513,"title":{},"body":{"injectables/ArtistService.html":{}}}],["record.profiles.length",{"_index":1095,"title":{},"body":{"injectables/HomePageService.html":{}}}],["record.songs.length",{"_index":512,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/SongService.html":{}}}],["recover",{"_index":2971,"title":{},"body":{"todo.html":{}}}],["redistribute",{"_index":2926,"title":{},"body":{"license.html":{}}}],["referring",{"_index":2232,"title":{},"body":{"license.html":{}}}],["refers",{"_index":2331,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":1973,"title":{},"body":{"dependencies.html":{}}}],["refrain",{"_index":2857,"title":{},"body":{"license.html":{}}}],["regard",{"_index":1885,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["regardless",{"_index":1751,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["regenerate",{"_index":2451,"title":{},"body":{"license.html":{}}}],["reggae",{"_index":3571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":3595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reinstated",{"_index":2728,"title":{},"body":{"license.html":{}}}],["reject",{"_index":1830,"title":{},"body":{"contributing.html":{}}}],["relation",{"_index":2975,"title":{},"body":{"todo.html":{}}}],["relationship",{"_index":942,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{},"license.html":{}}}],["release",{"_index":817,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["released",{"_index":840,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["relevant",{"_index":2535,"title":{},"body":{"license.html":{}}}],["relicensing",{"_index":2714,"title":{},"body":{"license.html":{}}}],["religion",{"_index":1764,"title":{},"body":{"contributing.html":{}}}],["relying",{"_index":2810,"title":{},"body":{"license.html":{}}}],["remain",{"_index":2601,"title":{},"body":{"license.html":{}}}],["remains",{"_index":2225,"title":{},"body":{"license.html":{}}}],["removal",{"_index":2680,"title":{},"body":{"license.html":{}}}],["remove",{"_index":427,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"changelog.html":{},"contributing.html":{},"license.html":{}}}],["removed",{"_index":1712,"title":{},"body":{"contributing.html":{}}}],["render",{"_index":2323,"title":{},"body":{"license.html":{}}}],["rendered",{"_index":2903,"title":{},"body":{"license.html":{}}}],["repair",{"_index":2894,"title":{},"body":{"license.html":{}}}],["repercussions",{"_index":1898,"title":{},"body":{"contributing.html":{}}}],["reported",{"_index":1871,"title":{},"body":{"contributing.html":{}}}],["reporter",{"_index":1886,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":1692,"title":{},"body":{"contributing.html":{}}}],["represent",{"_index":1730,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["representation",{"_index":1864,"title":{},"body":{"contributing.html":{}}}],["representative",{"_index":1861,"title":{},"body":{"contributing.html":{}}}],["representing",{"_index":1852,"title":{},"body":{"contributing.html":{}}}],["republic",{"_index":3095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["req.get('host",{"_index":358,"title":{},"body":{"controllers/AppController.html":{}}}],["req.protocol",{"_index":357,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":344,"title":{},"body":{"controllers/AppController.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":3541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require",{"_index":2446,"title":{},"body":{"license.html":{}}}],["required",{"_index":2642,"title":{},"body":{"license.html":{}}}],["requirement",{"_index":2536,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["requirements",{"_index":2603,"title":{},"body":{"license.html":{}}}],["requires",{"_index":2269,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":2345,"title":{},"body":{"license.html":{}}}],["requisitos",{"_index":2036,"title":{},"body":{"index.html":{}}}],["reset",{"_index":158,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"overview.html":{}}}],["reside",{"_index":3619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolved",{"_index":2626,"title":{},"body":{"license.html":{}}}],["respect",{"_index":2248,"title":{},"body":{"license.html":{}}}],["respectful",{"_index":1777,"title":{},"body":{"contributing.html":{}}}],["response",{"_index":1827,"title":{},"body":{"contributing.html":{}}}],["response.dto",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["response.dto.ts",{"_index":1128,"title":{},"body":{"classes/LoginUserResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":1133,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1135,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["responsibilities",{"_index":1818,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["responsibility",{"_index":1829,"title":{},"body":{"contributing.html":{}}}],["responsible",{"_index":1819,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["restrict",{"_index":2311,"title":{},"body":{"license.html":{}}}],["restricting",{"_index":2505,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":2712,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":1000,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"license.html":{}}}],["result",{"_index":1878,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["resulting",{"_index":2347,"title":{},"body":{"license.html":{}}}],["results",{"_index":43,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":2655,"title":{},"body":{"license.html":{}}}],["return",{"_index":134,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":81,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlaylistController.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["reunion",{"_index":3378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reviewed",{"_index":1876,"title":{},"body":{"contributing.html":{}}}],["reviewer",{"_index":1740,"title":{},"body":{"contributing.html":{}}}],["reviewing",{"_index":2914,"title":{},"body":{"license.html":{}}}],["revised",{"_index":2865,"title":{},"body":{"license.html":{}}}],["rica",{"_index":3118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rico",{"_index":3375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["right",{"_index":949,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{},"contributing.html":{},"license.html":{}}}],["rights",{"_index":2239,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1976,"title":{},"body":{"dependencies.html":{}}}],["risk",{"_index":2887,"title":{},"body":{"license.html":{}}}],["ro",{"_index":3381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rock",{"_index":833,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"miscellaneous/variables.html":{}}}],["rodando",{"_index":2081,"title":{},"body":{"index.html":{}}}],["rode",{"_index":2113,"title":{},"body":{"index.html":{}}}],["rom",{"_index":2658,"title":{},"body":{"license.html":{}}}],["romania",{"_index":3380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roses",{"_index":830,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["route",{"_index":1689,"title":{},"body":{"changelog.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":1663,"title":{},"body":{"changelog.html":{}}}],["royalty",{"_index":2777,"title":{},"body":{"license.html":{}}}],["ru",{"_index":3384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ruiz",{"_index":2188,"title":{},"body":{"index.html":{}}}],["rules",{"_index":2668,"title":{},"body":{"license.html":{},"todo.html":{}}}],["run",{"_index":2109,"title":{},"body":{"index.html":{},"license.html":{}}}],["running",{"_index":403,"title":{},"body":{"injectables/AppService.html":{},"license.html":{}}}],["runs",{"_index":2427,"title":{},"body":{"license.html":{}}}],["russian",{"_index":3382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rw",{"_index":3386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rwanda",{"_index":3385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":1978,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":2145,"title":{},"body":{"index.html":{}}}],["sa",{"_index":3411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["safest",{"_index":2928,"title":{},"body":{"license.html":{}}}],["sahara",{"_index":3517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saint",{"_index":3387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sake",{"_index":2268,"title":{},"body":{"license.html":{}}}],["sale",{"_index":2787,"title":{},"body":{"license.html":{}}}],["salvador",{"_index":3143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salvatore",{"_index":2191,"title":{},"body":{"index.html":{}}}],["samba",{"_index":3572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":2253,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["samoa",{"_index":3015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["san",{"_index":3402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sandwich",{"_index":3434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sao",{"_index":3405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["satisfy",{"_index":2602,"title":{},"body":{"license.html":{}}}],["saudi",{"_index":3409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saying",{"_index":2598,"title":{},"body":{"license.html":{}}}],["sb",{"_index":3429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sc",{"_index":3418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scheme",{"_index":1731,"title":{},"body":{"contributing.html":{}}}],["school",{"_index":2950,"title":{},"body":{"license.html":{}}}],["scope",{"_index":1846,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["scripts",{"_index":2434,"title":{},"body":{"license.html":{}}}],["sd",{"_index":3442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["se",{"_index":3452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search",{"_index":269,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileFavoriteSongController.html":{},"classes/SearchDto.html":{},"todo.html":{}}}],["searchdto",{"_index":1043,"title":{"classes/SearchDto.html":{}},"body":{"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"classes/SearchDto.html":{},"coverage.html":{}}}],["searchplaylistsongalbumartist",{"_index":1036,"title":{},"body":{"controllers/HomePageController.html":{},"injectables/HomePageService.html":{}}}],["searchplaylistsongalbumartist(@body",{"_index":1061,"title":{},"body":{"controllers/HomePageController.html":{}}}],["searchplaylistsongalbumartist(dto",{"_index":1042,"title":{},"body":{"controllers/HomePageController.html":{},"injectables/HomePageService.html":{}}}],["second",{"_index":1739,"title":{},"body":{"contributing.html":{}}}],["secondarily",{"_index":2355,"title":{},"body":{"license.html":{}}}],["secret",{"_index":608,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1114,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":2485,"title":{},"body":{"license.html":{}}}],["sections",{"_index":2563,"title":{},"body":{"license.html":{}}}],["see",{"_index":2936,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["seed",{"_index":2980,"title":{},"body":{"todo.html":{}}}],["seeds",{"_index":1933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["seguinte",{"_index":2067,"title":{},"body":{"index.html":{}}}],["select",{"_index":197,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["selected",{"_index":1017,"title":{},"body":{"classes/CreateUserPlanDto.html":{}}}],["sell",{"_index":2801,"title":{},"body":{"license.html":{}}}],["selling",{"_index":2786,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":1645,"title":{},"body":{"changelog.html":{}}}],["semiconductor",{"_index":2334,"title":{},"body":{"license.html":{}}}],["semver",{"_index":1732,"title":{},"body":{"contributing.html":{}}}],["senegal",{"_index":3412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["senha",{"_index":764,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["separable",{"_index":2610,"title":{},"body":{"license.html":{}}}],["separate",{"_index":2548,"title":{},"body":{"license.html":{}}}],["separately",{"_index":1891,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["ser",{"_index":2147,"title":{},"body":{"index.html":{}}}],["serbia",{"_index":3414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sertanejo",{"_index":3573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":402,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"license.html":{}}}],["server\"jwt_secret=\"klsa92n9lws9bfjs128$%\"execução",{"_index":2084,"title":{},"body":{"index.html":{}}}],["serves",{"_index":2419,"title":{},"body":{"license.html":{}}}],["service",{"_index":2660,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["servicing",{"_index":2893,"title":{},"body":{"license.html":{}}}],["set",{"_index":906,"title":{},"body":{"classes/CreatePlaylistDto.html":{}}}],["setnull",{"_index":1681,"title":{},"body":{"changelog.html":{}}}],["setting",{"_index":1817,"title":{},"body":{"contributing.html":{}}}],["seu",{"_index":2041,"title":{},"body":{"index.html":{}}}],["sexual",{"_index":1765,"title":{},"body":{"contributing.html":{}}}],["sexualized",{"_index":1793,"title":{},"body":{"contributing.html":{}}}],["seychelles",{"_index":3417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sg",{"_index":3423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sh",{"_index":3389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2490,"title":{},"body":{"license.html":{}}}],["share",{"_index":2218,"title":{},"body":{"license.html":{}}}],["shared",{"_index":2442,"title":{},"body":{"license.html":{}}}],["short",{"_index":2939,"title":{},"body":{"license.html":{}}}],["show",{"_index":2256,"title":{},"body":{"license.html":{}}}],["showing",{"_index":1787,"title":{},"body":{"contributing.html":{}}}],["si",{"_index":3427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sierra",{"_index":3419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign",{"_index":1735,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["significant",{"_index":2637,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":610,"title":{},"body":{"modules/AuthModule.html":{}}}],["silva",{"_index":779,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{},"index.html":{}}}],["similar",{"_index":2503,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":2852,"title":{},"body":{"license.html":{}}}],["singapore",{"_index":3422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":2825,"title":{},"body":{"license.html":{}}}],["six",{"_index":841,"title":{},"body":{"classes/CreateArtistDto.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":1753,"title":{},"body":{"contributing.html":{}}}],["sj",{"_index":3448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sk",{"_index":3425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":511,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/HomePageService.html":{}}}],["sl",{"_index":3421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slovakia",{"_index":3424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slovenia",{"_index":3426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sm",{"_index":3404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sn",{"_index":3413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["social",{"_index":1857,"title":{},"body":{"contributing.html":{}}}],["software",{"_index":2198,"title":{},"body":{"license.html":{}}}],["sold",{"_index":847,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{}}}],["sole",{"_index":2470,"title":{},"body":{"license.html":{}}}],["solely",{"_index":2482,"title":{},"body":{"license.html":{}}}],["solomon",{"_index":3428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["somalia",{"_index":3430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["song",{"_index":21,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"injectables/HomePageService.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"changelog.html":{},"todo.html":{}}}],["song')@apioperation({summary",{"_index":1173,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["song.controller",{"_index":1314,"title":{},"body":{"modules/ProfileFavoriteSongModule.html":{},"modules/SongModule.html":{}}}],["song.controller.ts",{"_index":1291,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{},"coverage.html":{}}}],["song.controller.ts:30",{"_index":1295,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["song.controller.ts:45",{"_index":1299,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["song.controller.ts:57",{"_index":1298,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["song.dto",{"_index":1207,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{}}}],["song.dto.ts",{"_index":8,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["song.dto.ts:10",{"_index":29,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{}}}],["song.dto.ts:11",{"_index":953,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["song.dto.ts:17",{"_index":35,"title":{},"body":{"classes/AddSongPlaylistDto.html":{}}}],["song.dto.ts:19",{"_index":956,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["song.dto.ts:26",{"_index":938,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["song.dto.ts:27",{"_index":1470,"title":{},"body":{"classes/UpdateSongDto.html":{}}}],["song.dto.ts:34",{"_index":948,"title":{},"body":{"classes/CreateSongDto.html":{}}}],["song.entity.ts",{"_index":1289,"title":{},"body":{"classes/ProfileFavoriteSong.html":{},"coverage.html":{}}}],["song.module",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["song.module.ts",{"_index":1313,"title":{},"body":{"modules/ProfileFavoriteSongModule.html":{}}}],["song.service",{"_index":1301,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{}}}],["song.service.ts",{"_index":1315,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"coverage.html":{}}}],["song.service.ts:106",{"_index":1323,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:11",{"_index":1321,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:122",{"_index":1327,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:142",{"_index":1329,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:163",{"_index":1331,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:63",{"_index":1325,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song.service.ts:8",{"_index":1319,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["song/dto/create",{"_index":924,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"coverage.html":{}}}],["song/entities/profile",{"_index":1288,"title":{},"body":{"classes/ProfileFavoriteSong.html":{},"coverage.html":{}}}],["song/profile",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"coverage.html":{}}}],["song/song.module",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["songcontroller",{"_index":1377,"title":{"controllers/SongController.html":{}},"body":{"controllers/SongController.html":{},"modules/SongModule.html":{},"coverage.html":{}}}],["songid",{"_index":12,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"injectables/ProfileFavoriteSongService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"changelog.html":{}}}],["songidd",{"_index":1292,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["songiddto",{"_index":1296,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["songmodule",{"_index":372,"title":{"modules/SongModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SongModule.html":{},"modules.html":{},"overview.html":{}}}],["songprofile",{"_index":1346,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["songprofile.songs.length",{"_index":1347,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["songs",{"_index":320,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/ProfileFavoriteSongService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{}}}],["songs.length",{"_index":1091,"title":{},"body":{"injectables/HomePageService.html":{},"injectables/SongService.html":{}}}],["songservice",{"_index":1390,"title":{"injectables/SongService.html":{}},"body":{"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"coverage.html":{},"overview.html":{}}}],["songurl",{"_index":321,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/CategoryService.html":{},"classes/CreateSongDto.html":{},"injectables/HomePageService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"modules/CountryModule.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"modules/SongModule.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdatePlaylistDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"license.html":{}}}],["south",{"_index":3431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["southern",{"_index":3170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spaces",{"_index":1850,"title":{},"body":{"contributing.html":{}}}],["spain",{"_index":3436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spare",{"_index":2577,"title":{},"body":{"license.html":{}}}],["speak",{"_index":2231,"title":{},"body":{"license.html":{}}}],["special",{"_index":2316,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1888,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["specifically",{"_index":2445,"title":{},"body":{"license.html":{}}}],["specified",{"_index":2404,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":2872,"title":{},"body":{"license.html":{}}}],["specify",{"_index":2876,"title":{},"body":{"license.html":{}}}],["spirit",{"_index":2866,"title":{},"body":{"license.html":{}}}],["spotfy",{"_index":2063,"title":{},"body":{"index.html":{}}}],["spotify",{"_index":401,"title":{},"body":{"injectables/AppService.html":{},"controllers/PlaylistController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["spotifyplaylistcreate",{"_index":1161,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["spotifyplaylistcreate(admin",{"_index":1194,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["spotifyplaylistdelete",{"_index":1162,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["spotifyplaylistdelete(admin",{"_index":1199,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["sr",{"_index":3444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../01",{"_index":2989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../02",{"_index":2984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../03",{"_index":2990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../04",{"_index":2983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../05",{"_index":2987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../confirm",{"_index":2991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../handle",{"_index":2985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logged",{"_index":2986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../seed.ts",{"_index":2988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../verifyprofileidintoken.ts",{"_index":2992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/admin/admin.controller.ts",{"_index":65,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:33",{"_index":79,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:41",{"_index":91,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:49",{"_index":94,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:57",{"_index":100,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:67",{"_index":85,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.module.ts",{"_index":160,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/admin.service.ts",{"_index":171,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/admin/admin.service.ts:105",{"_index":187,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:16",{"_index":178,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:19",{"_index":198,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:31",{"_index":181,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:61",{"_index":185,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:67",{"_index":189,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:71",{"_index":191,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:92",{"_index":184,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/dto/create",{"_index":758,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["src/admin/dto/update",{"_index":1442,"title":{},"body":{"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["src/admin/entities/admin.entity",{"_index":447,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/PlaylistController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["src/admin/entities/admin.entity.ts",{"_index":46,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/admin/entities/admin.entity.ts:2",{"_index":58,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:3",{"_index":59,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:4",{"_index":54,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:5",{"_index":60,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:6",{"_index":57,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:7",{"_index":56,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/entities/admin.entity.ts:8",{"_index":61,"title":{},"body":{"classes/Admin.html":{}}}],["src/album/album.controller.ts",{"_index":254,"title":{},"body":{"controllers/AlbumController.html":{},"coverage.html":{}}}],["src/album/album.controller.ts:33",{"_index":261,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:41",{"_index":271,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:49",{"_index":275,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:62",{"_index":266,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.module.ts",{"_index":300,"title":{},"body":{"modules/AlbumModule.html":{}}}],["src/album/album.service.ts",{"_index":302,"title":{},"body":{"injectables/AlbumService.html":{},"coverage.html":{}}}],["src/album/album.service.ts:107",{"_index":318,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:13",{"_index":307,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:16",{"_index":322,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:36",{"_index":309,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:55",{"_index":312,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:69",{"_index":316,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:81",{"_index":311,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:88",{"_index":314,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/dto/create",{"_index":802,"title":{},"body":{"classes/CreateAlbumDto.html":{},"coverage.html":{}}}],["src/album/dto/update",{"_index":1453,"title":{},"body":{"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["src/album/entities/album.entity.ts",{"_index":241,"title":{},"body":{"classes/Album.html":{},"coverage.html":{}}}],["src/album/entities/album.entity.ts:2",{"_index":247,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:3",{"_index":249,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:4",{"_index":252,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:5",{"_index":248,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:6",{"_index":245,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:7",{"_index":246,"title":{},"body":{"classes/Album.html":{}}}],["src/album/entities/album.entity.ts:8",{"_index":250,"title":{},"body":{"classes/Album.html":{}}}],["src/app.controller.ts",{"_index":340,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:15",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":375,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":397,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":399,"title":{},"body":{"injectables/AppService.html":{}}}],["src/artist/artist.controller.ts",{"_index":420,"title":{},"body":{"controllers/ArtistController.html":{},"coverage.html":{}}}],["src/artist/artist.controller.ts:104",{"_index":431,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:32",{"_index":425,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:42",{"_index":443,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:52",{"_index":435,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:62",{"_index":437,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:72",{"_index":440,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:82",{"_index":446,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:93",{"_index":428,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.module.ts",{"_index":478,"title":{},"body":{"modules/ArtistModule.html":{}}}],["src/artist/artist.service.ts",{"_index":480,"title":{},"body":{"injectables/ArtistService.html":{},"coverage.html":{}}}],["src/artist/artist.service.ts:100",{"_index":489,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:117",{"_index":490,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:16",{"_index":484,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:160",{"_index":493,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:19",{"_index":500,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:198",{"_index":496,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:235",{"_index":486,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:241",{"_index":488,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:248",{"_index":498,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:258",{"_index":492,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:36",{"_index":485,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:68",{"_index":495,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/dto/create",{"_index":825,"title":{},"body":{"classes/CreateArtistDto.html":{},"coverage.html":{}}}],["src/artist/dto/update",{"_index":1456,"title":{},"body":{"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["src/artist/entities/artist.entity",{"_index":276,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"controllers/SongController.html":{}}}],["src/artist/entities/artist.entity.ts",{"_index":405,"title":{},"body":{"classes/Artist.html":{},"coverage.html":{}}}],["src/artist/entities/artist.entity.ts:10",{"_index":409,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:11",{"_index":411,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:12",{"_index":417,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:2",{"_index":413,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:3",{"_index":415,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:4",{"_index":414,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:5",{"_index":410,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:6",{"_index":412,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:7",{"_index":416,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:8",{"_index":408,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:9",{"_index":418,"title":{},"body":{"classes/Artist.html":{}}}],["src/auth/auth.controller.ts",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:47",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:78",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:88",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:98",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":613,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:110",{"_index":617,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:15",{"_index":615,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":619,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:46",{"_index":618,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:72",{"_index":616,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/logged",{"_index":1051,"title":{},"body":{"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/UserController.html":{},"classes/UserProfileId.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":1119,"title":{},"body":{"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1097,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:17",{"_index":1102,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":1099,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/logged",{"_index":115,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/category/category.controller.ts",{"_index":642,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/category/category.controller.ts:32",{"_index":645,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:40",{"_index":652,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:48",{"_index":655,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:56",{"_index":658,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:69",{"_index":649,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.module.ts",{"_index":680,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/category/category.service.ts",{"_index":682,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/category/category.service.ts:105",{"_index":686,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:12",{"_index":684,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:24",{"_index":687,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:41",{"_index":689,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:61",{"_index":690,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:65",{"_index":692,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:9",{"_index":683,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/dto/create",{"_index":884,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/category/dto/update",{"_index":1458,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/category/entities/category.entity.ts",{"_index":636,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/category/entities/category.entity.ts:2",{"_index":638,"title":{},"body":{"classes/Category.html":{}}}],["src/category/entities/category.entity.ts:3",{"_index":639,"title":{},"body":{"classes/Category.html":{}}}],["src/category/entities/category.entity.ts:4",{"_index":637,"title":{},"body":{"classes/Category.html":{}}}],["src/category/entities/category.entity.ts:5",{"_index":640,"title":{},"body":{"classes/Category.html":{}}}],["src/country/country,controller.ts",{"_index":710,"title":{},"body":{"controllers/CountryController.html":{},"coverage.html":{}}}],["src/country/country,controller.ts:32",{"_index":713,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/country/country,controller.ts:40",{"_index":719,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/country/country,controller.ts:48",{"_index":721,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/country/country,controller.ts:58",{"_index":724,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/country/country,controller.ts:73",{"_index":716,"title":{},"body":{"controllers/CountryController.html":{}}}],["src/country/country.module.ts",{"_index":743,"title":{},"body":{"modules/CountryModule.html":{}}}],["src/country/country.service.ts",{"_index":745,"title":{},"body":{"injectables/CountryService.html":{},"coverage.html":{}}}],["src/country/country.service.ts:12",{"_index":747,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:27",{"_index":749,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:44",{"_index":751,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:48",{"_index":752,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:65",{"_index":748,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:70",{"_index":750,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/country.service.ts:9",{"_index":746,"title":{},"body":{"injectables/CountryService.html":{}}}],["src/country/dto/create",{"_index":889,"title":{},"body":{"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["src/country/dto/update",{"_index":1460,"title":{},"body":{"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["src/country/entities/country,entity.ts",{"_index":702,"title":{},"body":{"classes/Country.html":{},"coverage.html":{}}}],["src/country/entities/country,entity.ts:2",{"_index":706,"title":{},"body":{"classes/Country.html":{}}}],["src/country/entities/country,entity.ts:3",{"_index":707,"title":{},"body":{"classes/Country.html":{}}}],["src/country/entities/country,entity.ts:4",{"_index":704,"title":{},"body":{"classes/Country.html":{}}}],["src/country/entities/country,entity.ts:5",{"_index":705,"title":{},"body":{"classes/Country.html":{}}}],["src/country/entities/country,entity.ts:6",{"_index":708,"title":{},"body":{"classes/Country.html":{}}}],["src/home",{"_index":1034,"title":{},"body":{"controllers/HomePageController.html":{},"modules/HomePageModule.html":{},"injectables/HomePageService.html":{},"classes/SearchDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1927,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/playlist/dto/create",{"_index":6,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreatePlaylistDto.html":{},"coverage.html":{}}}],["src/playlist/dto/update",{"_index":1465,"title":{},"body":{"classes/UpdatePlaylistDto.html":{},"coverage.html":{}}}],["src/playlist/entities/playlist.entity.ts",{"_index":1145,"title":{},"body":{"classes/Playlist.html":{},"coverage.html":{}}}],["src/playlist/entities/playlist.entity.ts:2",{"_index":1147,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:3",{"_index":1149,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:4",{"_index":1148,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:5",{"_index":1150,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:6",{"_index":1151,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:7",{"_index":1146,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/entities/playlist.entity.ts:8",{"_index":1152,"title":{},"body":{"classes/Playlist.html":{}}}],["src/playlist/playlist.controller.ts",{"_index":1154,"title":{},"body":{"controllers/PlaylistController.html":{},"coverage.html":{}}}],["src/playlist/playlist.controller.ts:111",{"_index":1174,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:127",{"_index":1186,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:144",{"_index":1169,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:160",{"_index":1183,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:176",{"_index":1198,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:190",{"_index":1202,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:35",{"_index":1176,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:50",{"_index":1188,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:62",{"_index":1193,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:77",{"_index":1206,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.controller.ts:96",{"_index":1180,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["src/playlist/playlist.module.ts",{"_index":1237,"title":{},"body":{"modules/PlaylistModule.html":{}}}],["src/playlist/playlist.service.ts",{"_index":1930,"title":{},"body":{"coverage.html":{}}}],["src/prisma/prisma.module",{"_index":164,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":1242,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":203,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":1245,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":1251,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":1253,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/seed.ts",{"_index":1932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/prisma/seed/01",{"_index":1934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/prisma/seed/02",{"_index":1937,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/prisma/seed/03",{"_index":1940,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/prisma/seed/04",{"_index":1943,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/prisma/seed/05",{"_index":1945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/profile",{"_index":923,"title":{},"body":{"classes/CreateProfileFavoriteSongDto.html":{},"classes/ProfileFavoriteSong.html":{},"controllers/ProfileFavoriteSongController.html":{},"modules/ProfileFavoriteSongModule.html":{},"injectables/ProfileFavoriteSongService.html":{},"coverage.html":{}}}],["src/profile/dto/create",{"_index":913,"title":{},"body":{"classes/CreateProfileDto.html":{},"coverage.html":{}}}],["src/profile/dto/update",{"_index":1467,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/profile/entities/profile.entity.ts",{"_index":1258,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/profile/entities/profile.entity.ts:2",{"_index":1260,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:3",{"_index":1262,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:4",{"_index":1261,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:5",{"_index":1264,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:6",{"_index":1259,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:7",{"_index":1263,"title":{},"body":{"classes/Profile.html":{}}}],["src/profile/profile.controller.ts",{"_index":1266,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/profile/profile.controller.ts:33",{"_index":1267,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:44",{"_index":1271,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:52",{"_index":1275,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:68",{"_index":1269,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.module.ts",{"_index":1353,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/profile/profile.service.ts",{"_index":1355,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/profile/profile.service.ts:111",{"_index":1358,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:119",{"_index":1360,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:15",{"_index":1356,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:18",{"_index":1357,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:70",{"_index":1359,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:92",{"_index":1362,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/song/dto/create",{"_index":932,"title":{},"body":{"classes/CreateSongDto.html":{},"coverage.html":{}}}],["src/song/dto/update",{"_index":1469,"title":{},"body":{"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["src/song/entities/song.entity.ts",{"_index":1136,"title":{},"body":{"classes/Music.html":{},"coverage.html":{}}}],["src/song/entities/song.entity.ts:2",{"_index":1141,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:3",{"_index":1143,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:4",{"_index":1142,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:5",{"_index":1138,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:6",{"_index":1139,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:7",{"_index":1140,"title":{},"body":{"classes/Music.html":{}}}],["src/song/entities/song.entity.ts:8",{"_index":1144,"title":{},"body":{"classes/Music.html":{}}}],["src/song/song.controller.ts",{"_index":1378,"title":{},"body":{"controllers/SongController.html":{},"coverage.html":{}}}],["src/song/song.controller.ts:35",{"_index":1379,"title":{},"body":{"controllers/SongController.html":{}}}],["src/song/song.controller.ts:43",{"_index":1383,"title":{},"body":{"controllers/SongController.html":{}}}],["src/song/song.controller.ts:51",{"_index":1386,"title":{},"body":{"controllers/SongController.html":{}}}],["src/song/song.controller.ts:59",{"_index":1389,"title":{},"body":{"controllers/SongController.html":{}}}],["src/song/song.controller.ts:72",{"_index":1381,"title":{},"body":{"controllers/SongController.html":{}}}],["src/song/song.module.ts",{"_index":1405,"title":{},"body":{"modules/SongModule.html":{}}}],["src/song/song.service.ts",{"_index":1406,"title":{},"body":{"injectables/SongService.html":{},"coverage.html":{}}}],["src/song/song.service.ts:12",{"_index":1416,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:127",{"_index":1422,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:171",{"_index":1424,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:194",{"_index":1426,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:231",{"_index":1417,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:238",{"_index":1412,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:248",{"_index":1414,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:71",{"_index":1418,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:9",{"_index":1410,"title":{},"body":{"injectables/SongService.html":{}}}],["src/song/song.service.ts:95",{"_index":1420,"title":{},"body":{"injectables/SongService.html":{}}}],["src/user",{"_index":985,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"coverage.html":{}}}],["src/user/dto/create",{"_index":960,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":1463,"title":{},"body":{"classes/UpdatePlanDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserResponseDto.html":{},"controllers/ProfileController.html":{},"controllers/SongController.html":{},"classes/UserProfileId.html":{}}}],["src/user/entities/user.entity.ts",{"_index":1484,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:10",{"_index":1491,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:2",{"_index":1488,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:3",{"_index":1489,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:4",{"_index":1485,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:5",{"_index":1487,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:6",{"_index":1490,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:7",{"_index":1493,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:8",{"_index":1492,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:9",{"_index":1486,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":1495,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:100",{"_index":1505,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:111",{"_index":1508,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:33",{"_index":1502,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:43",{"_index":1510,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:53",{"_index":1514,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:63",{"_index":1517,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:73",{"_index":1519,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:86",{"_index":1522,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":1546,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1606,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:104",{"_index":1618,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:108",{"_index":1620,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:112",{"_index":1622,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:13",{"_index":1608,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:140",{"_index":1624,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:16",{"_index":1609,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:164",{"_index":1611,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:169",{"_index":1613,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:174",{"_index":1626,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:55",{"_index":1614,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:73",{"_index":1616,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/confirm",{"_index":205,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/handle",{"_index":208,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/verifyprofileidintoken",{"_index":1333,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["src/utils/verifyprofileidintoken.ts",{"_index":1953,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sri",{"_index":3438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["st",{"_index":3408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stand",{"_index":2300,"title":{},"body":{"license.html":{}}}],["standard",{"_index":2400,"title":{},"body":{"license.html":{}}}],["standards",{"_index":1767,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["start",{"_index":2110,"title":{},"body":{"index.html":{},"license.html":{}}}],["start:dev",{"_index":2119,"title":{},"body":{"index.html":{}}}],["started",{"_index":1636,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["starts",{"_index":1046,"title":{},"body":{"controllers/HomePageController.html":{},"license.html":{}}}],["startswith",{"_index":1086,"title":{},"body":{"injectables/HomePageService.html":{}}}],["state",{"_index":2929,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["stated",{"_index":2458,"title":{},"body":{"license.html":{}}}],["statement",{"_index":2716,"title":{},"body":{"license.html":{}}}],["statements",{"_index":1911,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":856,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateCountryDto.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["stating",{"_index":2525,"title":{},"body":{"license.html":{}}}],["status",{"_index":341,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"license.html":{}}}],["steps",{"_index":2259,"title":{},"body":{"license.html":{}}}],["storage",{"_index":2555,"title":{},"body":{"license.html":{}}}],["strategy",{"_index":1106,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"classes/Profile.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["students",{"_index":3590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["studio",{"_index":842,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["style",{"_index":1665,"title":{},"body":{"changelog.html":{}}}],["sua",{"_index":2101,"title":{},"body":{"index.html":{}}}],["suas",{"_index":2026,"title":{},"body":{"index.html":{}}}],["subdividing",{"_index":2768,"title":{},"body":{"license.html":{}}}],["subject",{"_index":2762,"title":{},"body":{"license.html":{}}}],["sublicenses",{"_index":2798,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":2484,"title":{},"body":{"license.html":{}}}],["subprograms",{"_index":2444,"title":{},"body":{"license.html":{}}}],["subroutine",{"_index":2953,"title":{},"body":{"license.html":{}}}],["subscribers",{"_index":3585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscription",{"_index":3583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subsection",{"_index":2588,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2633,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":2298,"title":{},"body":{"license.html":{}}}],["such",{"_index":1807,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["sudan",{"_index":3441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sue",{"_index":2808,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":2643,"title":{},"body":{"license.html":{}}}],["summary",{"_index":132,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["super",{"_index":1110,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["supplement",{"_index":2674,"title":{},"body":{"license.html":{}}}],["support",{"_index":2532,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supports",{"_index":2595,"title":{},"body":{"license.html":{}}}],["sure",{"_index":2224,"title":{},"body":{"license.html":{}}}],["suriname",{"_index":3443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["surrender",{"_index":2244,"title":{},"body":{"license.html":{}}}],["survive",{"_index":2715,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":2906,"title":{},"body":{"license.html":{}}}],["sv",{"_index":3144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svalbard",{"_index":3445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svg",{"_index":2963,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1654,"title":{},"body":{"changelog.html":{},"dependencies.html":{},"todo.html":{}}}],["swaziland",{"_index":3449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sweden",{"_index":3451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switzerland",{"_index":3453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sy",{"_index":3456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["syrian",{"_index":3455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":2409,"title":{},"body":{"license.html":{}}}],["systematic",{"_index":2286,"title":{},"body":{"license.html":{}}}],["sz",{"_index":3450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tabelas",{"_index":2120,"title":{},"body":{"index.html":{}}}],["table",{"_index":1955,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1954,"title":{},"body":{"coverage.html":{}}}],["taiwan",{"_index":3457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tajikistan",{"_index":3460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["take",{"_index":509,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/HomePageService.html":{},"contributing.html":{},"license.html":{}}}],["talvez",{"_index":2085,"title":{},"body":{"index.html":{}}}],["também",{"_index":2018,"title":{},"body":{"index.html":{}}}],["tangible",{"_index":2615,"title":{},"body":{"license.html":{}}}],["tanzania",{"_index":3462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tc",{"_index":3485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["td",{"_index":3098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["team",{"_index":1873,"title":{},"body":{"contributing.html":{}}}],["technological",{"_index":2492,"title":{},"body":{"license.html":{}}}],["tells",{"_index":2386,"title":{},"body":{"license.html":{}}}],["tem",{"_index":2011,"title":{},"body":{"index.html":{}}}],["temporarily",{"_index":1838,"title":{},"body":{"contributing.html":{}}}],["temporary",{"_index":1896,"title":{},"body":{"contributing.html":{}}}],["tenha",{"_index":2039,"title":{},"body":{"index.html":{}}}],["ter",{"_index":2103,"title":{},"body":{"index.html":{}}}],["tera",{"_index":2134,"title":{},"body":{"index.html":{}}}],["term",{"_index":2456,"title":{},"body":{"license.html":{}}}],["terminal",{"_index":2061,"title":{},"body":{"index.html":{},"license.html":{}}}],["terminate",{"_index":2722,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":2743,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":2731,"title":{},"body":{"license.html":{}}}],["termination",{"_index":2719,"title":{},"body":{"license.html":{}}}],["terms",{"_index":2257,"title":{},"body":{"license.html":{}}}],["territories",{"_index":3171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["territory",{"_index":3070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testar",{"_index":2047,"title":{},"body":{"index.html":{}}}],["tf",{"_index":3172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tg",{"_index":3470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["th",{"_index":3465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thailand",{"_index":3464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["therefore",{"_index":2245,"title":{},"body":{"license.html":{}}}],["things",{"_index":2237,"title":{},"body":{"license.html":{}}}],["third",{"_index":2518,"title":{},"body":{"license.html":{}}}],["this.$connect",{"_index":1255,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1256,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.adminselect",{"_index":227,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.adminservice.create(dto",{"_index":135,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.delete(id",{"_index":148,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.findall",{"_index":137,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.findone(id",{"_index":141,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.update(admin.id",{"_index":144,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.albumidexist(dto.albumid",{"_index":1428,"title":{},"body":{"injectables/SongService.html":{}}}],["this.albumselect",{"_index":326,"title":{},"body":{"injectables/AlbumService.html":{}}}],["this.albumservice.create(artist.id",{"_index":286,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.delete(artist.id",{"_index":295,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.findone(albumid",{"_index":289,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.update(artist.id",{"_index":292,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.appservice.getappstatus(baseurl",{"_index":359,"title":{},"body":{"controllers/AppController.html":{}}}],["this.artistselect",{"_index":508,"title":{},"body":{"injectables/ArtistService.html":{}}}],["this.artistservice.create(dto",{"_index":455,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.delete(artist.id",{"_index":470,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.deleteartist(id",{"_index":474,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.findall",{"_index":460,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.findone(id",{"_index":463,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.findonebyartist(artistid",{"_index":466,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.homepage(artist.id",{"_index":458,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.update(artist.id",{"_index":468,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.authservice.loginadmin(loginadmindto",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginartist(loginartistdto",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginprofile(user",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginuser(loginuserdto",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.categoryidexist(dto.categoryid",{"_index":1429,"title":{},"body":{"injectables/SongService.html":{}}}],["this.categoryservice.create(dto",{"_index":665,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.delete(categoryid",{"_index":676,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall",{"_index":667,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(categoryid",{"_index":670,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(categoryid",{"_index":673,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.countryservice.create(dto",{"_index":730,"title":{},"body":{"controllers/CountryController.html":{}}}],["this.countryservice.delete(id",{"_index":739,"title":{},"body":{"controllers/CountryController.html":{}}}],["this.countryservice.findall",{"_index":731,"title":{},"body":{"controllers/CountryController.html":{}}}],["this.countryservice.findone(id",{"_index":734,"title":{},"body":{"controllers/CountryController.html":{}}}],["this.countryservice.update(id",{"_index":737,"title":{},"body":{"controllers/CountryController.html":{}}}],["this.favoritesongservice.create",{"_index":1306,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["this.favoritesongservice.delete",{"_index":1309,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["this.favoritesongservice.findall",{"_index":1307,"title":{},"body":{"controllers/ProfileFavoriteSongController.html":{}}}],["this.findbyid(artistdid",{"_index":1436,"title":{},"body":{"injectables/SongService.html":{}}}],["this.findbyid(artistid",{"_index":1438,"title":{},"body":{"injectables/SongService.html":{}}}],["this.findbyid(categoryid",{"_index":698,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.findbyid(categoryid).catch(handleerror",{"_index":697,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.findbyid(id",{"_index":229,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CountryService.html":{},"injectables/UserService.html":{}}}],["this.findbyid(userid",{"_index":1633,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findbyidprofileuser(userid",{"_index":1336,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["this.findbyidsonginprofile(profileid",{"_index":1341,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["this.findonealbuminartist(artistid",{"_index":329,"title":{},"body":{"injectables/AlbumService.html":{}}}],["this.findoneartist(id",{"_index":526,"title":{},"body":{"injectables/ArtistService.html":{}}}],["this.findoneprofileinuser(userid",{"_index":1077,"title":{},"body":{"injectables/HomePageService.html":{},"injectables/ProfileService.html":{}}}],["this.homepageservice.homepage",{"_index":1057,"title":{},"body":{"controllers/HomePageController.html":{}}}],["this.homepageservice.searchplaylistsongalbumartist(dto",{"_index":1062,"title":{},"body":{"controllers/HomePageController.html":{}}}],["this.jwt.sign",{"_index":626,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.playlistservice.addplaylistfavorite",{"_index":1229,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.addsongtoplaylist",{"_index":1225,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.create",{"_index":1213,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.delete",{"_index":1224,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.deleteplaylistfavorite",{"_index":1230,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.deletesongtoplaylist",{"_index":1226,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.findallplaylistprofile",{"_index":1217,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.findoneplaylist",{"_index":1220,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.spotifyplaylistcreate(dto",{"_index":1231,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.spotifyplaylistdelete(playlistid",{"_index":1233,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.playlistservice.updateplaylist",{"_index":1222,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["this.prisma.admin",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.prisma.admin.delete",{"_index":237,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.prisma.admin.findunique",{"_index":233,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.prisma.album",{"_index":325,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/HomePageService.html":{}}}],["this.prisma.album.findunique",{"_index":1439,"title":{},"body":{"injectables/SongService.html":{}}}],["this.prisma.artist",{"_index":331,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/SongService.html":{}}}],["this.prisma.artist.findunique",{"_index":524,"title":{},"body":{"injectables/ArtistService.html":{}}}],["this.prisma.category",{"_index":694,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/HomePageService.html":{}}}],["this.prisma.category.findunique",{"_index":1440,"title":{},"body":{"injectables/SongService.html":{}}}],["this.prisma.category.update",{"_index":700,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.country",{"_index":754,"title":{},"body":{"injectables/CountryService.html":{}}}],["this.prisma.country.delete",{"_index":757,"title":{},"body":{"injectables/CountryService.html":{}}}],["this.prisma.country.findunique",{"_index":528,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/CountryService.html":{}}}],["this.prisma.playlist",{"_index":1090,"title":{},"body":{"injectables/HomePageService.html":{}}}],["this.prisma.profile",{"_index":1078,"title":{},"body":{"injectables/HomePageService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["this.prisma.profilefavoritesong",{"_index":1338,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["this.prisma.song",{"_index":1083,"title":{},"body":{"injectables/HomePageService.html":{},"injectables/SongService.html":{}}}],["this.prisma.song.findunique",{"_index":1348,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["this.prisma.user",{"_index":215,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":1634,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.userplan",{"_index":1597,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["this.prisma.userplan.create",{"_index":1596,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["this.prisma.userplan.delete",{"_index":1600,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["this.prisma.userplan.findunique",{"_index":1601,"title":{},"body":{"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["this.profileservice.create(userprofileid.user.id",{"_index":1280,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.delete",{"_index":1286,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.findall(userprofileid.user.id",{"_index":1282,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.update",{"_index":1284,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.songservice.create(artist.id",{"_index":1393,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.delete(artist.id",{"_index":1401,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.findall",{"_index":1394,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.findone(songid",{"_index":1397,"title":{},"body":{"controllers/SongController.html":{}}}],["this.songservice.update(artist.id",{"_index":1399,"title":{},"body":{"controllers/SongController.html":{}}}],["this.userplanservice.create(dto",{"_index":1570,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["this.userplanservice.delete(id",{"_index":1578,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["this.userplanservice.findall",{"_index":1571,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["this.userplanservice.findone(id",{"_index":1574,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["this.userplanservice.update(id",{"_index":1576,"title":{},"body":{"controllers/UserPlanController.html":{}}}],["this.userservice.create(dto",{"_index":1527,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deletemyaccount(userprofileid.user.id",{"_index":1539,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(id",{"_index":1542,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1529,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findmyaccount(userprofileid.user.id",{"_index":1531,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findoneuser(id",{"_index":1535,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatemyaccount(userprofileid.user.id",{"_index":1536,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatemyplan(userprofileid.user.id",{"_index":1537,"title":{},"body":{"controllers/UserController.html":{}}}],["this.verifycountryidexist(dto.countryid",{"_index":501,"title":{},"body":{"injectables/ArtistService.html":{}}}],["this.verifysongexist(songid",{"_index":1335,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["this.verifyuserplanexist(dto.userplanid",{"_index":1628,"title":{},"body":{"injectables/UserService.html":{}}}],["this.verifyuserplanidexist(id",{"_index":1599,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["this.verifyyearalbum(dto.year",{"_index":323,"title":{},"body":{"injectables/AlbumService.html":{}}}],["those",{"_index":2296,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["though",{"_index":2677,"title":{},"body":{"license.html":{}}}],["threatened",{"_index":2307,"title":{},"body":{"license.html":{}}}],["threatening",{"_index":1843,"title":{},"body":{"contributing.html":{}}}],["three",{"_index":843,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{}}}],["through",{"_index":2373,"title":{},"body":{"license.html":{}}}],["throw",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["thus",{"_index":2477,"title":{},"body":{"license.html":{}}}],["time",{"_index":2740,"title":{},"body":{"license.html":{}}}],["timor",{"_index":3466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tj",{"_index":3461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tk",{"_index":3472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tl",{"_index":3468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tm",{"_index":3482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tn",{"_index":3478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tobago",{"_index":3475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo",{"_index":2969,"title":{"todo.html":{}},"body":{"todo.html":{}}}],["togo",{"_index":3469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tokelau",{"_index":3471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserResponseDto.html":{},"miscellaneous/variables.html":{}}}],["tome",{"_index":3406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tonga",{"_index":3473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tools",{"_index":2437,"title":{},"body":{"license.html":{}}}],["towards",{"_index":1789,"title":{},"body":{"contributing.html":{}}}],["tr",{"_index":3480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trabalha",{"_index":2162,"title":{},"body":{"index.html":{}}}],["tracks",{"_index":1005,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["trade",{"_index":2701,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":2700,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":2702,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":2649,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":2375,"title":{},"body":{"license.html":{}}}],["transferred",{"_index":2650,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":2765,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":1967,"title":{},"body":{"dependencies.html":{}}}],["transmission",{"_index":2605,"title":{},"body":{"license.html":{}}}],["trap",{"_index":3574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["treated",{"_index":2676,"title":{},"body":{"license.html":{}}}],["treatment",{"_index":1686,"title":{},"body":{"changelog.html":{}}}],["treaty",{"_index":2499,"title":{},"body":{"license.html":{}}}],["trinidad",{"_index":3474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trolling",{"_index":1798,"title":{},"body":{"contributing.html":{}}}],["true",{"_index":195,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"classes/CreateSongDto.html":{},"injectables/HomePageService.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["true})@apiproperty({description",{"_index":941,"title":{},"body":{"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["tt",{"_index":3476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tudo",{"_index":2182,"title":{},"body":{"index.html":{}}}],["tunisia",{"_index":3477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["turkey",{"_index":3479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["turkmenistan",{"_index":3481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["turks",{"_index":3483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tuvalu",{"_index":3486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tv",{"_index":3487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tw",{"_index":3459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twelve",{"_index":3599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["two",{"_index":1736,"title":{},"body":{"contributing.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/Album.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Country.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"controllers/HomePageController.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"controllers/PlaylistController.html":{},"injectables/PrismaService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"classes/SearchDto.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPlan.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":1603,"title":{},"body":{"classes/UserProfileId.html":{},"coverage.html":{}}}],["type.ts:5",{"_index":1605,"title":{},"body":{"classes/UserProfileId.html":{}}}],["type.ts:8",{"_index":1604,"title":{},"body":{"classes/UserProfileId.html":{}}}],["types",{"_index":1961,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2006,"title":{},"body":{"index.html":{}}}],["typical",{"_index":2628,"title":{},"body":{"license.html":{}}}],["tz",{"_index":3463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tópico",{"_index":2086,"title":{},"body":{"index.html":{}}}],["u.s",{"_index":3511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ua",{"_index":3491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ug",{"_index":3489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uganda",{"_index":3488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":1980,"title":{},"body":{"dependencies.html":{}}}],["ukraine",{"_index":3490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["um",{"_index":2014,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["uma",{"_index":2003,"title":{},"body":{"index.html":{}}}],["unable",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{}}}],["unacceptable",{"_index":1791,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["unauthorizedexception",{"_index":620,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception('invalid",{"_index":621,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('profile",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":1117,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":3525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["under",{"_index":2338,"title":{},"body":{"license.html":{}}}],["unique([categoryid",{"_index":1671,"title":{},"body":{"changelog.html":{}}}],["united",{"_index":855,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateCountryDto.html":{},"miscellaneous/variables.html":{}}}],["university",{"_index":3588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":182,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CountryService.html":{},"injectables/HomePageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/SongService.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["unless",{"_index":2636,"title":{},"body":{"license.html":{}}}],["unlicensed",{"_index":2968,"title":{},"body":{"properties.html":{}}}],["unlimited",{"_index":2462,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["unmodified",{"_index":2351,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":2487,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":2672,"title":{},"body":{"license.html":{}}}],["unprocessableentityexception",{"_index":3532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unreleased",{"_index":1647,"title":{},"body":{"changelog.html":{}}}],["until",{"_index":2730,"title":{},"body":{"license.html":{}}}],["unwelcome",{"_index":1795,"title":{},"body":{"contributing.html":{}}}],["up",{"_index":3617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":72,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CountryController.html":{},"injectables/CountryService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"injectables/SongService.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"changelog.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["update(@loggedadmin",{"_index":143,"title":{},"body":{"controllers/AdminController.html":{}}}],["update(@loggedartist",{"_index":467,"title":{},"body":{"controllers/ArtistController.html":{}}}],["update(admin",{"_index":95,"title":{},"body":{"controllers/AdminController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/UserPlanController.html":{}}}],["update(artist",{"_index":272,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/SongController.html":{}}}],["update(artistdid",{"_index":1425,"title":{},"body":{"injectables/SongService.html":{}}}],["update(artistid",{"_index":315,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/ArtistService.html":{}}}],["update(categoryid",{"_index":691,"title":{},"body":{"injectables/CategoryService.html":{}}}],["update(id",{"_index":190,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CountryService.html":{},"injectables/UserPlanService.html":{}}}],["update(userid",{"_index":1361,"title":{},"body":{"injectables/ProfileService.html":{}}}],["update(userprofileid",{"_index":1272,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updateadmindto",{"_index":96,"title":{"classes/UpdateAdminDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["updatealbumdto",{"_index":273,"title":{"classes/UpdateAlbumDto.html":{}},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["updateartistdto",{"_index":444,"title":{"classes/UpdateArtistDto.html":{}},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["updatecategorydto",{"_index":656,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecountrydto",{"_index":722,"title":{"classes/UpdateCountryDto.html":{}},"body":{"controllers/CountryController.html":{},"injectables/CountryService.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["updated",{"_index":3614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatedat",{"_index":53,"title":{},"body":{"classes/Admin.html":{},"classes/Album.html":{},"classes/Artist.html":{},"classes/Category.html":{},"classes/Country.html":{},"classes/Music.html":{},"classes/Playlist.html":{},"classes/Profile.html":{},"classes/User.html":{},"classes/UserPlan.html":{}}}],["updatemyaccount",{"_index":1500,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatemyaccount(userid",{"_index":1621,"title":{},"body":{"injectables/UserService.html":{}}}],["updatemyaccount(userprofileid",{"_index":1518,"title":{},"body":{"controllers/UserController.html":{}}}],["updatemyplan",{"_index":1501,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatemyplan(userid",{"_index":1623,"title":{},"body":{"injectables/UserService.html":{}}}],["updatemyplan(userprofileid",{"_index":1520,"title":{},"body":{"controllers/UserController.html":{}}}],["updateplandto",{"_index":1462,"title":{"classes/UpdatePlanDto.html":{}},"body":{"classes/UpdatePlanDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateplaylist",{"_index":1163,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["updateplaylist(userprofileid",{"_index":1203,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["updateplaylistdto",{"_index":1204,"title":{"classes/UpdatePlaylistDto.html":{}},"body":{"controllers/PlaylistController.html":{},"classes/UpdatePlaylistDto.html":{},"coverage.html":{}}}],["updateprofiledto",{"_index":1273,"title":{"classes/UpdateProfileDto.html":{}},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updates",{"_index":2661,"title":{},"body":{"license.html":{}}}],["updatesongdto",{"_index":1387,"title":{"classes/UpdateSongDto.html":{}},"body":{"controllers/SongController.html":{},"injectables/SongService.html":{},"classes/UpdateSongDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1471,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserplandto",{"_index":1480,"title":{"classes/UpdateUserPlanDto.html":{}},"body":{"classes/UpdateUserPlanDto.html":{},"controllers/UserPlanController.html":{},"injectables/UserPlanService.html":{},"coverage.html":{}}}],["upon",{"_index":3597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":806,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateSongDto.html":{},"classes/UpdateSongDto.html":{}}}],["uruguay",{"_index":3498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":812,"title":{},"body":{"classes/CreateAlbumDto.html":{},"contributing.html":{},"license.html":{}}}],["used",{"_index":2322,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1724,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["useguards",{"_index":107,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["useguards(authguard",{"_index":128,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AlbumController.html":{},"controllers/ArtistController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CountryController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{}}}],["user",{"_index":213,"title":{"classes/User.html":{}},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/LoginUserResponseDto.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"injectables/ProfileService.html":{},"controllers/SongController.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPlanDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"classes/UserProfileId.html":{},"injectables/UserService.html":{},"coverage.html":{},"license.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["user#5678",{"_index":765,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["user')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{}}}],["user's",{"_index":1038,"title":{},"body":{"controllers/HomePageController.html":{}}}],["user(@loggeduser",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{}}}],["user(user",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{}}}],["user)'})@httpcode(httpstatus.created",{"_index":1168,"title":{},"body":{"controllers/PlaylistController.html":{}}}],["user)'})@httpcode(httpstatus.no_content",{"_index":1179,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["user.controller",{"_index":1547,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{}}}],["user.decorator.ts",{"_index":1926,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":961,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":1126,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:19",{"_index":1127,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:21",{"_index":972,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:30",{"_index":966,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:39",{"_index":968,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:50",{"_index":973,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:51",{"_index":1478,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:57",{"_index":964,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:59",{"_index":1473,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:64",{"_index":982,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.password",{"_index":625,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.profiles.length",{"_index":1365,"title":{},"body":{"injectables/ProfileService.html":{}}}],["user.service",{"_index":1524,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.user.email",{"_index":627,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.userplan.accounts",{"_index":1366,"title":{},"body":{"injectables/ProfileService.html":{}}}],["user/user.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["user@user.com",{"_index":967,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["usercategory",{"_index":196,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usercategoryname",{"_index":407,"title":{},"body":{"classes/Artist.html":{},"classes/User.html":{}}}],["usercategorys",{"_index":1936,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":1494,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":1073,"title":{},"body":{"injectables/HomePageService.html":{},"classes/Profile.html":{},"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":373,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userobject",{"_index":3547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userobject.user.password",{"_index":3550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userobject.user.usercategoryname",{"_index":3549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userobject.usercategoryname",{"_index":3548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userplan",{"_index":1364,"title":{"classes/UserPlan.html":{}},"body":{"injectables/ProfileService.html":{},"classes/UserPlan.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["userplan.length",{"_index":1598,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["userplancontroller",{"_index":1557,"title":{"controllers/UserPlanController.html":{}},"body":{"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"coverage.html":{}}}],["userplanid",{"_index":962,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"injectables/UserPlanService.html":{},"injectables/UserService.html":{}}}],["userplanmodule",{"_index":374,"title":{"modules/UserPlanModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserPlanModule.html":{},"modules.html":{},"overview.html":{}}}],["userplans",{"_index":1942,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userplanservice",{"_index":1568,"title":{"injectables/UserPlanService.html":{}},"body":{"controllers/UserPlanController.html":{},"modules/UserPlanModule.html":{},"injectables/UserPlanService.html":{},"coverage.html":{},"overview.html":{}}}],["userprofile",{"_index":1041,"title":{},"body":{"controllers/HomePageController.html":{},"injectables/ProfileService.html":{}}}],["userprofile.profileid",{"_index":1059,"title":{},"body":{"controllers/HomePageController.html":{}}}],["userprofile.profiles",{"_index":1372,"title":{},"body":{"injectables/ProfileService.html":{}}}],["userprofile.profiles.length",{"_index":1371,"title":{},"body":{"injectables/ProfileService.html":{}}}],["userprofile.user.id",{"_index":1058,"title":{},"body":{"controllers/HomePageController.html":{}}}],["userprofileid",{"_index":559,"title":{"classes/UserProfileId.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HomePageController.html":{},"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{},"controllers/UserController.html":{},"classes/UserProfileId.html":{},"coverage.html":{}}}],["userprofileid.profileid",{"_index":1215,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["userprofileid.user.id",{"_index":1214,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/ProfileController.html":{},"controllers/ProfileFavoriteSongController.html":{}}}],["users",{"_index":1167,"title":{},"body":{"controllers/PlaylistController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":1523,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userspotify",{"_index":1081,"title":{},"body":{"injectables/HomePageService.html":{}}}],["uses",{"_index":2631,"title":{},"body":{"license.html":{}}}],["using",{"_index":1773,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["usuário",{"_index":2015,"title":{},"body":{"index.html":{}}}],["usuário]@localhost:[porta",{"_index":2077,"title":{},"body":{"index.html":{}}}],["usuários",{"_index":2144,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":2005,"title":{},"body":{"index.html":{}}}],["uy",{"_index":3499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uz",{"_index":3501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uzbekistan",{"_index":3500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["va",{"_index":3211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vaga",{"_index":2159,"title":{},"body":{"index.html":{}}}],["valid",{"_index":2575,"title":{},"body":{"license.html":{},"todo.html":{}}}],["validate",{"_index":1098,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1100,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validation",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["validator",{"_index":40,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCountryDto.html":{},"classes/CreatePlaylistDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateProfileFavoriteSongDto.html":{},"classes/CreateSongDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserPlanDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginArtistDto.html":{},"classes/LoginProfileDto.html":{},"classes/LoginUserDto.html":{},"classes/SearchDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateSongDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserProfileId.html":{},"dependencies.html":{}}}],["value",{"_index":194,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"miscellaneous/variables.html":{}}}],["vanuatu",{"_index":3502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":1923,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1721,"title":{"miscellaneous/variables.html":{}},"body":{"contributing.html":{},"miscellaneous/variables.html":{}}}],["variáveis",{"_index":2073,"title":{},"body":{"index.html":{}}}],["vatican",{"_index":3209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vc",{"_index":3400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ve",{"_index":3505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["venezuela",{"_index":3504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verbatim",{"_index":2205,"title":{},"body":{"license.html":{}}}],["verde",{"_index":3089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verifyconfirmpassword",{"_index":204,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["verifyconfirmpassword(dto.password",{"_index":210,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ArtistService.html":{},"injectables/UserService.html":{}}}],["verifycountryidexist",{"_index":483,"title":{},"body":{"injectables/ArtistService.html":{}}}],["verifycountryidexist(countryid",{"_index":497,"title":{},"body":{"injectables/ArtistService.html":{}}}],["verifyprofileidintoken",{"_index":1332,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["verifyprofileidintoken(profileid",{"_index":1334,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{},"injectables/ProfileService.html":{}}}],["verifysongexist",{"_index":1318,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["verifysongexist(songid",{"_index":1330,"title":{},"body":{"injectables/ProfileFavoriteSongService.html":{}}}],["verifyuserplanexist",{"_index":1607,"title":{},"body":{"injectables/UserService.html":{}}}],["verifyuserplanexist(userplanid",{"_index":1625,"title":{},"body":{"injectables/UserService.html":{}}}],["verifyuserplanidexist",{"_index":1585,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["verifyuserplanidexist(userplanid",{"_index":1592,"title":{},"body":{"injectables/UserPlanService.html":{}}}],["verifyyearalbum",{"_index":306,"title":{},"body":{"injectables/AlbumService.html":{}}}],["verifyyearalbum(year",{"_index":317,"title":{},"body":{"injectables/AlbumService.html":{}}}],["version",{"_index":1013,"title":{},"body":{"classes/CreateUserPlanDto.html":{},"contributing.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["versioning",{"_index":1646,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["versions",{"_index":2222,"title":{},"body":{"license.html":{}}}],["vg",{"_index":3510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vi",{"_index":3512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":1698,"title":{},"body":{"contributing.html":{}}}],["viet",{"_index":3506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":346,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/SongController.html":{},"controllers/UserController.html":{},"controllers/UserPlanController.html":{},"license.html":{}}}],["viewpoints",{"_index":1779,"title":{},"body":{"contributing.html":{}}}],["vincent",{"_index":3398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["violates",{"_index":2667,"title":{},"body":{"license.html":{}}}],["violation",{"_index":2726,"title":{},"body":{"license.html":{}}}],["virgin",{"_index":3509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["visible",{"_index":2383,"title":{},"body":{"license.html":{}}}],["visualizar",{"_index":2099,"title":{},"body":{"index.html":{}}}],["visualização",{"_index":2126,"title":{},"body":{"index.html":{}}}],["vn",{"_index":3508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["voc",{"_index":2038,"title":{},"body":{"index.html":{}}}],["void",{"_index":319,"title":{},"body":{"injectables/AlbumService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["volume",{"_index":2554,"title":{},"body":{"license.html":{}}}],["vu",{"_index":3503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["w",{"_index":2941,"title":{},"body":{"license.html":{}}}],["waive",{"_index":2507,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":2919,"title":{},"body":{"license.html":{}}}],["wallis",{"_index":3513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["want",{"_index":19,"title":{},"body":{"classes/AddSongPlaylistDto.html":{},"license.html":{}}}],["warranties",{"_index":2387,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2267,"title":{},"body":{"license.html":{}}}],["way",{"_index":2227,"title":{},"body":{"license.html":{}}}],["ways",{"_index":2566,"title":{},"body":{"license.html":{}}}],["weak",{"_index":882,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["weak'})@apiproperty({description",{"_index":880,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["welcome",{"_index":2942,"title":{},"body":{"license.html":{}}}],["welcoming",{"_index":1744,"title":{},"body":{"contributing.html":{}}}],["well",{"_index":2366,"title":{},"body":{"license.html":{}}}],["western",{"_index":3516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wf",{"_index":3515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whatever",{"_index":2770,"title":{},"body":{"license.html":{}}}],["whether",{"_index":907,"title":{},"body":{"classes/CreatePlaylistDto.html":{},"license.html":{}}}],["whole",{"_index":2412,"title":{},"body":{"license.html":{}}}],["whose",{"_index":1045,"title":{},"body":{"controllers/HomePageController.html":{},"license.html":{}}}],["widely",{"_index":2407,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":1832,"title":{},"body":{"contributing.html":{}}}],["window",{"_index":2425,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":2498,"title":{},"body":{"license.html":{}}}],["wish",{"_index":1696,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["within",{"_index":1849,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["without",{"_index":1811,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["work",{"_index":2226,"title":{},"body":{"license.html":{}}}],["work's",{"_index":2436,"title":{},"body":{"license.html":{}}}],["working",{"_index":2408,"title":{},"body":{"license.html":{}}}],["works",{"_index":2212,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":852,"title":{},"body":{"classes/CreateArtistDto.html":{},"license.html":{}}}],["writing",{"_index":2882,"title":{},"body":{"license.html":{}}}],["written",{"_index":2574,"title":{},"body":{"license.html":{}}}],["ws",{"_index":3401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ye",{"_index":3520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["year",{"_index":244,"title":{},"body":{"classes/Album.html":{},"injectables/AlbumService.html":{},"injectables/ArtistService.html":{},"classes/CreateAlbumDto.html":{}}}],["years",{"_index":2576,"title":{},"body":{"license.html":{}}}],["yemen",{"_index":3519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yoru",{"_index":813,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["you're",{"_index":1047,"title":{},"body":{"controllers/HomePageController.html":{}}}],["yourself",{"_index":2815,"title":{},"body":{"license.html":{}}}],["yt",{"_index":3303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yugoslav",{"_index":3281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yunyne7jyhmfkmyqp0jon00w",{"_index":1132,"title":{},"body":{"classes/LoginUserResponseDto.html":{}}}],["z",{"_index":784,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["z])(?=.*[a",{"_index":783,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateArtistDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["za",{"_index":3433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zambia",{"_index":3521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zealand",{"_index":3333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zimbabwe",{"_index":3523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zm",{"_index":3522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":157,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CountryModule.html":{},"modules/HomePageModule.html":{},"modules/PlaylistModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileFavoriteSongModule.html":{},"modules/ProfileModule.html":{},"modules/SongModule.html":{},"modules/UserModule.html":{},"modules/UserPlanModule.html":{},"overview.html":{}}}],["zw",{"_index":3524,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddSongPlaylistDto.html":{"url":"classes/AddSongPlaylistDto.html","title":"class - AddSongPlaylistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddSongPlaylistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/dto/create-playlist-song.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                playlistId\n                            \n                            \n                                songId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        playlistId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'id of the playlist you want to add the song to', example: '36e8f88f-c079-4cc5-bd74-f8e87669ec99'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/playlist/dto/create-playlist-song.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        songId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'Id of the song you want to add to the playlist', example: 'd450edf0-48c0-4470-8cf4-34e588103949'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/playlist/dto/create-playlist-song.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID } from 'class-validator';\n\nexport class AddSongPlaylistDto {\n  @IsUUID()\n  @ApiProperty({\n    description: 'id of the playlist you want to add the song to',\n    example: '36e8f88f-c079-4cc5-bd74-f8e87669ec99',\n  })\n  playlistId: string;\n\n  @IsUUID()\n  @ApiProperty({\n    description: 'Id of the song you want to add to the playlist',\n    example: 'd450edf0-48c0-4470-8cf4-34e588103949',\n  })\n  songId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/entities/admin.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {\n  id?: string;\n  name: string;\n  cpf: string;\n  password: string;\n  email: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(admin: Admin, dto: CreateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiOperation({summary: 'Create a new Admin - (MANAGER)'})\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:adminID')@ApiOperation({summary: 'Delete an admin by ID - (MANAGER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(admin: Admin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find-all')@ApiOperation({summary: 'Fetch all Admins - (MANAGER)'})\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find-one/:adminID')@ApiOperation({summary: 'Fetch an admin by ID - (MANAGER)'})\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(admin: Admin, dto: UpdateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update')@ApiOperation({summary: 'Edit an admin logged - (ADMIN - MANAGER)'})\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { LoggedManager } from 'src/auth/logged-manager.decorator';\nimport { AdminService } from './admin.service';\nimport { CreateAdminDto } from './dto/create-admin.dto';\nimport { UpdateAdminDto } from './dto/update-managerAdmin.dto';\nimport { Admin } from './entities/admin.entity';\n\n@Controller('admin')\n@ApiTags('manager-admin')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  @Post('/create')\n  @ApiOperation({\n    summary: 'Create a new Admin - (MANAGER)',\n  })\n  create(@LoggedManager() admin: Admin, @Body() dto: CreateAdminDto) {\n    return this.adminService.create(dto);\n  }\n\n  @Get('/find-all')\n  @ApiOperation({\n    summary: 'Fetch all Admins - (MANAGER)',\n  })\n  findAll(@LoggedManager() admin: Admin) {\n    return this.adminService.findAll();\n  }\n\n  @Get('/find-one/:adminID')\n  @ApiOperation({\n    summary: 'Fetch an admin by ID - (MANAGER)',\n  })\n  findOne(@LoggedManager() admin: Admin, @Param('adminID') id: string) {\n    return this.adminService.findOne(id);\n  }\n\n  @Patch('/update')\n  @ApiOperation({\n    summary: 'Edit an admin logged - (ADMIN - MANAGER)',\n  })\n  update(@LoggedAdmin() admin: Admin, @Body() dto: UpdateAdminDto) {\n    return this.adminService.update(admin.id, dto);\n  }\n\n  @Delete('/delete/:adminID')\n  @ApiOperation({\n    summary:\n      'Delete an admin by ID - (MANAGER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(@LoggedManager() admin: Admin, @Param('adminID') id: string) {\n    return this.adminService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nPrismaModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { AdminController } from './admin.controller';\nimport { AdminService } from './admin.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [AdminController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                adminSelect\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/admin/admin.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateAdminDto)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, dto: UpdateAdminDto)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        adminSelect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: true,\n    name: true,\n    email: true,\n    cpf: true,\n    userCategory: {\n      select: {\n        name: true,\n      },\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/admin/admin.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { verifyConfirmPassword } from 'src/utils/confirm-password.ultil';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateAdminDto } from './dto/create-admin.dto';\nimport { UpdateAdminDto } from './dto/update-managerAdmin.dto';\nimport { Admin } from './entities/admin.entity';\n\n@Injectable()\nexport class AdminService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  adminSelect = {\n    id: true,\n    name: true,\n    email: true,\n    cpf: true,\n    userCategory: {\n      select: {\n        name: true,\n      },\n    },\n  };\n\n  async create(dto: CreateAdminDto) {\n    verifyConfirmPassword(dto.password, dto.confirmPassword);\n    const user = await this.prisma.user\n      .findUnique({\n        where: { email: dto.email },\n      })\n      .catch(handleError);\n\n    if (user) {\n      throw new BadRequestException(\n        'Unable to create an admin with a user email',\n      );\n    }\n    delete dto.confirmPassword;\n\n    const data: Prisma.AdminCreateInput = {\n      ...dto,\n      password: await bcrypt.hash(dto.password, 10),\n      userCategory: {\n        connect: {\n          name: 'admin',\n        },\n      },\n    };\n\n    return await this.prisma.admin\n      .create({ data, select: this.adminSelect })\n      .catch(handleError);\n  }\n\n  async findAll() {\n    return await this.prisma.admin\n      .findMany({ select: this.adminSelect })\n      .catch(handleError);\n  }\n\n  async findOne(id: string) {\n    return await this.findById(id);\n  }\n\n  async update(id: string, dto: UpdateAdminDto) {\n    if (dto.password) {\n      verifyConfirmPassword(dto.password, dto.confirmPassword);\n    }\n    delete dto.confirmPassword;\n\n    const data: Partial = { ...dto };\n\n    if (data.password) {\n      data.password = await bcrypt.hash(dto.password, 10);\n    }\n\n    return await this.prisma.admin\n      .update({\n        where: { id },\n        data,\n        select: this.adminSelect,\n      })\n      .catch(handleError);\n  }\n\n  async delete(id: string) {\n    await this.findById(id);\n    const manager = await this.prisma.admin.findUnique({\n      where: { id },\n    });\n\n    if (manager.userCategoryName === 'manager') {\n      throw new BadRequestException('Manager cannot be deleted');\n    }\n    \n    await this.prisma.admin.delete({ where: { id } }).catch(handleError);\n  }\n\n  async findById(id: string) {\n    const admin = await this.prisma.admin\n      .findUnique({ where: { id }, select: this.adminSelect })\n      .catch(handleError);\n\n    if (!admin) {\n      throw new NotFoundException(`Record with ID '${id}' not found`);\n    }\n    return admin;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Album.html":{"url":"classes/Album.html","title":"class - Album","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Album\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/entities/album.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                artistId\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        artistId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Album {\n  id?: string;\n  name: string;\n  year: number;\n  image: string;\n  artistId: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AlbumController.html":{"url":"controllers/AlbumController.html","title":"controller - AlbumController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AlbumController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/album.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                album\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(artist: Artist, dto: CreateAlbumDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create an album and associate it with the artist who created it - (ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateAlbumDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(artist: Artist, albumId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:albumID')@ApiOperation({summary: 'Delete an album of the artist who is logged in - (ARTIST)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(albumId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':albumID')@ApiOperation({summary: 'Search for an album by the artist who is logged in - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(artist: Artist, albumId: string, dto: UpdateAlbumDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update/:albumID')@ApiOperation({summary: 'Edit an album of the artist who is logged - (ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/album/album.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateAlbumDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Artist } from 'src/artist/entities/artist.entity';\nimport { LoggedArtist } from 'src/auth/logged-artist.decorator';\nimport { AlbumService } from './album.service';\nimport { CreateAlbumDto } from './dto/create-album.dto';\nimport { UpdateAlbumDto } from './dto/update-album.dto';\n\n@ApiTags('album')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('album')\nexport class AlbumController {\n  constructor(private readonly albumService: AlbumService) {}\n\n  @Post('create')\n  @ApiOperation({\n    summary:\n      'Create an album and associate it with the artist who created it - (ARTIST)',\n  })\n  create(@LoggedArtist() artist: Artist, @Body() dto: CreateAlbumDto) {\n    return this.albumService.create(artist.id, dto);\n  }\n\n  @Get(':albumID')\n  @ApiOperation({\n    summary: 'Search for an album by the artist who is logged in - (OPEN)',\n  })\n  findOne(@Param('albumID') albumId: string) {\n    return this.albumService.findOne(albumId);\n  }\n\n  @Patch('update/:albumID')\n  @ApiOperation({\n    summary: 'Edit an album of the artist who is logged - (ARTIST)',\n  })\n  update(\n    @LoggedArtist() artist: Artist,\n    @Param('albumID') albumId: string,\n    @Body() dto: UpdateAlbumDto,\n  ) {\n    return this.albumService.update(artist.id, albumId, dto);\n  }\n\n  @Delete('delete/:albumID')\n  @ApiOperation({\n    summary: 'Delete an album of the artist who is logged in - (ARTIST)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(@LoggedArtist() artist: Artist, @Param('albumID') albumId: string) {\n    return this.albumService.delete(artist.id, albumId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AlbumModule.html":{"url":"modules/AlbumModule.html","title":"module - AlbumModule","body":"\n                   \n\n\n\n\n    Modules\n    AlbumModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AlbumModule\n\n\n\ncluster_AlbumModule_providers\n\n\n\ncluster_AlbumModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAlbumModule\n\nAlbumModule\n\nAlbumModule -->\n\nPrismaModule->AlbumModule\n\n\n\n\n\nAlbumService\n\nAlbumService\n\nAlbumModule -->\n\nAlbumService->AlbumModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/album/album.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AlbumService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AlbumController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AlbumService } from './album.service';\nimport { AlbumController } from './album.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [AlbumController],\n  providers: [AlbumService],\n})\nexport class AlbumModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AlbumService.html":{"url":"injectables/AlbumService.html","title":"injectable - AlbumService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AlbumService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/album.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                albumSelect\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneAlbumInArtist\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                verifyYearAlbum\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/album/album.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(artistId: string, dto: CreateAlbumDto)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateAlbumDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(artistId: string, albumId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(albumId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneAlbumInArtist\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneAlbumInArtist(artistId: string, albumId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(artistId: string, albumId: string, dto: UpdateAlbumDto)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateAlbumDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyYearAlbum\n                        \n                    \n                \n            \n            \n                \nverifyYearAlbum(year: Number)\n                \n            \n\n\n            \n                \n                    Defined in src/album/album.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    year\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        albumSelect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: true,\n    name: true,\n    image: true,\n    year: true,\n    artist: {\n      select: {\n        id: true,\n        name: true,\n      },\n    },\n    songs: {\n      select: {\n        id: true,\n        name: true,\n        songUrl: true,\n      },\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/album/album.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateAlbumDto } from './dto/create-album.dto';\nimport { UpdateAlbumDto } from './dto/update-album.dto';\n\n@Injectable()\nexport class AlbumService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  private albumSelect = {\n    id: true,\n    name: true,\n    image: true,\n    year: true,\n    artist: {\n      select: {\n        id: true,\n        name: true,\n      },\n    },\n    songs: {\n      select: {\n        id: true,\n        name: true,\n        songUrl: true,\n      },\n    },\n  };\n\n  async create(artistId: string, dto: CreateAlbumDto) {\n    this.verifyYearAlbum(dto.year);\n    const data: Prisma.AlbumCreateInput = {\n      ...dto,\n      artist: {\n        connect: {\n          id: artistId,\n        },\n      },\n    };\n\n    return await this.prisma.album\n      .create({\n        data,\n        select: this.albumSelect,\n      })\n      .catch(handleError);\n  }\n\n  async findOne(albumId: string) {\n    const record = await this.prisma.album\n      .findUnique({\n        where: { id: albumId },\n        select: this.albumSelect,\n      })\n      .catch(handleError);\n\n    if (!record) {\n      throw new NotFoundException(`Album with ID '${albumId}' not found`);\n    }\n    return record;\n  }\n\n  async update(artistId: string, albumId: string, dto: UpdateAlbumDto) {\n    await this.findOneAlbumInArtist(artistId, albumId);\n    this.verifyYearAlbum(dto.year);\n    return await this.prisma.album\n      .update({\n        where: { id: albumId },\n        data: { ...dto },\n        select: this.albumSelect,\n      })\n      .catch(handleError);\n  }\n\n  async delete(artistId: string, albumId: string) {\n    await this.findOneAlbumInArtist(artistId, albumId);\n    return await this.prisma.album\n      .delete({ where: { id: albumId } })\n      .catch(handleError);\n  }\n\n  async findOneAlbumInArtist(artistId: string, albumId: string) {\n    const albumInArtist = await this.prisma.artist\n      .findUnique({\n        where: { id: artistId },\n        select: {\n          albums: {\n            where: {\n              id: albumId,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (albumInArtist.albums.length === 0) {\n      throw new NotFoundException(`Album with ID '${albumId}' not found`);\n    }\n  }\n\n  verifyYearAlbum(year: Number) {\n    if (year  2022) {\n      throw new BadRequestException(\n        'The cannot be less than 1900 or greater than 2022',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /status\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAppStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAppStatus\n                        \n                    \n                \n            \n            \n                \ngetAppStatus(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'View aplication status'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { AppService } from './app.service';\n\n@ApiTags('status')\n@Controller('/status')\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  @ApiOperation({\n    summary: 'View aplication status',\n  })\n  getAppStatus(@Req() req: Request) {\n    const baseUrl = req.protocol + '://' + req.get('host');\n    return this.appService.getAppStatus(baseUrl);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAlbumModule\n\nAlbumModule\n\nAppModule -->\n\nAlbumModule->AppModule\n\n\n\n\n\nArtistModule\n\nArtistModule\n\nAppModule -->\n\nArtistModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCountryModule\n\nCountryModule\n\nAppModule -->\n\nCountryModule->AppModule\n\n\n\n\n\nHomePageModule\n\nHomePageModule\n\nAppModule -->\n\nHomePageModule->AppModule\n\n\n\n\n\nPlaylistModule\n\nPlaylistModule\n\nAppModule -->\n\nPlaylistModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProfileFavoriteSongModule\n\nProfileFavoriteSongModule\n\nAppModule -->\n\nProfileFavoriteSongModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nSongModule\n\nSongModule\n\nAppModule -->\n\nSongModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserPlanModule\n\nUserPlanModule\n\nAppModule -->\n\nUserPlanModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AlbumModule\n                        \n                        \n                            ArtistModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            CountryModule\n                        \n                        \n                            HomePageModule\n                        \n                        \n                            PlaylistModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProfileFavoriteSongModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            SongModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserPlanModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminModule } from './admin/admin.module';\nimport { AlbumModule } from './album/album.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ArtistModule } from './artist/artist.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CategoryModule } from './category/category.module';\nimport { CountryModule } from './country/country.module';\nimport { PlaylistModule } from './playlist/playlist.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ProfileFavoriteSongModule } from './profile-favorite-song/profile-favorite-song.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { SongModule } from './song/song.module';\nimport { UserPlanModule } from './user-plan/user-plan.module';\nimport { UserModule } from './user/user.module';\nimport { HomePageModule } from './home-page/home-page.module';\n\n@Module({\n  imports: [\n    PrismaModule,\n    AuthModule,\n    UserModule,\n    AdminModule,\n    UserPlanModule,\n    ProfileModule,\n    ArtistModule,\n    CountryModule,\n    AlbumModule,\n    SongModule,\n    ProfileFavoriteSongModule,\n    CategoryModule,\n    PlaylistModule,\n    HomePageModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAppStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAppStatus\n                        \n                    \n                \n            \n            \n                \ngetAppStatus(baseUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    baseUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; docs: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getAppStatus(baseUrl: string) {\n    return {\n      status: 'Spotify Server is running! 🚀🔊🎵🎧',\n      docs: baseUrl + '/api',\n    };\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Artist.html":{"url":"classes/Artist.html","title":"class - Artist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Artist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/entities/artist.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                about\n                            \n                            \n                                countryId\n                            \n                            \n                                cpf\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                userCategoryName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        about\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userCategoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Artist {\n  id?: string\n  name: string\n  image: string\n  cpf: string\n  email: string\n  password: string\n  about: string\n  userCategoryName: string\n  countryId: string\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArtistController.html":{"url":"controllers/ArtistController.html","title":"controller - ArtistController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArtistController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/artist.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                artist\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                deleteArtist\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                findOneByArtist\n                            \n                            \n                                homePage\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateArtistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiOperation({summary: 'Create a new artist'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateArtistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(artist: Artist)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete')@UseGuards(undefined)@ApiBearerAuth()@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove artist logged - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteArtist\n                        \n                    \n                \n            \n            \n                \ndeleteArtist(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:artistID')@UseGuards(undefined)@ApiBearerAuth()@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove a artist by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'List all artists - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:artistID')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Fetch a artist by Id - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByArtist\n                        \n                    \n                \n            \n            \n                \nfindOneByArtist(artistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:artistID/discography')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'View all songs by an artist - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        homePage\n                        \n                    \n                \n            \n            \n                \nhomePage(artist: Artist)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/home')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Fetch all data of the artist who is logged in - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(artist: Artist, dto: UpdateArtistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Edit artist logged - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/artist/artist.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateArtistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { LoggedArtist } from 'src/auth/logged-artist.decorator';\nimport { ArtistService } from './artist.service';\nimport { CreateArtistDto } from './dto/create-artist.dto';\nimport { UpdateArtistDto } from './dto/update-artist.dto';\nimport { Artist } from './entities/artist.entity';\n\n@ApiTags('artist')\n@Controller('artist')\nexport class ArtistController {\n  constructor(private readonly artistService: ArtistService) {}\n\n  @Post('/create')\n  @ApiOperation({\n    summary: 'Create a new artist',\n  })\n  create(@Body() dto: CreateArtistDto) {\n    return this.artistService.create(dto);\n  }\n\n  @Get('/home')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Fetch all data of the artist who is logged in - (ONLY ARTIST)',\n  })\n  homePage(@LoggedArtist() artist: Artist) {\n    return this.artistService.homePage(artist.id);\n  }\n\n  @Get('/all')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'List all artists - (OPEN)',\n  })\n  findAll() {\n    return this.artistService.findAll();\n  }\n\n  @Get('/:artistID')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Fetch a artist by Id - (OPEN)',\n  })\n  findOne(@Param('artistID') id: string) {\n    return this.artistService.findOne(id);\n  }\n\n  @Get('/:artistID/discography')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'View all songs by an artist - (OPEN)',\n  })\n  findOneByArtist(@Param('artistID') artistId: string) {\n    return this.artistService.findOneByArtist(artistId);\n  }\n\n  @Patch('/update')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Edit artist logged - (ONLY ARTIST)',\n  })\n  update(@LoggedArtist() artist: Artist, @Body() dto: UpdateArtistDto) {\n    return this.artistService.update(artist.id, dto);\n  }\n\n  @Delete('/delete')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove artist logged - (ONLY ARTIST)',\n  })\n  delete(@LoggedArtist() artist: Artist) {\n    return this.artistService.delete(artist.id);\n  }\n\n  @Delete('/delete/:artistID')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove a artist by Id - (ONLY ADMIN)',\n  })\n  deleteArtist(@LoggedAdmin() admin: Admin, @Param('artistID') id: string) {\n    return this.artistService.deleteArtist(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArtistModule.html":{"url":"modules/ArtistModule.html","title":"module - ArtistModule","body":"\n                   \n\n\n\n\n    Modules\n    ArtistModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ArtistModule\n\n\n\ncluster_ArtistModule_providers\n\n\n\ncluster_ArtistModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nArtistModule\n\nArtistModule\n\nArtistModule -->\n\nPrismaModule->ArtistModule\n\n\n\n\n\nArtistService\n\nArtistService\n\nArtistModule -->\n\nArtistService->ArtistModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/artist/artist.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArtistService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArtistController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ArtistService } from './artist.service';\nimport { ArtistController } from './artist.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [ArtistController],\n  providers: [ArtistService]\n})\nexport class ArtistModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArtistService.html":{"url":"injectables/ArtistService.html","title":"injectable - ArtistService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArtistService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/artist.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                artistSelect\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                deleteArtist\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneArtist\n                            \n                            \n                                    Async\n                                findOneByArtist\n                            \n                            \n                                    Async\n                                homePage\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                verifyCountryIdExist\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/artist/artist.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateArtistDto)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateArtistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:235\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArtist\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArtist(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:241\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneArtist\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneArtist(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:258\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByArtist\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByArtist(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        homePage\n                        \n                    \n                \n            \n            \n                \n                    \n                    homePage(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(artistId: string, dto: UpdateArtistDto)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateArtistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyCountryIdExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyCountryIdExist(countryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/artist/artist.service.ts:248\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    countryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        artistSelect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: true,\n    name: true,\n    image: true,\n    email: true,\n    userCategory: {\n      select: {\n        name: true,\n      },\n    },\n    countryRelacion: {\n      select: {\n        name: true,\n      },\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/artist/artist.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { verifyConfirmPassword } from 'src/utils/confirm-password.ultil';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateArtistDto } from './dto/create-artist.dto';\nimport { UpdateArtistDto } from './dto/update-artist.dto';\nimport { Artist } from './entities/artist.entity';\n\n@Injectable()\nexport class ArtistService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  private artistSelect = {\n    id: true,\n    name: true,\n    image: true,\n    email: true,\n    userCategory: {\n      select: {\n        name: true,\n      },\n    },\n    countryRelacion: {\n      select: {\n        name: true,\n      },\n    },\n  };\n\n  async create(dto: CreateArtistDto) {\n    verifyConfirmPassword(dto.password, dto.confirmPassword);\n    delete dto.confirmPassword;\n\n    await this.verifyCountryIdExist(dto.countryId);\n\n    const data: Prisma.ArtistCreateInput = {\n      name: dto.name,\n      image: dto.image,\n      cpf: dto.cpf,\n      email: dto.email,\n      password: await bcrypt.hash(dto.password, 10),\n      about: dto.about,\n      userCategory: {\n        connect: {\n          name: 'artist',\n        },\n      },\n      countryRelacion: {\n        connect: {\n          id: dto.countryId,\n        },\n      },\n    };\n    return await this.prisma.artist\n      .create({\n        data,\n        select: this.artistSelect,\n      })\n      .catch(handleError);\n  }\n\n  async homePage(artistId: string) {\n    const record = await this.prisma.artist\n      .findUnique({\n        where: { id: artistId },\n        select: {\n          songs: {\n            take: 5,\n            skip: 0,\n            select: {\n              id: true,\n              name: true,\n              songUrl: true,\n            },\n          },\n          albums: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (record.songs.length === 0 && record.albums.length === 0) {\n      throw new NotFoundException('No song or album found');\n    }\n\n    return record;\n  }\n\n  async findAll() {\n    const artists = await this.prisma.artist\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n          image: true,\n        },\n      })\n      .catch(handleError);\n\n    if (artists.length === 0) {\n      throw new NotFoundException('No a artists found');\n    }\n    return artists;\n  }\n\n  async findOne(id: string) {\n    const record = await this.prisma.artist\n      .findUnique({\n        where: { id },\n        select: {\n          id: true,\n          name: true,\n          image: true,\n          countryRelacion: {\n            select: {\n              name: true,\n            },\n          },\n          songs: {\n            take: 5,\n            skip: 0,\n            select: {\n              id: true,\n              name: true,\n              songUrl: true,\n            },\n          },\n          albums: {\n            take: 4,\n            skip: 0,\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n          about: true,\n        },\n      })\n      .catch(handleError);\n\n    if (!record) {\n      throw new NotFoundException(`Artist with Id '${id}' not found!`);\n    }\n\n    return record;\n  }\n\n  async findOneByArtist(artistId: string) {\n    const artistDiscography = await this.prisma.artist\n      .findUnique({\n        where: { id: artistId },\n        select: {\n          id: true,\n          name: true,\n          albums: {\n            select: {\n              _count: true,\n              id: true,\n              name: true,\n              image: true,\n              year: true,\n              songs: {\n                select: {\n                  id: true,\n                  name: true,\n                  songUrl: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (!artistDiscography) {\n      throw new NotFoundException(`Artist with ID '${artistId} not found'`);\n    }\n\n    if (artistDiscography.albums.length === 0) {\n      throw new NotFoundException('No song found');\n    }\n\n    return artistDiscography;\n  }\n\n  async update(artistId: string, dto: UpdateArtistDto) {\n    if (\n      !dto.name &&\n      !dto.image &&\n      !dto.about &&\n      !dto.confirmPassword &&\n      !dto.countryId &&\n      !dto.cpf &&\n      !dto.email &&\n      !dto.password\n    ) {\n      throw new BadRequestException('No fields were informed to update');\n    }\n    if (dto.password) {\n      verifyConfirmPassword(dto.password, dto.confirmPassword);\n    }\n    delete dto.confirmPassword;\n\n    await this.verifyCountryIdExist(dto.countryId);\n\n    await this.prisma.artist.findUnique({ where: { id: artistId } });\n\n    const data: Partial = { ...dto };\n\n    if (data.password) {\n      data.password = await bcrypt.hash(data.password, 10);\n    }\n\n    return await this.prisma.artist\n      .update({\n        where: { id: artistId },\n        data,\n        select: this.artistSelect,\n      })\n      .catch(handleError);\n  }\n\n  async delete(artistId: string) {\n    return await this.prisma.artist\n      .delete({ where: { id: artistId } })\n      .catch(handleError);\n  }\n\n  async deleteArtist(id: string) {\n    await this.findOneArtist(id);\n    return await this.prisma.artist\n      .delete({ where: { id } })\n      .catch(handleError);\n  }\n\n  async verifyCountryIdExist(countryId: string) {\n    const country = await this.prisma.country.findUnique({\n      where: { id: countryId },\n    });\n\n    if (!country) {\n      throw new NotFoundException(`Country with id ${countryId} not found`);\n    }\n  }\n\n  async findOneArtist(artistId: string) {\n    const artist = await this.prisma.artist.findUnique({\n      where: { id: artistId },\n    });\n\n    if (!artist) {\n      throw new NotFoundException(`Artist with ID '${artistId}' not found`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                Admin\n                            \n                            \n                                Artist\n                            \n                            \n                                LoginAdmin\n                            \n                            \n                                LoginArtist\n                            \n                            \n                                LoginProfile\n                            \n                            \n                                LoginUser\n                            \n                            \n                                User\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Admin\n                        \n                    \n                \n            \n            \n                \nAdmin(admin: Admin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/admin')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Return user authentication now - (FOR ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Admin\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Artist\n                        \n                    \n                \n            \n            \n                \nArtist(artist: Artist)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/artist')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Return user authentication now - (FOR ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Artist\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginAdmin\n                        \n                    \n                \n            \n            \n                \nLoginAdmin(loginAdminDto: LoginAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in-admin')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Log in, receiving a validation token - (FOR ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginAdminDto\n                                    \n                                                LoginAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginArtist\n                        \n                    \n                \n            \n            \n                \nLoginArtist(loginArtistDto: LoginArtistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in-artist')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Log in, receiving a validation token - (FOR ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginArtistDto\n                                    \n                                                LoginArtistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginProfile\n                        \n                    \n                \n            \n            \n                \nLoginProfile(user: UserProfileId, loginProfileDto: LoginProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in-profile')@HttpCode(HttpStatus.OK)@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Log in, receiving a validation token - (FOR PROFILE)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    loginProfileDto\n                                    \n                                                LoginProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginUser\n                        \n                    \n                \n            \n            \n                \nLoginUser(loginUserDto: LoginUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in-user')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Log in, receiving a validation token - (FOR USER)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserDto\n                                    \n                                                LoginUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n            \n                \nUser(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Return user authentication now - (FOR USER)'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { Artist } from 'src/artist/entities/artist.entity';\nimport { User } from 'src/user/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { UserProfileId } from './dto/logged-profile-type';\nimport { LoginAdminDto } from './dto/login-admin.dto';\nimport { LoginArtistDto } from './dto/login-artist.dto';\nimport { LoginProfileDto } from './dto/login-profile.dto';\nimport { LoginUserResponseDto } from './dto/login-user-response.dto';\nimport { LoginUserDto } from './dto/login-user.dto';\nimport { LoggedAdmin } from './logged-admin.decorator';\nimport { LoggedArtist } from './logged-artist.decorator';\nimport { LoggedUser } from './logged-user.decorator';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('/sign-in-user')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Log in, receiving a validation token - (FOR USER)',\n  })\n  LoginUser(@Body() loginUserDto: LoginUserDto): Promise {\n    return this.authService.LoginUser(loginUserDto);\n  }\n\n  @Post('/sign-in-profile')\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Log in, receiving a validation token - (FOR PROFILE)',\n  })\n  LoginProfile(\n    @LoggedUser() user: UserProfileId,\n    @Body() loginProfileDto: LoginProfileDto,\n  ) {\n    return this.authService.LoginProfile(user, loginProfileDto);\n  }\n\n  @Post('/sign-in-admin')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Log in, receiving a validation token - (FOR ADMIN)',\n  })\n  LoginAdmin(@Body() loginAdminDto: LoginAdminDto) {\n    return this.authService.LoginAdmin(loginAdminDto);\n  }\n\n  @Post('/sign-in-artist')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Log in, receiving a validation token - (FOR ARTIST)',\n  })\n  LoginArtist(@Body() loginArtistDto: LoginArtistDto) {\n    return this.authService.LoginArtist(loginArtistDto);\n  }\n\n  @Get('/user')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Return user authentication now - (FOR USER)',\n  })\n  User(@LoggedUser() user: User) {\n    return user;\n  }\n\n  @Get('/admin')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Return user authentication now - (FOR ADMIN)',\n  })\n  Admin(@LoggedAdmin() admin: Admin) {\n    return admin;\n  }\n\n  @Get('/artist')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Return user authentication now - (FOR ARTIST)',\n  })\n  Artist(@LoggedArtist() artist: Artist) {\n    return artist;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PrismaModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '24h' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                LoginAdmin\n                            \n                            \n                                    Async\n                                LoginArtist\n                            \n                            \n                                    Async\n                                LoginProfile\n                            \n                            \n                                    Async\n                                LoginUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LoginAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    LoginAdmin(loginAdminDto: LoginAdminDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginAdminDto\n                                    \n                                                LoginAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LoginArtist\n                        \n                    \n                \n            \n            \n                \n                    \n                    LoginArtist(loginArtistDto: LoginArtistDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginArtistDto\n                                    \n                                                LoginArtistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LoginProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    LoginProfile(user: UserProfileId, loginProfileDto: LoginProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    loginProfileDto\n                                    \n                                                LoginProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LoginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    LoginUser(loginUserDto: LoginUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserDto\n                                    \n                                                LoginUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { User } from 'src/user/entities/user.entity';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { UserProfileId } from './dto/logged-profile-type';\nimport { LoginAdminDto } from './dto/login-admin.dto';\nimport { LoginArtistDto } from './dto/login-artist.dto';\nimport { LoginProfileDto } from './dto/login-profile.dto';\nimport { LoginUserResponseDto } from './dto/login-user-response.dto';\nimport { LoginUserDto } from './dto/login-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly jwt: JwtService,\n  ) {}\n\n  async LoginUser(loginUserDto: LoginUserDto): Promise {\n    const { email, password } = loginUserDto;\n\n    const user = await this.prisma.user\n      .findUnique({ where: { email } })\n      .catch(handleError);\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    const isHashValid = await bcrypt.compare(password, user.password);\n\n    if (!isHashValid) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    delete user.password;\n\n    return {\n      token: this.jwt.sign({ email }),\n      user,\n    };\n  }\n\n  async LoginProfile(user: UserProfileId, loginProfileDto: LoginProfileDto) {\n    const email = user.user.email;\n    const profileId = loginProfileDto.profileId;\n\n    const profile = await this.prisma.user\n      .findUnique({\n        where: { email },\n        select: {\n          profiles: {\n            where: {\n              id: loginProfileDto.profileId,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (profile.profiles.length === 0) {\n      throw new UnauthorizedException('Profile or User not found');\n    }\n\n    return {\n      token: this.jwt.sign({ email, profileId }),\n    };\n  }\n\n  async LoginAdmin(loginAdminDto: LoginAdminDto ) {\n    const { email, password } = loginAdminDto;\n\n    const admin = await this.prisma.admin\n      .findUnique({\n        where: { email },\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          password: true,\n          userCategory: {\n            select: {\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (!admin) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    const isHashValid = await bcrypt.compare(password, admin.password);\n\n    if (!isHashValid) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    delete admin.password;\n\n    return {\n      token: this.jwt.sign({ email }),\n      admin,\n    };\n  }\n\n  async LoginArtist(loginArtistDto: LoginArtistDto) {\n    const { email, password } = loginArtistDto;\n\n    const artist = await this.prisma.artist\n      .findUnique({\n        where: { email },\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          password: true,\n          userCategory: {\n            select: {\n              name: true,\n            },\n          },\n          countryRelacion: {\n            select: {\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (!artist) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    const isHashValid = await bcrypt.compare(password, artist.password);\n\n    if (!isHashValid) {\n      throw new UnauthorizedException('Invalid email and/or password!');\n    }\n\n    delete artist.password;\n\n    return {\n      token: this.jwt.sign({ email }),\n      artist,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/entities/category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/category/entities/category.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/category/entities/category.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/category/entities/category.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/category/entities/category.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Category {\n  id?: string\n  name: string\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(admin: Admin, dto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a new Music Category - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(admin: Admin, categoryId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:categoryID')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Delete a Music Categorie by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')@ApiOperation({summary: 'List All Music Categories - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(categoryId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':categoryID')@ApiOperation({summary: 'List a Music Categorie by Id - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(admin: Admin, categoryId: string, dto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update/:categoryID')@ApiOperation({summary: 'Edit a Music Categorie by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@ApiTags('category')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('category')\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) {}\n\n  @Post('create')\n  @ApiOperation({\n    summary: 'Create a new Music Category - (ONLY ADMIN)',\n  })\n  create(@LoggedAdmin() admin: Admin, @Body() dto: CreateCategoryDto) {\n    return this.categoryService.create(dto);\n  }\n\n  @Get('all')\n  @ApiOperation({\n    summary: 'List All Music Categories - (OPEN)',\n  })\n  findAll() {\n    return this.categoryService.findAll();\n  }\n\n  @Get(':categoryID')\n  @ApiOperation({\n    summary: 'List a Music Categorie by Id - (ONLY USER)',\n  })\n  findOne(@Param('categoryID') categoryId: string) {\n    return this.categoryService.findOne(categoryId);\n  }\n\n  @Patch('update/:categoryID')\n  @ApiOperation({\n    summary: 'Edit a Music Categorie by Id - (ONLY ADMIN)',\n  })\n  update(\n    @LoggedAdmin() admin: Admin,\n    @Param('categoryID') categoryId: string,\n    @Body() dto: UpdateCategoryDto,\n  ) {\n    return this.categoryService.update(categoryId, dto);\n  }\n\n  @Delete('delete/:categoryID')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Delete a Music Categorie by Id - (ONLY ADMIN)',\n  })\n  delete(@LoggedAdmin() admin: Admin, @Param('categoryID') categoryId: string) {\n    return this.categoryService.delete(categoryId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [CategoryController],\n  providers: [CategoryService]\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(categoryId: string, dto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Injectable()\nexport class CategoryService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreateCategoryDto) {\n    const data: Prisma.CategoryCreateInput = {\n      ...dto,\n    };\n\n    return await this.prisma.category\n      .create({\n        data,\n      })\n      .catch(handleError);\n  }\n\n  async findAll() {\n    const allCategories = await this.prisma.category\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n        },\n      })\n      .catch(handleError);\n\n    if (allCategories.length === 0) {\n      throw new NotFoundException('No Music Category found');\n    }\n\n    return allCategories;\n  }\n\n  async findById(categoryId: string) {\n    const record = await this.prisma.category\n      .findUnique({\n        where: { id: categoryId },\n        select: {\n          id: true,\n          name: true,\n        },\n      })\n      .catch(handleError);\n\n    if (!record) {\n      throw new NotFoundException(\n        `Music Category with ID '${categoryId}' not found`,\n      );\n    }\n\n    return record;\n  }\n\n  async findOne(categoryId: string) {\n    return await this.findById(categoryId).catch(handleError);\n  }\n\n  async update(categoryId: string, dto: UpdateCategoryDto) {\n    await this.findById(categoryId);\n\n    const data: Prisma.CategoryUpdateInput = {\n      ...dto,\n    };\n\n    return this.prisma.category.update({\n      where: { id: categoryId },\n      data,\n      select: {\n        id: true,\n        name: true,\n        CategorySongs: {\n          select: {\n            song: {\n              select: {\n                id: true,\n                name: true,\n                songUrl: true,\n                artist: {\n                  select: {\n                    id: true,\n                    name: true,\n                  },\n                },\n                album: {\n                  select: {\n                    id: true,\n                    name: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  async delete(categoryId: string) {\n    await this.findById(categoryId);\n\n    return await this.prisma.category\n      .delete({\n        where: { id: categoryId },\n      })\n      .catch(handleError);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Country.html":{"url":"classes/Country.html","title":"class - Country","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Country\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/country/entities/country,entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/country/entities/country,entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/country/entities/country,entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/country/entities/country,entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/country/entities/country,entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/country/entities/country,entity.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Country {\n  id?: string;\n  name: string;\n  code: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountryController.html":{"url":"controllers/CountryController.html","title":"controller - CountryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/country/country,controller.ts\n        \n\n            \n                Prefix\n            \n            \n                country\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(admin: Admin, dto: CreateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Create a new country - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/country/country,controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:countryID')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Delete a country by id - (ONLY ADMIN)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/country/country,controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')@ApiOperation({summary: 'Search all countries - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/country/country,controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:countryID')@ApiOperation({summary: 'Search for a country by id - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/country/country,controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(admin: Admin, id: string, dto: UpdateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update/:countryID')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Edit a country by id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/country/country,controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { CountryService } from './country.service';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\n\n@ApiTags('country')\n@Controller('country')\nexport class CountryController {\n  constructor(private readonly countryService: CountryService) {}\n\n  @Post('/create')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Create a new country - (ONLY ADMIN)',\n  })\n  create(@LoggedAdmin() admin: Admin, @Body() dto: CreateCountryDto) {\n    return this.countryService.create(dto);\n  }\n\n  @Get('/all')\n  @ApiOperation({\n    summary: 'Search all countries - (OPEN)',\n  })\n  findAll() {\n    return this.countryService.findAll();\n  }\n\n  @Get('/:countryID')\n  @ApiOperation({\n    summary: 'Search for a country by id - (OPEN)',\n  })\n  findOne(@Param('countryID') id: string) {\n    return this.countryService.findOne(id);\n  }\n\n  @Patch('/update/:countryID')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Edit a country by id - (ONLY ADMIN)',\n  })\n  update(\n    @LoggedAdmin() admin: Admin,\n    @Param('countryID') id: string,\n    @Body() dto: UpdateCountryDto,\n  ) {\n    return this.countryService.update(id, dto);\n  }\n\n  @Delete('/delete/:countryID')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Delete a country by id - (ONLY ADMIN)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(@LoggedAdmin() admin: Admin, @Param('countryID') id: string) {\n    return this.countryService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountryModule.html":{"url":"modules/CountryModule.html","title":"module - CountryModule","body":"\n                   \n\n\n\n\n    Modules\n    CountryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CountryModule\n\n\n\ncluster_CountryModule_imports\n\n\n\ncluster_CountryModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCountryModule\n\nCountryModule\n\nCountryModule -->\n\nPrismaModule->CountryModule\n\n\n\n\n\nCountryService\n\nCountryService\n\nCountryModule -->\n\nCountryService->CountryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/country/country.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { CountryController } from './country,controller';\nimport { CountryService } from './country.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [CountryController],\n  providers: [CountryService],\n})\nexport class CountryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountryService.html":{"url":"injectables/CountryService.html","title":"injectable - CountryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/country/country.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/country/country.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateCountryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, dto: UpdateCountryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/country/country.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\nimport { Country } from './entities/country,entity';\n\n@Injectable()\nexport class CountryService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreateCountryDto) {\n    const data: Country = { ...dto };\n\n    return await this.prisma.country\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          code: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll() {\n    const allCountries = await this.prisma.country\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n        },\n      })\n      .catch(handleError);\n\n    if (allCountries.length === 0) {\n      throw new NotFoundException('No country found');\n    }\n\n    return allCountries;\n  }\n\n  async findOne(id: string) {\n    return this.findById(id);\n  }\n\n  async update(id: string, dto: UpdateCountryDto) {\n    await this.findById(id);\n    const data: Partial = { ...dto };\n\n    return this.prisma.country\n      .update({\n        where: { id },\n        data,\n        select: {\n          id: true,\n          name: true,\n          code: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async delete(id: string) {\n    await this.findById(id);\n    await this.prisma.country.delete({ where: { id } }).catch(handleError);\n  }\n\n  async findById(id: string) {\n    const country: Country = await this.prisma.country.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        name: true,\n        code: true,\n      },\n    });\n\n    if (!country) {\n      throw new NotFoundException(`Country with ID '${id}' not found`);\n    }\n\n    return country;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminDto.html":{"url":"classes/CreateAdminDto.html","title":"class - CreateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/create-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                cpf\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Confirmação da senha do Admin', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(11, 14)@ApiProperty({description: 'CPF do Admin', example: '123.123.123-12'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@Length(5, 50)@ApiProperty({description: 'The email of the user.', example: 'admin@admin.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(3, 50)@ApiProperty({description: 'Nome do Admin', example: 'Maria Silva'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(8, 50)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Senha muito fraca'})@ApiProperty({description: 'Senha do Admin', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/create-admin.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  Matches\n} from 'class-validator';\n\nexport class CreateAdminDto {\n  @IsString()\n  @Length(3, 50)\n  @ApiProperty({\n    description: 'Nome do Admin',\n    example: 'Maria Silva',\n  })\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(11, 14)\n  @ApiProperty({\n    description: 'CPF do Admin',\n    example: '123.123.123-12',\n  })\n  cpf: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @Length(5, 50)\n  @ApiProperty({\n    description: 'The email of the user.',\n    example: 'admin@admin.com',\n  })\n  email: string;\n\n  @IsString()\n  @Length(8, 50)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Senha muito fraca',\n  })\n  @ApiProperty({\n    description: 'Senha do Admin',\n    example: 'User#5678@!',\n  })\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Confirmação da senha do Admin',\n    example: 'User#5678@!',\n  })\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAlbumDto.html":{"url":"classes/CreateAlbumDto.html","title":"class - CreateAlbumDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAlbumDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/dto/create-album.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUrl()@Length(5, 300)@ApiProperty({description: 'Image Url of Album', example: 'https://image-album.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@Length(1, 40)@ApiProperty({description: 'Name of Album', example: 'Use Yoru Illusion I'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@ApiProperty({description: 'Album release year', example: 1991})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber, IsString, IsUrl, Length } from 'class-validator';\n\nexport class CreateAlbumDto {\n  @IsNotEmpty()\n  @IsString()\n  @Length(1, 40)\n  @ApiProperty({\n    description: 'Name of Album',\n    example: 'Use Yoru Illusion I',\n  })\n  name: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @ApiProperty({\n    description: 'Album release year',\n    example: 1991,\n  })\n  year: number;\n\n  @IsNotEmpty()\n  @IsUrl()\n  @Length(5, 300)\n  @ApiProperty({\n    description: 'Image Url of Album',\n    example: 'https://image-album.jpg',\n  })\n  image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArtistDto.html":{"url":"classes/CreateArtistDto.html","title":"class - CreateArtistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArtistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/dto/create-artist.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                about\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                countryId\n                            \n                            \n                                cpf\n                            \n                            \n                                email\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        about\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(10, 300)@ApiProperty({description: 'The about of the artist.', example: 'Guns N' Roses is an American hard rock band formed in Los Angeles, California in 1985. The band has released six studio albums, three EPs and one live album to date. The band sold over 100 million copies worldwide, with around 43 million in the United States alone.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Artist password confirmation', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()@ApiProperty({description: 'The country of the artist.', example: 'ac06f36e-4b61-4fe8-8fd6-6ad807ac6282'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(11, 14)@ApiProperty({description: 'The cpf of the artist.', example: '321.654.987-01'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Length(5, 50)@ApiProperty({description: 'The email of the artist.', example: 'artist@artist.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@Length(1, 300)@ApiProperty({description: 'The image of the artist.', example: 'https://i.scdn.co/image/ab6761610000e5eb50defaf9fc059a1efc541f4c'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(1, 50)@ApiProperty({description: 'The name of the artist.', example: 'Guns N' Roses'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(8, 50)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})@ApiProperty({description: 'The password of the artist.', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:54\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  IsUrl,\n  IsUUID,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class CreateArtistDto {\n  @IsString()\n  @Length(1, 50)\n  @ApiProperty({\n    description: 'The name of the artist.',\n    example: \"Guns N' Roses\",\n  })\n  name: string;\n\n  @IsUrl()\n  @Length(1, 300)\n  @ApiProperty({\n    description: 'The image of the artist.',\n    example: 'https://i.scdn.co/image/ab6761610000e5eb50defaf9fc059a1efc541f4c',\n  })\n  image: string;\n\n  @IsString()\n  @Length(11, 14)\n  @ApiProperty({\n    description: 'The cpf of the artist.',\n    example: '321.654.987-01',\n  })\n  cpf: string;\n\n  @IsEmail()\n  @Length(5, 50)\n  @ApiProperty({\n    description: 'The email of the artist.',\n    example: 'artist@artist.com',\n  })\n  email: string;\n\n  @IsString()\n  @Length(8, 50)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password too weak',\n  })\n  @ApiProperty({\n    description: 'The password of the artist.',\n    example: 'User#5678@!',\n  })\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Artist password confirmation',\n    example: 'User#5678@!',\n  })\n  confirmPassword: string;\n\n  @IsString()\n  @Length(10, 300)\n  @ApiProperty({\n    description: 'The about of the artist.',\n    example:\n      \"Guns N' Roses is an American hard rock band formed in Los Angeles, California in 1985. The band has released six studio albums, three EPs and one live album to date. The band sold over 100 million copies worldwide, with around 43 million in the United States alone.\",\n  })\n  about: string;\n\n  @IsUUID()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The country of the artist.',\n    example: 'ac06f36e-4b61-4fe8-8fd6-6ad807ac6282',\n  })\n  countryId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(50)@ApiProperty({description: 'Music category name', example: 'Rock'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/dto/create-category.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Length } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @Length(50)\n  @ApiProperty({\n    description: 'Music category name',\n    example: 'Rock',\n  })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCountryDto.html":{"url":"classes/CreateCountryDto.html","title":"class - CreateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/country/dto/create-country.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(2, 2)@ApiProperty({description: 'Country Code', example: 'US'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/country/dto/create-country.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Country Name', example: 'United States'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/country/dto/create-country.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Length } from 'class-validator';\n\nexport class CreateCountryDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Country Name',\n    example: 'United States',\n  })\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(2, 2)\n  @ApiProperty({\n    description: 'Country Code',\n    example: 'US',\n  })\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePlaylistDto.html":{"url":"classes/CreatePlaylistDto.html","title":"class - CreatePlaylistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePlaylistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/dto/create-playlist.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                private\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@Length(1, 50)@ApiProperty({description: 'Playlist picture URL', example: 'https://playlistimage.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/playlist/dto/create-playlist.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(1, 50)@ApiProperty({description: 'Playlist Name', example: 'Party'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/playlist/dto/create-playlist.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({description: 'Set whether the playlist will be open to everyone or not', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/playlist/dto/create-playlist.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsString, IsUrl, Length } from 'class-validator';\n\nexport class CreatePlaylistDto {\n  @IsString()\n  @Length(1, 50)\n  @ApiProperty({\n    description: 'Playlist Name',\n    example: 'Party',\n  })\n  name: string;\n\n  @IsUrl()\n  @Length(1, 50)\n  @ApiProperty({\n    description: 'Playlist picture URL',\n    example: 'https://playlistimage.jpg',\n  })\n  image: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    description: 'Set whether the playlist will be open to everyone or not',\n    example: false,\n  })\n  private: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProfileDto.html":{"url":"classes/CreateProfileDto.html","title":"class - CreateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/dto/create-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                image\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUrl()@Length(5, 300)@ApiProperty({description: 'Profile picture URL', example: 'https://profileimage.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@Length(1, 20)@ApiProperty({description: 'Profile Name', example: 'Barack Obama'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, IsUrl, Length } from 'class-validator';\n\nexport class CreateProfileDto {\n  @IsNotEmpty()\n  @IsString()\n  @Length(1, 20)\n  @ApiProperty({\n    description: 'Profile Name',\n    example: 'Barack Obama',\n  })\n  name: string;\n\n  @IsNotEmpty()\n  @IsUrl()\n  @Length(5, 300)\n  @ApiProperty({\n    description: 'Profile picture URL',\n    example: 'https://profileimage.jpg',\n  })\n  image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProfileFavoriteSongDto.html":{"url":"classes/CreateProfileFavoriteSongDto.html","title":"class - CreateProfileFavoriteSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProfileFavoriteSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile-favorite-song/dto/create-profile-favorite-song.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                songID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        songID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'Id of the song to be favorited', example: '5ec96e39-7a1a-4202-b593-c6df1b67f0eb'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile-favorite-song/dto/create-profile-favorite-song.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID } from 'class-validator';\n\nexport class CreateProfileFavoriteSongDto {\n  @IsUUID()\n  @ApiProperty({\n    description: 'Id of the song to be favorited',\n    example: '5ec96e39-7a1a-4202-b593-c6df1b67f0eb',\n  })\n  songID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSongDto.html":{"url":"classes/CreateSongDto.html","title":"class - CreateSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/song/dto/create-song.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                albumId\n                            \n                            \n                                categoryId\n                            \n                            \n                                name\n                            \n                            \n                                songUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        albumId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'The album of the song.', example: '0eee08d7-8a4b-4751-bdfe-1f0bd61a6987'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/create-song.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID(undefined, {each: true})@ApiProperty({description: 'Category id to create the relationship with song', example: '[\"76b73966-928c-407e-8c35-ba327f4d200c\", \"0eee08d7-8a4b-4751-bdfe-1f0bd61a6987\"]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/create-song.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(1, 50)@ApiProperty({description: 'The name of the song.', example: 'Right Next Door to Hell'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/create-song.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        songUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@MaxLength(2000)@ApiProperty({description: 'The url of the song.', example: 'https://youtu.be/Zqo7j2yFoFs'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/create-song.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUrl, IsUUID, Length, MaxLength } from 'class-validator';\n\nexport class CreateSongDto {\n  @IsString()\n  @Length(1, 50)\n  @ApiProperty({\n    description: 'The name of the song.',\n    example: 'Right Next Door to Hell',\n  })\n  name: string;\n\n  @IsUrl()\n  @MaxLength(2000)\n  @ApiProperty({\n    description: 'The url of the song.',\n    example: 'https://youtu.be/Zqo7j2yFoFs',\n  })\n  songUrl: string;\n\n  @IsUUID()\n  @ApiProperty({\n    description: 'The album of the song.',\n    example: '0eee08d7-8a4b-4751-bdfe-1f0bd61a6987',\n  })\n  albumId: string;\n\n  @IsUUID(undefined, { each: true })\n  @ApiProperty({\n    description: 'Category id to create the relationship with song',\n    example:\n      '[\"76b73966-928c-407e-8c35-ba327f4d200c\", \"0eee08d7-8a4b-4751-bdfe-1f0bd61a6987\"]',\n  })\n  categoryId: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                cpf\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                userPlanId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'User password confirmation', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(11, 14)@ApiProperty({description: 'The cpf of the user', example: '123.456.789-10'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@Length(5, 50)@ApiProperty({description: 'The email of the user.', example: 'user@user.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(3, 50)@ApiProperty({description: 'The name of the user.', example: 'Gustavo Martins'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(8, 50)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})@ApiProperty({description: 'The password of the user.', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userPlanId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'Id of any of the plans available on the platform', example: '11f38851-afc7-41ae-b2d7-11781579099a'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:64\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  IsUUID,\n  Length,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 50)\n  @ApiProperty({\n    description: 'The name of the user.',\n    example: 'Gustavo Martins',\n  })\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(11, 14)\n  @ApiProperty({\n    description: 'The cpf of the user',\n    example: '123.456.789-10',\n  })\n  cpf: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @Length(5, 50)\n  @ApiProperty({\n    description: 'The email of the user.',\n    example: 'user@user.com',\n  })\n  email: string;\n\n  @IsString()\n  @Length(8, 50)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password too weak',\n  })\n  @ApiProperty({\n    description: 'The password of the user.',\n    example: 'User#5678@!',\n  })\n  password: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'User password confirmation',\n    example: 'User#5678@!',\n  })\n  confirmPassword: string;\n\n  @IsUUID()\n  @ApiProperty({\n    description: 'Id of any of the plans available on the platform',\n    example: '11f38851-afc7-41ae-b2d7-11781579099a',\n  })\n  userPlanId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserPlanDto.html":{"url":"classes/CreateUserPlanDto.html","title":"class - CreateUserPlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserPlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-plan/dto/create-user-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accounts\n                            \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(1)@IsNotEmpty()@ApiProperty({description: 'Number of profiles the user can have.', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-plan/dto/create-user-plan.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(10, 500)@ApiProperty({description: 'The description of the User Plan.', example: 'The free plan brings the entire catalog of songs and podcasts from the platform, but has some restrictions. The most notable is the presence of ads between tracks. In addition, it is not possible to download content for offline playback and, in the mobile version, there is only the possibility to choose the music played from selected playlists.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-plan/dto/create-user-plan.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(2, 30)@ApiProperty({description: 'The name of the User Plan.', example: 'Free'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-plan/dto/create-user-plan.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({maxDecimalPlaces: 2})@Min(0)@IsNotEmpty()@ApiProperty({description: 'The price of the User Plan.', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-plan/dto/create-user-plan.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber, IsString, Length, Min } from 'class-validator';\n\nexport class CreateUserPlanDto {\n  @IsString()\n  @Length(2, 30)\n  @ApiProperty({\n    description: 'The name of the User Plan.',\n    example: 'Free',\n  })\n  name: string;\n\n  @IsNumber({ maxDecimalPlaces: 2 })\n  @Min(0)\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The price of the User Plan.',\n    example: 0.0,\n  })\n  price: number;\n\n  @IsNumber()\n  @Min(1)\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Number of profiles the user can have.',\n    example: 1,\n  })\n  accounts: number;\n\n  @IsString()\n  @Length(10, 500)\n  @ApiProperty({\n    description: 'The description of the User Plan.',\n    example:\n      'The free plan brings the entire catalog of songs and podcasts from the platform, but has some restrictions. The most notable is the presence of ads between tracks. In addition, it is not possible to download content for offline playback and, in the mobile version, there is only the possibility to choose the music played from selected playlists.',\n  })\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomePageController.html":{"url":"controllers/HomePageController.html","title":"controller - HomePageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomePageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/home-page/home-page.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                homePage\n                            \n                            \n                                searchPlaylistSongAlbumArtist\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        homePage\n                        \n                    \n                \n            \n            \n                \nhomePage(userProfile: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: Returns the user's profile home page, with its playlists and platform playlists, in addition to the music categories})\n                \n            \n\n            \n                \n                    Defined in src/home-page/home-page.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfile\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchPlaylistSongAlbumArtist\n                        \n                    \n                \n            \n            \n                \nsearchPlaylistSongAlbumArtist(dto: SearchDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/search')@ApiOperation({summary: Search playlists, albums, songs and artists whose name starts with what you're looking for})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/home-page/home-page.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SearchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { UserProfileId } from 'src/auth/dto/logged-profile-type';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { SearchDto } from './dto/search.dto';\nimport { HomePageService } from './home-page.service';\n\n@ApiTags('home-page')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('/')\nexport class HomePageController {\n  constructor(private readonly homePageService: HomePageService) {}\n\n  @Get()\n  @ApiOperation({\n    summary: `Returns the user's profile home page, with its playlists and platform playlists, in addition to the music categories`,\n  })\n  homePage(@LoggedUser() userProfile: UserProfileId) {\n    return this.homePageService.homePage(\n      userProfile.user.id,\n      userProfile.profileId,\n    );\n  }\n\n  @Post('/search')\n  @ApiOperation({\n    summary: `Search playlists, albums, songs and artists whose name starts with what you're looking for`,\n  })\n  @HttpCode(HttpStatus.OK)\n  searchPlaylistSongAlbumArtist(@Body() dto: SearchDto) {\n    return this.homePageService.searchPlaylistSongAlbumArtist(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomePageModule.html":{"url":"modules/HomePageModule.html","title":"module - HomePageModule","body":"\n                   \n\n\n\n\n    Modules\n    HomePageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_imports\n\n\n\ncluster_HomePageModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nPrismaModule->HomePageModule\n\n\n\n\n\nHomePageService\n\nHomePageService\n\nHomePageModule -->\n\nHomePageService->HomePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/home-page/home-page.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HomePageService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HomePageController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HomePageService } from './home-page.service';\nimport { HomePageController } from './home-page.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [HomePageController],\n  providers: [HomePageService],\n})\nexport class HomePageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HomePageService.html":{"url":"injectables/HomePageService.html","title":"injectable - HomePageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HomePageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/home-page/home-page.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOneProfileInUser\n                            \n                            \n                                    Async\n                                homePage\n                            \n                            \n                                    Async\n                                searchPlaylistSongAlbumArtist\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/home-page/home-page.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneProfileInUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneProfileInUser(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/home-page/home-page.service.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        homePage\n                        \n                    \n                \n            \n            \n                \n                    \n                    homePage(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/home-page/home-page.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchPlaylistSongAlbumArtist\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchPlaylistSongAlbumArtist(dto: SearchDto)\n                \n            \n\n\n            \n                \n                    Defined in src/home-page/home-page.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SearchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { SearchDto } from './dto/search.dto';\n\n@Injectable()\nexport class HomePageService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async homePage(userId: string, profileId: string) {\n    await this.findOneProfileInUser(userId, profileId);\n\n    const playlists = await this.prisma.profile\n      .findUnique({\n        where: { id: profileId },\n        select: {\n          playlists: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n              _count: {\n                select: {\n                  songs: true,\n                },\n              },\n            },\n          },\n          favoritePlaylists: {\n            select: {\n              playlist: {\n                select: {\n                  id: true,\n                  name: true,\n                  image: true,\n                  _count: {\n                    select: {\n                      songs: true,\n                    },\n                  },\n                },\n              },\n            },\n          },\n          songs: {\n            select: {\n              song: {\n                select: {\n                  id: true,\n                  name: true,\n                  songUrl: true,\n                },\n              },\n            },\n            take: 10,\n            skip: 0,\n          },\n        },\n      })\n      .catch(handleError);\n\n    const playlistsSpotify = await this.prisma.profile\n      .findUnique({\n        where: { userSpotify: true },\n        select: {\n          playlists: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    const artists = await this.prisma.artist\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n        },\n        take: 10,\n        skip: 0,\n      })\n      .catch(handleError);\n\n    const musicCategories = await this.prisma.category\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n        },\n        take: 10,\n        skip: 0,\n      })\n      .catch(handleError);\n\n    return [playlists, { playlistsSpotify }, { artists }, { musicCategories }];\n  }\n\n  async searchPlaylistSongAlbumArtist(dto: SearchDto) {\n    const songs = await this.prisma.song\n      .findMany({\n        orderBy: [\n          {\n            name: 'asc',\n          },\n        ],\n        where: {\n          name: {\n            startsWith: `${dto.search}`,\n            mode: 'insensitive',\n          },\n        },\n        select: {\n          id: true,\n          name: true,\n          album: {\n            select: {\n              image: true,\n            },\n          },\n          artist: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    const artists = await this.prisma.artist\n      .findMany({\n        orderBy: [\n          {\n            name: 'asc',\n          },\n        ],\n        where: {\n          name: {\n            startsWith: `${dto.search}`,\n            mode: 'insensitive',\n          },\n        },\n        select: {\n          id: true,\n          name: true,\n          image: true,\n        },\n      })\n      .catch(handleError);\n\n    const playlists = await this.prisma.playlist\n      .findMany({\n        orderBy: [\n          {\n            name: 'asc',\n          },\n        ],\n        where: {\n          name: {\n            startsWith: `${dto.search}`,\n            mode: 'insensitive',\n          },\n          NOT: {\n            private: true,\n          },\n        },\n        select: {\n          id: true,\n          name: true,\n          image: true,\n        },\n      })\n      .catch(handleError);\n\n    const albums = await this.prisma.album\n      .findMany({\n        orderBy: [\n          {\n            name: 'asc',\n          },\n        ],\n        where: {\n          name: {\n            startsWith: `${dto.search}`,\n            mode: 'insensitive',\n          },\n        },\n        select: {\n          id: true,\n          name: true,\n          image: true,\n          artist: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (\n      songs.length === 0 &&\n      artists.length === 0 &&\n      playlists.length === 0 &&\n      albums.length === 0\n    ) {\n      throw new NotFoundException('Nothing was found');\n    }\n\n    return [{ songs }, { artists }, { playlists }, { albums }];\n  }\n\n  async findOneProfileInUser(userId: string, profileId: string) {\n    const record = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          profiles: {\n            where: {\n              id: profileId,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (record.profiles.length === 0) {\n      throw new NotFoundException(`Profile with ID '${profileId}' not found`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly prisma: PrismaService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: { email: string; profileId: string }) {\n    const profileId = payload.profileId;\n    const user = await this.prisma.user\n      .findUnique({\n        where: { email: payload.email },\n      })\n      .catch(handleError);\n\n    const admin = await this.prisma.admin\n      .findUnique({\n        where: { email: payload.email },\n      })\n      .catch(handleError);\n\n    const artist = await this.prisma.artist\n      .findUnique({\n        where: { email: payload.email },\n      })\n      .catch(handleError);\n\n    if (!user && !admin && !artist) {\n      throw new UnauthorizedException('User not found or not authorized!');\n    }\n\n    if (user) {\n      delete user.password;\n      return { user, profileId };\n    }\n\n    if (admin) {\n      delete admin.password;\n      return admin;\n    }\n\n    if (artist) {\n      delete artist.password;\n      return artist;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginAdminDto.html":{"url":"classes/LoginAdminDto.html","title":"class - LoginAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'The admin email', example: 'admin@admin.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-admin.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Admin password to login', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-admin.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginAdminDto {\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The admin email',\n    example: 'admin@admin.com',\n  })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Admin password to login',\n    example: 'User#5678@!',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginArtistDto.html":{"url":"classes/LoginArtistDto.html","title":"class - LoginArtistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginArtistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-artist.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'The artist email', example: 'artist@artist.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-artist.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Artist password to login', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-artist.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginArtistDto {\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The artist email',\n    example: 'artist@artist.com',\n  })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Artist password to login',\n    example: 'User#5678@!',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginProfileDto.html":{"url":"classes/LoginProfileDto.html","title":"class - LoginProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                profileId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        profileId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty({description: 'User profile id', example: '0eee08d7-8a4b-4751-bdfe-1f0bd61a6987'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-profile.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID } from 'class-validator';\n\nexport class LoginProfileDto {\n  @IsUUID()\n  @ApiProperty({\n    description: 'User profile id',\n    example: '0eee08d7-8a4b-4751-bdfe-1f0bd61a6987',\n  })\n  profileId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'The user email', example: 'user@user.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'User password to login', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginUserDto {\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The user email',\n    example: 'user@user.com',\n  })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'User password to login',\n    example: 'User#5678@!',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserResponseDto.html":{"url":"classes/LoginUserResponseDto.html","title":"class - LoginUserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'JWT generated by login', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuaWNrbmFtZSI6Imd1dHMiLCJpYXQiOjE2NTQ4MjQwMDUsImV4cCI6MTY1NDkxMDQwNX0.d3wIQIyk5LqUMcyBYL-yunYNe7JyhMfKMyqP0joN00w'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user-response.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Authenticated user data'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from 'src/user/entities/user.entity';\n\nexport class LoginUserResponseDto {\n  @ApiProperty({\n    description: 'JWT generated by login',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuaWNrbmFtZSI6Imd1dHMiLCJpYXQiOjE2NTQ4MjQwMDUsImV4cCI6MTY1NDkxMDQwNX0.d3wIQIyk5LqUMcyBYL-yunYNe7JyhMfKMyqP0joN00w',\n  })\n  token: string;\n\n  @ApiProperty({\n    description: 'Authenticated user data',\n  })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Music.html":{"url":"classes/Music.html","title":"class - Music","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Music\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/song/entities/song.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                albumId\n                            \n                            \n                                artistId\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                musicUrl\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        albumId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        artistId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        musicUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/song/entities/song.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Music {\n  id?: string\n  name: string\n  musicUrl: string\n  albumId: string\n  artistId: string\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Playlist.html":{"url":"classes/Playlist.html","title":"class - Playlist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Playlist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/entities/playlist.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                private\n                            \n                            \n                                profileId\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/playlist/entities/playlist.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Playlist {\n  id?: string;\n  name: string;\n  image: string;\n  private: boolean;\n  profileId: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlaylistController.html":{"url":"controllers/PlaylistController.html","title":"controller - PlaylistController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlaylistController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/playlist.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                playlist\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addPlaylistFavorite\n                            \n                            \n                                addSongToPlaylist\n                            \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                deletePlaylistFavorite\n                            \n                            \n                                deleteSongToPlaylist\n                            \n                            \n                                findAllPlaylistProfile\n                            \n                            \n                                findOnePlaylist\n                            \n                            \n                                spotifyPlaylistCreate\n                            \n                            \n                                spotifyPlaylistDelete\n                            \n                            \n                                updatePlayList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addPlaylistFavorite\n                        \n                    \n                \n            \n            \n                \naddPlaylistFavorite(userProfileId: UserProfileId, playlistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('add-favorite/:playlistID')@ApiOperation({summary: 'Favorite a playlist by id in the logged in users profile - (ONLY USER)'})@HttpCode(HttpStatus.CREATED)\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addSongToPlaylist\n                        \n                    \n                \n            \n            \n                \naddSongToPlaylist(userProfileId: UserProfileId, playlistSong: AddSongPlaylistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('add-song')@ApiOperation({summary: 'Add a song to a playlist - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistSong\n                                    \n                                                AddSongPlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userProfileId: UserProfileId, dto: CreatePlaylistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiOperation({summary: 'Create new playlist in the logged in user profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(userProfileId: UserProfileId, playlistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:playlistID')@ApiOperation({summary: 'Delete a playlist by id in the logged in users profile - (ONLY USER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletePlaylistFavorite\n                        \n                    \n                \n            \n            \n                \ndeletePlaylistFavorite(userProfileId: UserProfileId, playlistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete-favorite/:playlistID')@ApiOperation({summary: 'Delete a favorite playlist from profile - (ONLY USER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteSongToPlaylist\n                        \n                    \n                \n            \n            \n                \ndeleteSongToPlaylist(userProfileId: UserProfileId, playlistSong: AddSongPlaylistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('delete-song')@ApiOperation({summary: 'Delete a song from a playlist - (ONLY USER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistSong\n                                    \n                                                AddSongPlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllPlaylistProfile\n                        \n                    \n                \n            \n            \n                \nfindAllPlaylistProfile(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')@ApiOperation({summary: 'Search all playlists in the logged-in user profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOnePlaylist\n                        \n                    \n                \n            \n            \n                \nfindOnePlaylist(userProfileId: UserProfileId, playlistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:playlistID')@ApiOperation({summary: 'Search a playlist by id, (private playlists are only displayed for the creator profile) - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spotifyPlaylistCreate\n                        \n                    \n                \n            \n            \n                \nspotifyPlaylistCreate(admin: Admin, dto: CreatePlaylistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('spotify-create')@ApiOperation({summary: 'Create a playlist from the platform linked to the Spotify profile - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spotifyPlaylistDelete\n                        \n                    \n                \n            \n            \n                \nspotifyPlaylistDelete(admin: Admin, playlistId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('spotify-delete/:playlistID')@ApiOperation({summary: 'Delete a playlist from the platform linked to the Spotify profile - (ONLY ADMIN)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatePlayList\n                        \n                    \n                \n            \n            \n                \nupdatePlayList(userProfileId: UserProfileId, playlistId: string, dto: UpdatePlaylistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update/:playlistID')@ApiOperation({summary: 'Edit a playlist by id in the logged in users profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/playlist/playlist.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    playlistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdatePlaylistDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { UserProfileId } from 'src/auth/dto/logged-profile-type';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { AddSongPlaylistDto } from './dto/create-playlist-song.dto';\nimport { CreatePlaylistDto } from './dto/create-playlist.dto';\nimport { UpdatePlaylistDto } from './dto/update-playlist.dto';\nimport { PlaylistService } from './playlist.service';\n\n@ApiTags('playlist')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('playlist')\nexport class PlaylistController {\n  constructor(private readonly playlistService: PlaylistService) {}\n\n  @Post('/create')\n  @ApiOperation({\n    summary: 'Create new playlist in the logged in user profile - (ONLY USER)',\n  })\n  create(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() dto: CreatePlaylistDto,\n  ) {\n    return this.playlistService.create(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      dto,\n    );\n  }\n\n  @Get('/all')\n  @ApiOperation({\n    summary: 'Search all playlists in the logged-in user profile - (ONLY USER)',\n  })\n  findAllPlaylistProfile(@LoggedUser() userProfileId: UserProfileId) {\n    return this.playlistService.findAllPlaylistProfile(\n      userProfileId.user.id,\n      userProfileId.profileId,\n    );\n  }\n\n  @Get('/:playlistID')\n  @ApiOperation({\n    summary:\n      'Search a playlist by id, (private playlists are only displayed for the creator profile) - (ONLY USER)',\n  })\n  findOnePlaylist(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('playlistID') playlistId: string,\n  ) {\n    return this.playlistService.findOnePlaylist(\n      userProfileId.profileId,\n      playlistId,\n    );\n  }\n\n  @Patch('update/:playlistID')\n  @ApiOperation({\n    summary:\n      'Edit a playlist by id in the logged in users profile - (ONLY USER)',\n  })\n  updatePlayList(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('playlistID') playlistId: string,\n    @Body() dto: UpdatePlaylistDto,\n  ) {\n    return this.playlistService.updatePlayList(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistId,\n      dto,\n    );\n  }\n\n  @Delete('delete/:playlistID')\n  @ApiOperation({\n    summary:\n      'Delete a playlist by id in the logged in users profile - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('playlistID') playlistId: string,\n  ) {\n    return this.playlistService.delete(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistId,\n    );\n  }\n\n  @Post('add-song')\n  @ApiOperation({\n    summary: 'Add a song to a playlist - (ONLY USER)',\n  })\n  addSongToPlaylist(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() playlistSong: AddSongPlaylistDto,\n  ) {\n    return this.playlistService.addSongToPlaylist(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistSong,\n    );\n  }\n\n  @Patch('delete-song')\n  @ApiOperation({\n    summary: 'Delete a song from a playlist - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  deleteSongToPlaylist(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() playlistSong: AddSongPlaylistDto,\n  ) {\n    return this.playlistService.deleteSongToPlaylist(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistSong,\n    );\n  }\n\n  @Patch('add-favorite/:playlistID')\n  @ApiOperation({\n    summary:\n      'Favorite a playlist by id in the logged in users profile - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.CREATED)\n  addPlaylistFavorite(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('playlistID') playlistId: string,\n  ) {\n    return this.playlistService.addPlaylistFavorite(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistId,\n    );\n  }\n\n  @Delete('delete-favorite/:playlistID')\n  @ApiOperation({\n    summary: 'Delete a favorite playlist from profile - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  deletePlaylistFavorite(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('playlistID') playlistId: string,\n  ) {\n    return this.playlistService.deletePlaylistFavorite(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      playlistId,\n    );\n  }\n\n  @Post('spotify-create')\n  @ApiOperation({\n    summary:\n      'Create a playlist from the platform linked to the Spotify profile - (ONLY ADMIN)',\n  })\n  spotifyPlaylistCreate(\n    @LoggedAdmin() admin: Admin,\n    @Body()\n    dto: CreatePlaylistDto,\n  ) {\n    return this.playlistService.spotifyPlaylistCreate(dto);\n  }\n\n  @Delete('spotify-delete/:playlistID')\n  @ApiOperation({\n    summary:\n      'Delete a playlist from the platform linked to the Spotify profile - (ONLY ADMIN)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  spotifyPlaylistDelete(\n    @LoggedAdmin() admin: Admin,\n    @Param('playlistID')\n    playlistId: string,\n  ) {\n    return this.playlistService.spotifyPlaylistDelete(playlistId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlaylistModule.html":{"url":"modules/PlaylistModule.html","title":"module - PlaylistModule","body":"\n                   \n\n\n\n\n    Modules\n    PlaylistModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PlaylistModule\n\n\n\ncluster_PlaylistModule_providers\n\n\n\ncluster_PlaylistModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPlaylistModule\n\nPlaylistModule\n\nPlaylistModule -->\n\nPrismaModule->PlaylistModule\n\n\n\n\n\nPlaylistService\n\nPlaylistService\n\nPlaylistModule -->\n\nPlaylistService->PlaylistModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/playlist/playlist.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PlaylistService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PlaylistController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PlaylistService } from './playlist.service';\nimport { PlaylistController } from './playlist.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [PlaylistController],\n  providers: [PlaylistService],\n})\nexport class PlaylistModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                image\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Profile {\n  id?: string;\n  name: string;\n  image: string;\n  userId: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userProfileId: UserProfileId, dto: CreateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a new logged in user profile - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiOperation({summary: 'Delete a profile by id - (ONLY USER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')@ApiOperation({summary: 'Fetch all profiles of the logged in user - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(userProfileId: UserProfileId, dto: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiOperation({summary: 'Edit a profile by id - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { UserProfileId } from 'src/auth/dto/logged-profile-type';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { User } from 'src/user/entities/user.entity';\nimport { CreateProfileDto } from './dto/create-profile.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { ProfileService } from './profile.service';\n\n@ApiTags('profile')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('profile')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @Post('create')\n  @ApiOperation({\n    summary: 'Create a new logged in user profile - (ONLY USER)',\n  })\n  create(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() dto: CreateProfileDto,\n  ) {\n    return this.profileService.create(userProfileId.user.id, dto);\n  }\n\n  @Get('all')\n  @ApiOperation({\n    summary: 'Fetch all profiles of the logged in user - (ONLY USER)',\n  })\n  findAll(@LoggedUser() userProfileId: UserProfileId) {\n    return this.profileService.findAll(userProfileId.user.id);\n  }\n\n  @Patch('update')\n  @ApiOperation({\n    summary: 'Edit a profile by id - (ONLY USER)',\n  })\n  update(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() dto: UpdateProfileDto,\n  ) {\n    return this.profileService.update(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      dto,\n    );\n  }\n\n  @Delete('delete')\n  @ApiOperation({\n    summary: 'Delete a profile by id - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(@LoggedUser() userProfileId: UserProfileId) {\n    return this.profileService.delete(\n      userProfileId.user.id,\n      userProfileId.profileId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileFavoriteSong.html":{"url":"classes/ProfileFavoriteSong.html","title":"class - ProfileFavoriteSong","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileFavoriteSong\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile-favorite-song/entities/profile-favorite-song.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProfileFavoriteSong {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileFavoriteSongController.html":{"url":"controllers/ProfileFavoriteSongController.html","title":"controller - ProfileFavoriteSongController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileFavoriteSongController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile-favorite-song/profile-favorite-song.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tracks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userProfileId: UserProfileId, songIdD: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('add/:songID')@ApiOperation({summary: 'Add a song to profile favorites - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songIdD\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(userProfileId: UserProfileId, songIdDto: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:songID')@ApiOperation({summary: 'Remove a song from profile favorites - (ONLY USER)'})@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songIdDto\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')@ApiOperation({summary: 'Search all music from profile favorites - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { UserProfileId } from 'src/auth/dto/logged-profile-type';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { ProfileFavoriteSongService } from './profile-favorite-song.service';\n\n@ApiTags('profile-favorite-song')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('tracks')\nexport class ProfileFavoriteSongController {\n  constructor(\n    private readonly favoriteSongService: ProfileFavoriteSongService,\n  ) {}\n\n  @Patch('add/:songID')\n  @ApiOperation({\n    summary: 'Add a song to profile favorites - (ONLY USER)',\n  })\n  create(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('songID') songIdD: string,\n  ) {\n    return this.favoriteSongService.create(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      songIdD,\n    );\n  }\n\n  @Get('all')\n  @ApiOperation({\n    summary: 'Search all music from profile favorites - (ONLY USER)',\n  })\n  findAll(@LoggedUser() userProfileId: UserProfileId) {\n    return this.favoriteSongService.findAll(\n      userProfileId.user.id,\n      userProfileId.profileId,\n    );\n  }\n\n  @Delete('delete/:songID')\n  @ApiOperation({\n    summary: 'Remove a song from profile favorites - (ONLY USER)',\n  })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  delete(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Param('songID') songIdDto: string,\n  ) {\n    return this.favoriteSongService.delete(\n      userProfileId.user.id,\n      userProfileId.profileId,\n      songIdDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileFavoriteSongModule.html":{"url":"modules/ProfileFavoriteSongModule.html","title":"module - ProfileFavoriteSongModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileFavoriteSongModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfileFavoriteSongModule\n\n\n\ncluster_ProfileFavoriteSongModule_providers\n\n\n\ncluster_ProfileFavoriteSongModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProfileFavoriteSongModule\n\nProfileFavoriteSongModule\n\nProfileFavoriteSongModule -->\n\nPrismaModule->ProfileFavoriteSongModule\n\n\n\n\n\nProfileFavoriteSongService\n\nProfileFavoriteSongService\n\nProfileFavoriteSongModule -->\n\nProfileFavoriteSongService->ProfileFavoriteSongModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/profile-favorite-song/profile-favorite-song.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileFavoriteSongService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileFavoriteSongController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileFavoriteSongService } from './profile-favorite-song.service';\nimport { ProfileFavoriteSongController } from './profile-favorite-song.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [ProfileFavoriteSongController],\n  providers: [ProfileFavoriteSongService],\n})\nexport class ProfileFavoriteSongModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileFavoriteSongService.html":{"url":"injectables/ProfileFavoriteSongService.html","title":"injectable - ProfileFavoriteSongService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileFavoriteSongService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile-favorite-song/profile-favorite-song.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByIdProfileUser\n                            \n                            \n                                    Async\n                                findByIdSongInProfile\n                            \n                            \n                                    Async\n                                verifySongExist\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/profile-favorite-song/profile-favorite-song.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, profileId: string, songID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userId: string, profileId: string, songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIdProfileUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdProfileUser(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIdSongInProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdSongInProfile(profileId: string, songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifySongExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifySongExist(songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile-favorite-song/profile-favorite-song.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { verifyProfileIdInToken } from 'src/utils/verifyProfileIdInToken';\n\n@Injectable()\nexport class ProfileFavoriteSongService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(userId: string, profileId: string, songID: string) {\n    verifyProfileIdInToken(profileId);\n    await this.verifySongExist(songID);\n    await this.findByIdProfileUser(userId, profileId);\n\n    const data: Prisma.ProfileFavoriteSongCreateInput = {\n      profile: {\n        connect: {\n          id: profileId,\n        },\n      },\n      song: {\n        connect: {\n          id: songID,\n        },\n      },\n    };\n\n    return await this.prisma.profileFavoriteSong\n      .create({\n        data,\n        select: {\n          profile: {\n            select: {\n              name: true,\n            },\n          },\n          song: {\n            select: {\n              id: true,\n              name: true,\n              songUrl: true,\n              artist: {\n                select: {\n                  id: true,\n                  name: true,\n                },\n              },\n              album: {\n                select: {\n                  id: true,\n                  name: true,\n                  image: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll(userId: string, profileId: string) {\n    verifyProfileIdInToken(profileId);\n    await this.findByIdProfileUser(userId, profileId);\n\n    const allFavorites = await this.prisma.profile\n      .findUnique({\n        where: { id: profileId },\n        select: {\n          songs: {\n            select: {\n              song: {\n                select: {\n                  id: true,\n                  name: true,\n                  songUrl: true,\n                  artist: {\n                    select: {\n                      id: true,\n                      name: true,\n                    },\n                  },\n                  album: {\n                    select: {\n                      id: true,\n                      name: true,\n                      image: true,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (allFavorites.songs.length === 0) {\n      throw new NotFoundException('No favorite songs found in profile');\n    }\n\n    return allFavorites;\n  }\n\n  async delete(userId: string, profileId: string, songId: string) {\n    verifyProfileIdInToken(profileId);\n    await this.findByIdProfileUser(userId, profileId);\n    await this.findByIdSongInProfile(profileId, songId);\n    return await this.prisma.profileFavoriteSong\n      .delete({\n        where: {\n          profileId_songId: {\n            profileId: profileId,\n            songId: songId,\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findByIdProfileUser(userId: string, profileId: string) {\n    const profileUser = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          name: true,\n          profiles: {\n            where: { id: profileId },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (profileUser.profiles.length === 0) {\n      throw new NotFoundException('Profile not found');\n    }\n\n    return profileUser;\n  }\n\n  async findByIdSongInProfile(profileId: string, songId: string) {\n    const songProfile = await this.prisma.profile\n      .findUnique({\n        where: { id: profileId },\n        select: {\n          songs: {\n            where: {\n              song: {\n                id: songId,\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (songProfile.songs.length === 0) {\n      throw new NotFoundException('No favorite songs found in the profile ');\n    }\n  }\n\n  async verifySongExist(songId: string) {\n    const song = await this.prisma.song.findUnique({\n      where: { id: songId },\n    });\n\n    if (!song) {\n      throw new NotFoundException(`Song with ID '${songId} not found'`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_imports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nPrismaModule->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { ProfileController } from './profile.controller';\nimport { ProfileService } from './profile.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [ProfileController],\n  providers: [ProfileService],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneProfileInUser\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/profile/profile.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, dto: CreateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneProfileInUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneProfileInUser(userId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, profileId: string, dto: UpdateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { verifyProfileIdInToken } from 'src/utils/verifyProfileIdInToken';\nimport { CreateProfileDto } from './dto/create-profile.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { Profile } from './entities/profile.entity';\n\n@Injectable()\nexport class ProfileService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(userId: string, dto: CreateProfileDto) {\n    const user = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          profiles: {\n            select: {\n              id: true,\n            },\n          },\n          userPlan: {\n            select: {\n              accounts: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (user.profiles.length >= user.userPlan.accounts) {\n      throw new UnauthorizedException(\n        'Profile limits reached for your account type',\n      );\n    }\n\n    const data: Prisma.ProfileCreateInput = {\n      ...dto,\n      user: {\n        connect: {\n          id: userId,\n        },\n      },\n    };\n\n    return this.prisma.profile\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          image: true,\n          user: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll(userId: string) {\n    const user = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          profiles: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (user.profiles.length === 0) {\n      throw new NotFoundException('No profile found');\n    }\n    return user;\n  }\n\n  async update(userId: string, profileId: string, dto: UpdateProfileDto) {\n    verifyProfileIdInToken(profileId);\n    this.findOneProfileInUser(userId, profileId);\n\n    const data: Partial = { ...dto };\n\n    return await this.prisma.profile\n      .update({\n        where: { id: profileId },\n        data,\n        select: {\n          id: true,\n          name: true,\n          image: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async delete(userId: string, profileId: string) {\n    verifyProfileIdInToken(profileId);\n    await this.findOneProfileInUser(userId, profileId);\n    await this.prisma.profile\n      .delete({ where: { id: profileId } })\n      .catch(handleError);\n  }\n\n  async findOneProfileInUser(userId: string, profileId: string) {\n    const userProfile = await this.prisma.user\n      .findUnique({\n        where: {\n          id: userId,\n        },\n        select: {\n          profiles: {\n            where: {\n              id: profileId,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (userProfile.profiles.length === 0) {\n      throw new NotFoundException('Profile not found');\n    }\n\n    return userProfile.profiles;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchDto.html":{"url":"classes/SearchDto.html","title":"class - SearchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/home-page/dto/search.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Name or part of the name of an artist, song, playlist or album', example: 'Alok'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/home-page/dto/search.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class SearchDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description:\n      'Name or part of the name of an artist, song, playlist or album',\n    example: 'Alok',\n  })\n  search: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SongController.html":{"url":"controllers/SongController.html","title":"controller - SongController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SongController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/song/song.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                song\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(artist: Artist, dto: CreateSongDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiOperation({summary: 'Create an song and associate it with the artist who created it (artist) and album - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/song/song.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateSongDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(artist: Artist, songId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:songID')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove a song by Id - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/song/song.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')@ApiOperation({summary: 'List all songs - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/song/song.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(user: User, songId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:songID')@ApiOperation({summary: 'View a song by Id - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/song/song.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(artist: Artist, songId: string, dto: UpdateSongDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update/:songID')@ApiOperation({summary: 'Edit an song of the artist who is logged in - (ONLY ARTIST)'})\n                \n            \n\n            \n                \n                    Defined in src/song/song.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                Artist\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateSongDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Artist } from 'src/artist/entities/artist.entity';\nimport { LoggedArtist } from 'src/auth/logged-artist.decorator';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { User } from 'src/user/entities/user.entity';\nimport { CreateSongDto } from './dto/create-song.dto';\nimport { UpdateSongDto } from './dto/update-song.dto';\nimport { SongService } from './song.service';\n\n@ApiTags('song')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('song')\nexport class SongController {\n  constructor(private readonly songService: SongService) {}\n\n  @Post('/create')\n  @ApiOperation({\n    summary:\n      'Create an song and associate it with the artist who created it (artist) and album - (ONLY ARTIST)',\n  })\n  create(@LoggedArtist() artist: Artist, @Body() dto: CreateSongDto) {\n    return this.songService.create(artist.id, dto);\n  }\n\n  @Get('/all')\n  @ApiOperation({\n    summary: 'List all songs - (ONLY USER)',\n  })\n  findAll(@LoggedUser() user: User) {\n    return this.songService.findAll();\n  }\n\n  @Get('/:songID')\n  @ApiOperation({\n    summary: 'View a song by Id - (ONLY USER)',\n  })\n  findOne(@LoggedUser() user: User, @Param('songID') songId: string) {\n    return this.songService.findOne(songId);\n  }\n\n  @Patch('/update/:songID')\n  @ApiOperation({\n    summary: 'Edit an song of the artist who is logged in - (ONLY ARTIST)',\n  })\n  update(\n    @LoggedArtist() artist: Artist,\n    @Param('songID') songId: string,\n    @Body() dto: UpdateSongDto,\n  ) {\n    return this.songService.update(artist.id, songId, dto);\n  }\n\n  @Delete('/delete/:songID')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove a song by Id - (ONLY ARTIST)',\n  })\n  delete(@LoggedArtist() artist: Artist, @Param('songID') songId: string) {\n    return this.songService.delete(artist.id, songId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SongModule.html":{"url":"modules/SongModule.html","title":"module - SongModule","body":"\n                   \n\n\n\n\n    Modules\n    SongModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SongModule\n\n\n\ncluster_SongModule_imports\n\n\n\ncluster_SongModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nSongModule\n\nSongModule\n\nSongModule -->\n\nPrismaModule->SongModule\n\n\n\n\n\nSongService\n\nSongService\n\nSongModule -->\n\nSongService->SongModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/song/song.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SongService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SongController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { SongController } from './song.controller';\nimport { SongService } from './song.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [SongController],\n  providers: [SongService],\n})\nexport class SongModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SongService.html":{"url":"injectables/SongService.html","title":"injectable - SongService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SongService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/song/song.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                albumIdExist\n                            \n                            \n                                    Async\n                                categoryIdExist\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByArtsit\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/song/song.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        albumIdExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    albumIdExist(albumId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    albumId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        categoryIdExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    categoryIdExist(categoryIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:248\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(artistId: string, dto: CreateSongDto)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateSongDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(artistId: string, songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:231\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(artistId: string, songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(songId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByArtsit\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByArtsit(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(artistdId: string, songId: string, dto: UpdateSongDto)\n                \n            \n\n\n            \n                \n                    Defined in src/song/song.service.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistdId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    songId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateSongDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateSongDto } from './dto/create-song.dto';\nimport { UpdateSongDto } from './dto/update-song.dto';\n\n@Injectable()\nexport class SongService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(artistId: string, dto: CreateSongDto) {\n    await this.albumIdExist(dto.albumId);\n    await this.categoryIdExist(dto.categoryId);\n    const data: Prisma.SongCreateInput = {\n      name: dto.name,\n      songUrl: dto.songUrl,\n      album: {\n        connect: {\n          id: dto.albumId,\n        },\n      },\n      artist: {\n        connect: {\n          id: artistId,\n        },\n      },\n      CategorySongs: {\n        createMany: {\n          data: dto.categoryId.map((categoryId) => ({\n            categoryId: categoryId,\n          })),\n        },\n      },\n    };\n\n    return this.prisma.song\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          songUrl: true,\n          album: {\n            select: {\n              name: true,\n              image: true,\n            },\n          },\n          artist: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n          CategorySongs: {\n            select: {\n              category: {\n                select: {\n                  id: true,\n                  name: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll() {\n    const songs = await this.prisma.song\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n          songUrl: true,\n          artist: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (songs.length === 0) {\n      throw new NotFoundException('No song found');\n    }\n\n    return songs;\n  }\n\n  async findById(artistId: string, songId: string) {\n    const record = await this.prisma.artist\n      .findUnique({\n        where: { id: artistId },\n        select: {\n          songs: {\n            where: {\n              id: songId,\n            },\n            select: {\n              id: true,\n              name: true,\n              songUrl: true,\n              album: {\n                select: {\n                  name: true,\n                  image: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (record.songs.length === 0) {\n      throw new NotFoundException(`Song with ID '${songId}' not found`);\n    }\n\n    return record;\n  }\n\n  async findOne(songId: string) {\n    const song = await this.prisma.song\n      .findUnique({\n        where: { id: songId },\n        select: {\n          id: true,\n          name: true,\n          songUrl: true,\n          artist: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n          album: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n          CategorySongs: {\n            select: {\n              category: {\n                select: {\n                  name: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (!song) {\n      throw new NotFoundException(`Song with ID '${songId}' not found`);\n    }\n\n    console.log(song);\n\n    return song;\n  }\n\n  async findOneByArtsit(artistId: string) {\n    const songs = await this.prisma.artist\n      .findMany({\n        where: { id: artistId },\n        select: {\n          songs: {\n            select: {\n              id: true,\n              name: true,\n              songUrl: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (songs.length === 0) {\n      throw new NotFoundException('No song found');\n    }\n\n    return songs;\n  }\n\n  async update(artistdId: string, songId: string, dto: UpdateSongDto) {\n    await this.findById(artistdId, songId);\n    const data: Prisma.SongUpdateInput = {\n      name: dto.name,\n      songUrl: dto.songUrl,\n      CategorySongs: {\n        createMany: {\n          data: dto.categoryId.map((categoryId) => ({\n            categoryId: categoryId,\n          })),\n        },\n      },\n    };\n\n    return await this.prisma.song\n      .update({\n        where: { id: songId },\n        data,\n        select: {\n          id: true,\n          name: true,\n          songUrl: true,\n          CategorySongs: {\n            select: {\n              category: {\n                select: {\n                  id: true,\n                  name: true,\n                },\n              },\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async delete(artistId: string, songId: string) {\n    await this.findById(artistId, songId);\n    return await this.prisma.song\n      .delete({ where: { id: songId } })\n      .catch(handleError);\n  }\n\n  async albumIdExist(albumId: string) {\n    const album = await this.prisma.album.findUnique({\n      where: { id: albumId },\n    });\n\n    if (!album) {\n      throw new NotFoundException(`Album with ID '${albumId}' not found`);\n    }\n  }\n\n  async categoryIdExist(categoryIds: string[]) {\n    for (let i of categoryIds) {\n      const category = await this.prisma.category.findUnique({\n        where: { id: i },\n      });\n\n      if (!category) {\n        throw new NotFoundException(`Category with ID '${i} not found'`);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAdminDto.html":{"url":"classes/UpdateAdminDto.html","title":"class - UpdateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/update-managerAdmin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                confirmPassword\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()@ApiProperty({description: 'Confirmação da senha do Admin', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/update-managerAdmin.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail()@IsNotEmpty()@Length(5, 50)@ApiProperty({description: 'The email of the user.', example: 'admin@admin.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/update-managerAdmin.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@Length(3, 50)@ApiProperty({description: 'Nome do Admin', example: 'Maria Silva'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/update-managerAdmin.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@Length(8, 50)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Senha muito fraca'})@ApiProperty({description: 'Senha do Admin', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/update-managerAdmin.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n  Matches\n} from 'class-validator';\n\nexport class UpdateAdminDto {\n  @IsOptional()\n  @IsString()\n  @Length(3, 50)\n  @ApiProperty({\n    description: 'Nome do Admin',\n    example: 'Maria Silva',\n  })\n  name?: string;\n\n  @IsOptional()\n  @IsEmail()\n  @IsNotEmpty()\n  @Length(5, 50)\n  @ApiProperty({\n    description: 'The email of the user.',\n    example: 'admin@admin.com',\n  })\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  @Length(8, 50)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Senha muito fraca',\n  })\n  @ApiProperty({\n    description: 'Senha do Admin',\n    example: 'User#5678@!',\n  })\n  password?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Confirmação da senha do Admin',\n    example: 'User#5678@!',\n  })\n  confirmPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAlbumDto.html":{"url":"classes/UpdateAlbumDto.html","title":"class - UpdateAlbumDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAlbumDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/dto/update-album.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateAlbumDto } from './create-album.dto';\n\nexport class UpdateAlbumDto extends PartialType(CreateAlbumDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateArtistDto.html":{"url":"classes/UpdateArtistDto.html","title":"class - UpdateArtistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateArtistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/dto/update-artist.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateArtistDto } from './create-artist.dto';\n\nexport class UpdateArtistDto extends PartialType(CreateArtistDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCountryDto.html":{"url":"classes/UpdateCountryDto.html","title":"class - UpdateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/country/dto/update-country.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCountryDto } from './create-country.dto';\n\nexport class UpdateCountryDto extends PartialType(CreateCountryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlanDto.html":{"url":"classes/UpdatePlanDto.html","title":"class - UpdatePlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userPlanId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userPlanId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()@ApiProperty({description: 'Id of any of the plans available on the platform', example: '11f38851-afc7-41ae-b2d7-11781579099a'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-plan.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsUUID } from 'class-validator';\n\nexport class UpdatePlanDto {\n  @IsOptional()\n  @IsUUID()\n  @ApiProperty({\n    description: 'Id of any of the plans available on the platform',\n    example: '11f38851-afc7-41ae-b2d7-11781579099a',\n  })\n  userPlanId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlaylistDto.html":{"url":"classes/UpdatePlaylistDto.html","title":"class - UpdatePlaylistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlaylistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/playlist/dto/update-playlist.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePlaylistDto } from './create-playlist.dto';\n\nexport class UpdatePlaylistDto extends PartialType(CreatePlaylistDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/dto/update-profile.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProfileDto } from './create-profile.dto';\n\nexport class UpdateProfileDto extends PartialType(CreateProfileDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSongDto.html":{"url":"classes/UpdateSongDto.html","title":"class - UpdateSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/song/dto/update-song.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                categoryId\n                            \n                            \n                                name\n                            \n                            \n                                songUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID(undefined, {each: true})@ApiProperty({description: 'Category id to create the relationship with song', example: '[\"76b73966-928c-407e-8c35-ba327f4d200c\", \"0eee08d7-8a4b-4751-bdfe-1f0bd61a6987\"]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/update-song.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(1, 50)@ApiProperty({description: 'The name of the song.', example: 'Right Next Door to Hell'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/update-song.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        songUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@MaxLength(2000)@ApiProperty({description: 'The url of the song.', example: 'https://youtu.be/Zqo7j2yFoFs'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/song/dto/update-song.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUrl, IsUUID, Length, MaxLength } from 'class-validator';\n\nexport class UpdateSongDto {\n  @IsString()\n  @Length(1, 50)\n  @ApiProperty({\n    description: 'The name of the song.',\n    example: 'Right Next Door to Hell',\n  })\n  name: string;\n\n  @IsUrl()\n  @MaxLength(2000)\n  @ApiProperty({\n    description: 'The url of the song.',\n    example: 'https://youtu.be/Zqo7j2yFoFs',\n  })\n  songUrl: string;\n\n  @IsUUID(undefined, { each: true })\n  @ApiProperty({\n    description: 'Category id to create the relationship with song',\n    example:\n      '[\"76b73966-928c-407e-8c35-ba327f4d200c\", \"0eee08d7-8a4b-4751-bdfe-1f0bd61a6987\"]',\n  })\n  categoryId: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                cpf\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({description: 'User password confirmation', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@Length(11, 14)@ApiProperty({description: 'The cpf of the user', example: '123.456.789-10'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsOptional()@IsEmail()@ApiProperty({description: 'The email of the user.', example: 'user@user.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsOptional()@IsString()@Length(3, 50)@ApiProperty({description: 'The name of the user.', example: 'Gustavo Martins'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MinLength(8)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})@ApiProperty({description: 'The password of the user.', example: 'User#5678@!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class UpdateUserDto {\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  @Length(3, 50)\n  @ApiProperty({\n    description: 'The name of the user.',\n    example: 'Gustavo Martins',\n  })\n  name: string;\n\n  @IsOptional()\n  @IsString()\n  @Length(11, 14)\n  @ApiProperty({\n    description: 'The cpf of the user',\n    example: '123.456.789-10',\n  })\n  cpf: string;\n\n  @IsNotEmpty()\n  @IsOptional()\n  @IsEmail()\n  @ApiProperty({\n    description: 'The email of the user.',\n    example: 'user@user.com',\n  })\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  @MinLength(8)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password too weak',\n  })\n  @ApiProperty({\n    description: 'The password of the user.',\n    example: 'User#5678@!',\n  })\n  password: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    description: 'User password confirmation',\n    example: 'User#5678@!',\n  })\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPlanDto.html":{"url":"classes/UpdateUserPlanDto.html","title":"class - UpdateUserPlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-plan/dto/update-user-plan.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserPlanDto } from './create-user-plan.dto';\n\nexport class UpdateUserPlanDto extends PartialType(CreateUserPlanDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                userCategoryName\n                            \n                            \n                                    Optional\n                                userPlanId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cpf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userCategoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userPlanId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class User {\n  id?: string;\n  name: string;\n  cpf: string;\n  email: string;\n  password: string;\n  userPlanId?: string;\n  userCategoryName: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                deleteMyAccount\n                            \n                            \n                                deleteUser\n                            \n                            \n                                findAll\n                            \n                            \n                                findMyAccount\n                            \n                            \n                                findOneUser\n                            \n                            \n                                updateMyAccount\n                            \n                            \n                                updateMyPlan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a new user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteMyAccount\n                        \n                    \n                \n            \n            \n                \ndeleteMyAccount(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete-my-account')@UseGuards(undefined)@ApiBearerAuth()@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove user logged - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteUser\n                        \n                    \n                \n            \n            \n                \ndeleteUser(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:id')@UseGuards(undefined)@ApiBearerAuth()@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove a user by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(admin: Admin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'List all users - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findMyAccount\n                        \n                    \n                \n            \n            \n                \nfindMyAccount(userProfileId: UserProfileId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/my-account')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'View logged user account - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneUser\n                        \n                    \n                \n            \n            \n                \nfindOneUser(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search/:id')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'View a user by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMyAccount\n                        \n                    \n                \n            \n            \n                \nupdateMyAccount(userProfileId: UserProfileId, dto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-my-account')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Edit user logged - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMyPlan\n                        \n                    \n                \n            \n            \n                \nupdateMyPlan(userProfileId: UserProfileId, dto: UpdatePlanDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-my-plan')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Edit user plan logged - (ONLY USER)'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfileId\n                                    \n                                                UserProfileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { UserProfileId } from 'src/auth/dto/logged-profile-type';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdatePlanDto } from './dto/update-plan.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserService } from './user.service';\n\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('create')\n  @ApiOperation({\n    summary: 'Create a new user',\n  })\n  create(@Body() dto: CreateUserDto) {\n    return this.userService.create(dto);\n  }\n\n  @Get('all')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'List all users - (ONLY ADMIN)',\n  })\n  findAll(@LoggedAdmin() admin: Admin) {\n    return this.userService.findAll();\n  }\n\n  @Get('/my-account')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'View logged user account - (ONLY USER)',\n  })\n  findMyAccount(@LoggedUser() userProfileId: UserProfileId) {\n    return this.userService.findMyAccount(userProfileId.user.id);\n  }\n\n  @Get('/search/:id')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'View a user by Id - (ONLY ADMIN)',\n  })\n  findOneUser(@LoggedAdmin() admin: Admin, @Param('id') id: string) {\n    return this.userService.findOneUser(id);\n  }\n\n  @Patch('update-my-account')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Edit user logged - (ONLY USER)',\n  })\n  updateMyAccount(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() dto: UpdateUserDto,\n  ) {\n    return this.userService.updateMyAccount(userProfileId.user.id, dto);\n  }\n\n  @Patch('update-my-plan')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Edit user plan logged - (ONLY USER)',\n  })\n  updateMyPlan(\n    @LoggedUser() userProfileId: UserProfileId,\n    @Body() dto: UpdatePlanDto,\n  ) {\n    return this.userService.updateMyPlan(userProfileId.user.id, dto);\n  }\n\n  @Delete('/delete-my-account')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove user logged - (ONLY USER)',\n  })\n  deleteMyAccount(@LoggedUser() userProfileId: UserProfileId) {\n    return this.userService.deleteMyAccount(userProfileId.user.id);\n  }\n\n  @Delete('delete/:id')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove a user by Id - (ONLY ADMIN)',\n  })\n  deleteUser(@LoggedAdmin() admin: Admin, @Param('id') id: string) {\n    return this.userService.deleteUser(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPlan.html":{"url":"classes/UserPlan.html","title":"class - UserPlan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPlan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-plan/entities/user-plan.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accounts\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                price\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/user-plan/entities/user-plan.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserPlan {\n  id?: string\n  name: string\n  price: number\n  accounts: number\n  description: string\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserPlanController.html":{"url":"controllers/UserPlanController.html","title":"controller - UserPlanController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserPlanController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-plan/user-plan.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user-plan\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(admin: Admin, dto: CreateUserPlanDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Create a new User Plan - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/user-plan/user-plan.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateUserPlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(admin: Admin, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(undefined)@ApiBearerAuth()@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Remove a User Plan by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/user-plan/user-plan.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'List all Users Plans - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/user-plan/user-plan.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'View User Plan by Id - (OPEN)'})\n                \n            \n\n            \n                \n                    Defined in src/user-plan/user-plan.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(admin: Admin, id: string, dto: UpdateUserPlanDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Edit a User Plan by Id - (ONLY ADMIN)'})\n                \n            \n\n            \n                \n                    Defined in src/user-plan/user-plan.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserPlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Admin } from 'src/admin/entities/admin.entity';\nimport { LoggedAdmin } from 'src/auth/logged-admin.decorator';\nimport { CreateUserPlanDto } from './dto/create-user-plan.dto';\nimport { UpdateUserPlanDto } from './dto/update-user-plan.dto';\nimport { UserPlanService } from './user-plan.service';\n\n@ApiTags('user-plan')\n@Controller('user-plan')\nexport class UserPlanController {\n  constructor(private readonly userPlanService: UserPlanService) {}\n\n  @Post()\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Create a new User Plan - (ONLY ADMIN)',\n  })\n  create(@LoggedAdmin() admin: Admin, @Body() dto: CreateUserPlanDto) {\n    return this.userPlanService.create(dto);\n  }\n\n  @Get()\n  @ApiOperation({\n    summary: 'List all Users Plans - (OPEN)',\n  })\n  findAll() {\n    return this.userPlanService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({\n    summary: 'View User Plan by Id - (OPEN)',\n  })\n  findOne(@Param('id') id: string) {\n    return this.userPlanService.findOne(id);\n  }\n\n  @Patch(':id')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Edit a User Plan by Id - (ONLY ADMIN)',\n  })\n  update(\n    @LoggedAdmin() admin: Admin,\n    @Param('id') id: string,\n    @Body() dto: UpdateUserPlanDto,\n  ) {\n    return this.userPlanService.update(id, dto);\n  }\n\n  @Delete(':id')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({\n    summary: 'Remove a User Plan by Id - (ONLY ADMIN)',\n  })\n  delete(@LoggedAdmin() admin: Admin, @Param('id') id: string) {\n    return this.userPlanService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserPlanModule.html":{"url":"modules/UserPlanModule.html","title":"module - UserPlanModule","body":"\n                   \n\n\n\n\n    Modules\n    UserPlanModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserPlanModule\n\n\n\ncluster_UserPlanModule_imports\n\n\n\ncluster_UserPlanModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserPlanModule\n\nUserPlanModule\n\nUserPlanModule -->\n\nPrismaModule->UserPlanModule\n\n\n\n\n\nUserPlanService\n\nUserPlanService\n\nUserPlanModule -->\n\nUserPlanService->UserPlanModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-plan/user-plan.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserPlanService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserPlanController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserPlanController } from './user-plan.controller';\nimport { UserPlanService } from './user-plan.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [UserPlanController],\n  providers: [UserPlanService],\n})\nexport class UserPlanModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserPlanService.html":{"url":"injectables/UserPlanService.html","title":"injectable - UserPlanService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserPlanService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-plan/user-plan.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                verifyUserPlanIdExist\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user-plan/user-plan.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateUserPlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserPlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, dto: UpdateUserPlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserPlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyUserPlanIdExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyUserPlanIdExist(userPlanId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-plan/user-plan.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userPlanId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateUserPlanDto } from './dto/create-user-plan.dto';\nimport { UpdateUserPlanDto } from './dto/update-user-plan.dto';\nimport { UserPlan } from './entities/user-plan.entity';\n\n@Injectable()\nexport class UserPlanService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreateUserPlanDto) {\n    const data: CreateUserPlanDto = {\n      ...dto,\n    };\n\n    return await this.prisma.userPlan.create({ data }).catch(handleError);\n  }\n\n  async findAll() {\n    const userPlan = await this.prisma.userPlan\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n          price: true,\n          accounts: true,\n        },\n      })\n      .catch(handleError);\n\n    if (userPlan.length === 0) {\n      throw new NotFoundException('No user plan not found');\n    }\n\n    return userPlan;\n  }\n\n  async findOne(id: string) {\n    await this.verifyUserPlanIdExist(id);\n    return await this.prisma.userPlan\n      .findUnique({\n        where: { id },\n      })\n      .catch(handleError);\n  }\n\n  async update(id: string, dto: UpdateUserPlanDto) {\n    await this.verifyUserPlanIdExist(id);\n\n    const data: Partial = { ...dto };\n\n    return await this.prisma.userPlan\n      .update({\n        where: { id },\n        data,\n      })\n      .catch(handleError);\n  }\n\n  async delete(id: string) {\n    await this.verifyUserPlanIdExist(id);\n    await this.prisma.userPlan.delete({ where: { id } }).catch(handleError);\n  }\n\n  async verifyUserPlanIdExist(userPlanId: string) {\n    const userPlan = await this.prisma.userPlan.findUnique({\n      where: { id: userPlanId },\n    });\n\n    if (!userPlan) {\n      throw new NotFoundException('User plan not found');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileId.html":{"url":"classes/UserProfileId.html","title":"class - UserProfileId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/logged-profile-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                profileId\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        profileId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/logged-profile-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/logged-profile-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsUUID } from 'class-validator';\nimport { User } from 'src/user/entities/user.entity';\n\nexport class UserProfileId {\n  user: User;\n\n  @IsUUID()\n  profileId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteMyAccount\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findMyAccount\n                            \n                            \n                                    Async\n                                findOneUser\n                            \n                            \n                                    Async\n                                updateMyAccount\n                            \n                            \n                                    Async\n                                updateMyPlan\n                            \n                            \n                                    Async\n                                verifyUserPlanExist\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMyAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMyAccount(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findMyAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    findMyAccount(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUser(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMyAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMyAccount(userId: string, dto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMyPlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMyPlan(userId: string, dto: UpdatePlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyUserPlanExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyUserPlanExist(userPlanId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userPlanId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { verifyConfirmPassword } from 'src/utils/confirm-password.ultil';\nimport { handleError } from 'src/utils/handle-error.util';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdatePlanDto } from './dto/update-plan.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreateUserDto) {\n    verifyConfirmPassword(dto.password, dto.confirmPassword);\n    await this.verifyUserPlanExist(dto.userPlanId);\n    delete dto.confirmPassword;\n    const data: Prisma.UserCreateInput = {\n      name: dto.name,\n      cpf: dto.cpf,\n      email: dto.email,\n      password: await bcrypt.hash(dto.password, 10),\n      userPlan: {\n        connect: {\n          id: dto.userPlanId,\n        },\n      },\n      userCategory: {\n        connect: {\n          name: 'user',\n        },\n      },\n    };\n\n    return await this.prisma.user\n      .create({\n        data,\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          userPlan: {\n            select: {\n              name: true,\n              accounts: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async findAll() {\n    const allUsers = await this.prisma.user\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n          email: true,\n        },\n      })\n      .catch(handleError);\n\n    if (allUsers.length === 0) {\n      throw new NotFoundException('No a users found');\n    }\n\n    return allUsers;\n  }\n\n  async findById(userId: string) {\n    const record = await this.prisma.user\n      .findUnique({\n        where: { id: userId },\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          userPlan: {\n            select: {\n              name: true,\n              accounts: true,\n            },\n          },\n          profiles: {\n            select: {\n              name: true,\n              image: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n\n    if (!record) {\n      throw new NotFoundException(`Record with Id '${userId}' not found!`);\n    }\n\n    return record;\n  }\n\n  async findMyAccount(userId: string) {\n    return await this.findById(userId);\n  }\n\n  async findOneUser(id: string) {\n    return await this.findById(id);\n  }\n\n  async updateMyAccount(userId: string, dto: UpdateUserDto) {\n    if (dto.password) {\n      verifyConfirmPassword(dto.password, dto.confirmPassword);\n    }\n    delete dto.confirmPassword;\n\n    await this.findById(userId);\n\n    const data: Partial = { ...dto };\n\n    if (data.password) {\n      data.password = await bcrypt.hash(data.password, 10);\n    }\n\n    return await this.prisma.user\n      .update({\n        where: { id: userId },\n        data,\n        select: {\n          id: true,\n          name: true,\n          email: true,\n          cpf: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async updateMyPlan(userId: string, dto: UpdatePlanDto) {\n    await this.findById(userId);\n    await this.verifyUserPlanExist(dto.userPlanId);\n\n    const data: Partial = { ...dto };\n\n    return await this.prisma.user\n      .update({\n        where: { id: userId },\n        data,\n        select: {\n          id: true,\n          name: true,\n          userPlan: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n      })\n      .catch(handleError);\n  }\n\n  async deleteMyAccount(userId: string) {\n    await this.findById(userId);\n    await this.prisma.user.delete({ where: { id: userId } }).catch(handleError);\n  }\n\n  async deleteUser(id: string) {\n    await this.findById(id);\n    await this.prisma.user.delete({ where: { id } }).catch(handleError);\n  }\n\n  async verifyUserPlanExist(userPlanId: string) {\n    const plan = await this.prisma.userPlan.findUnique({\n      where: { id: userPlanId },\n    });\n\n    if (!plan) {\n      throw new NotFoundException('User plan ID not found');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog, and this project adheres\nto Semantic Versioning.\n[Unreleased]\n[1.0.0] - 2022-07-18\nAdded\n\ndoc: adding description in swagger\nfeat(playlist): implemetn verifyProfileIdInToken\nfeat(playlist): implement @Length and @db.VarChar\ndoc: adding description in swagger\nfeat: implement files build\nfeat(category): edit name routes\nfeat(song): implement @Length and @db.VarChar\nstyle: change id for ID\nfeat(profile-favorite-song): error handling\nfeat(song): change in update song\nfeat(schema playlist): @@unique([categoryId, songId])\nfeat(song): remove albumId and categoryId\nfeat(song): implement categoryIdExist and albumIdExist\nfeat(song): implement @Length and @db.VarChar\n\nChanged\n\ndoc: change description in swagger\nfix(auth): correction in validation\n\n[0.3.0] - 2022-07-16\nAdded\n\nfeat(album): implement findOneAlbumInArtist and remove findAll\nfeat(prisma): implement onDelete: Cascade and SetNull\nchore(prisma): implement previewFeature\nstyle: optimize imports\nfeat(artist): implement treatment of errors\n\nChanged\n\nfix(country): change name route\n\nRemove\n\nfix: remove @db.VarChar in password\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing\nWhen contributing to this repository, please first discuss the change you wish to make via issue, email, or any other\nmethod with the owners of this repository before making a change.\nPlease note we have a code of conduct, please follow it in all your interactions with the project.\nPull Request Process\n\nEnsure any install or build dependencies are removed before the end of the layer when doing a build.\nUpdate the README.md with details of changes to the interface, this includes new environment variables, exposed\nports, useful file locations and container parameters.\nIncrease the version numbers in any examples files and the README.md to the new version that this Pull Request would\nrepresent. The versioning scheme we use is SemVer.\nYou may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have\npermission to do that, you may request the second reviewer to merge it for you.\n\nCode of Conduct\nOur Pledge\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making\nparticipation in our project and our community a harassment-free experience for everyone, regardless of age, body size,\ndisability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race,\nreligion, or sexual identity and orientation.\nOur Standards\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\n\nOur Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take\nappropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits,\nissues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any\ncontributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\nScope\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the\nproject or its community. Examples of representing a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed representative at an online or offline\nevent. Representation of a project may be further defined and clarified by project maintainers.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team\nat [INSERT EMAIL ADDRESS]. All complaints will be reviewed and investigated and will result in a response that is deemed\nnecessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to\nthe reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent\nrepercussions as determined by other members of the project's leadership.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available\nat http://contributor-covenant.org/version/1/4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/admin/dto/create-admin.dto.ts\n            \n            class\n            CreateAdminDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/admin/dto/update-managerAdmin.dto.ts\n            \n            class\n            UpdateAdminDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/album/album.controller.ts\n            \n            controller\n            AlbumController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/album/album.service.ts\n            \n            injectable\n            AlbumService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/album/dto/create-album.dto.ts\n            \n            class\n            CreateAlbumDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/album/dto/update-album.dto.ts\n            \n            class\n            UpdateAlbumDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/album/entities/album.entity.ts\n            \n            class\n            Album\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/artist/artist.controller.ts\n            \n            controller\n            ArtistController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/artist/artist.service.ts\n            \n            injectable\n            ArtistService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/artist/dto/create-artist.dto.ts\n            \n            class\n            CreateArtistDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/artist/dto/update-artist.dto.ts\n            \n            class\n            UpdateArtistDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/artist/entities/artist.entity.ts\n            \n            class\n            Artist\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/logged-profile-type.ts\n            \n            class\n            UserProfileId\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-admin.dto.ts\n            \n            class\n            LoginAdminDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-artist.dto.ts\n            \n            class\n            LoginArtistDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-profile.dto.ts\n            \n            class\n            LoginProfileDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user-response.dto.ts\n            \n            class\n            LoginUserResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/logged-admin.decorator.ts\n            \n            variable\n            LoggedAdmin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/logged-artist.decorator.ts\n            \n            variable\n            LoggedArtist\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/logged-manager.decorator.ts\n            \n            variable\n            LoggedManager\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/logged-user.decorator.ts\n            \n            variable\n            LoggedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/entities/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/country/country,controller.ts\n            \n            controller\n            CountryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/country/country.service.ts\n            \n            injectable\n            CountryService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/country/dto/create-country.dto.ts\n            \n            class\n            CreateCountryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/country/dto/update-country.dto.ts\n            \n            class\n            UpdateCountryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/country/entities/country,entity.ts\n            \n            class\n            Country\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/home-page/dto/search.dto.ts\n            \n            class\n            SearchDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/home-page/home-page.controller.ts\n            \n            controller\n            HomePageController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/home-page/home-page.service.ts\n            \n            injectable\n            HomePageService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/playlist/dto/create-playlist-song.dto.ts\n            \n            class\n            AddSongPlaylistDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/playlist/dto/create-playlist.dto.ts\n            \n            class\n            CreatePlaylistDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/playlist/dto/update-playlist.dto.ts\n            \n            class\n            UpdatePlaylistDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/playlist/entities/playlist.entity.ts\n            \n            class\n            Playlist\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/playlist/playlist.controller.ts\n            \n            controller\n            PlaylistController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/playlist/playlist.service.ts\n            \n            injectable\n            PlaylistService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed.ts\n            \n            variable\n            seeds\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed/01-user-category.ts\n            \n            variable\n            userCategory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed/01-user-category.ts\n            \n            variable\n            userCategorys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed/02-country.ts\n            \n            variable\n            country\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed/02-country.ts\n            \n            variable\n            countrys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed/03-user-plan.ts\n            \n            variable\n            userPlan\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed/03-user-plan.ts\n            \n            variable\n            userPlans\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed/04-manager-admin.ts\n            \n            variable\n            admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed/04-manager-admin.ts\n            \n            variable\n            admins\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed/05-music-categories.ts\n            \n            variable\n            musicCategorie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/seed/05-music-categories.ts\n            \n            variable\n            musicCategories\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profile-favorite-song/dto/create-profile-favorite-song.dto.ts\n            \n            class\n            CreateProfileFavoriteSongDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/profile-favorite-song/entities/profile-favorite-song.entity.ts\n            \n            class\n            ProfileFavoriteSong\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profile-favorite-song/profile-favorite-song.controller.ts\n            \n            controller\n            ProfileFavoriteSongController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/profile-favorite-song/profile-favorite-song.service.ts\n            \n            injectable\n            ProfileFavoriteSongService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/profile/dto/create-profile.dto.ts\n            \n            class\n            CreateProfileDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/profile/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profile/entities/profile.entity.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/song/dto/create-song.dto.ts\n            \n            class\n            CreateSongDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/song/dto/update-song.dto.ts\n            \n            class\n            UpdateSongDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/song/entities/song.entity.ts\n            \n            class\n            Music\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/song/song.controller.ts\n            \n            controller\n            SongController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/song/song.service.ts\n            \n            injectable\n            SongService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/user-plan/dto/create-user-plan.dto.ts\n            \n            class\n            CreateUserPlanDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user-plan/dto/update-user-plan.dto.ts\n            \n            class\n            UpdateUserPlanDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-plan/entities/user-plan.entity.ts\n            \n            class\n            UserPlan\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user-plan/user-plan.controller.ts\n            \n            controller\n            UserPlanController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user-plan/user-plan.service.ts\n            \n            injectable\n            UserPlanService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/update-plan.dto.ts\n            \n            class\n            UpdatePlanDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/utils/confirm-password.ultil.ts\n            \n            variable\n            verifyConfirmPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/handle-error.util.ts\n            \n            variable\n            handleError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/verifyProfileIdInToken.ts\n            \n            variable\n            verifyProfileIdInToken\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : ^3.15.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSpotify Server \nEste projeto foi desenvolvido no quinto módulo do curso de back-end da Blue EdTech com foco em aprimorar nossas habilidades em criar uma API que utilize TypeScript, NestJs, Prisma ORM e PostgreSQL. A presente API tem como objetivo que um usuário utilize de funcionalidades parecidas com as do Spotify e também possa criar perfis, dependendo do plano em que ele \"assina\". Artistas também tem suas próprias funcionalidades. Além disso também é possível que administradores possam gerir a plataforma.\nPré-requisitos\nÉ imprescindível que você tenha instalado em seu computador o NodeJs e o PostgreSQL para que possa executar e testar este projeto.\n\nNode - https://nodejs.org/en/download/\nPostgreS - https://www.postgresql.org/download/\n\nInstalação\n Exemplo:\n Clone esse projeto em seu computador com o comando:\n    git clone [https://github.com/mlucasdev/spotify-server] Acesse a pasta do projeto seu terminal:\n    cd [spotfy-server] Já pasta da aplicação em seu terminal, digite o seguinte comando:\n    npm install Crie um arquivo '.env' e preencha com as variáveis do arquivo '.env.example'\nDATABASE_URL=\"postgresql://[nome do usuário no postgres]:[senha do usuário]@localhost:[porta em que seu banco de dados está rodando, ex: '5432']/spotify-server\"JWT_SECRET=\"klsA92n9LWS9bfjs128$%\"Execução\nEsse é talvez o tópico mais importante, faça com atenção.\nAtravés das informações especificadas nele, outras pessoas poderam visualizar e testar o funcionamento da sua aplicação.\nApós ter configurado o projeto e ter aguardado a instalação das dependencias de desenvolvimento, execute o comando:\n     npm run start Caso queira que o projeto rode automaticamente após fazer alguma alteração no código execute o comando:\n    npm run start:dev Para criar as tabelas no banco de dados execute o comando:\n    npx prisma db push A aplicação estará disponível para visualização em seu navegador, caso isso não aconteça automaticamente abre o navegador no seguinte endereço: localhost:3006/api\nFuncionalidades\n\nComo usuário, você tera acesso as músicas e aos álbuns criadas pelos artistas e também poderá criar playlists, favoritar músicas e playlists de outros usuários.\n\nUm admin só pode ser criado por um manager e ele poderá gerir a plataforma.\n\nComo artista, você poderá publicar suas músicas e criar álbuns.\n\n\n \n\n\n\nContribuições\nPara contribuir com os autores desse projeto, você pode nos indicar para uma vaga na empresa que você trabalha. #contrataagente\nAutores\n\nGustavo Martins - Desenvolvedor e Idealizador do Projeto - Github | Linkedin\n\nLucas Marques - Desenvolvedor e Idealizador do Projeto - Github | Linkedin\n\n\nLicença\nGeneral Public License GNU.\nAgradecimentos\nAgradecemos a Blue EdTech pelo ensinamento e oportunidade de podermos colocar em prática tudo que aprendemos nos módulos passados. Agradecemos também aos professores Leo Ruiz, Marcus Silva e Paulo Salvatore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n                        Preamble  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nUse with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n  Copyright (C)   \nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.The hypothetical commands show w' and show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\nhttps://www.gnu.org/licenses/.\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\nhttps://www.gnu.org/licenses/why-not-lgpl.html.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AlbumModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArtistModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomePageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlaylistModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileFavoriteSongModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SongModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserPlanModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AlbumModule\n\n\n\ncluster_AlbumModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArtistModule\n\n\n\ncluster_ArtistModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CountryModule\n\n\n\ncluster_CountryModule_providers\n\n\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_providers\n\n\n\ncluster_PlaylistModule\n\n\n\ncluster_PlaylistModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProfileFavoriteSongModule\n\n\n\ncluster_ProfileFavoriteSongModule_providers\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_SongModule\n\n\n\ncluster_SongModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserPlanModule\n\n\n\ncluster_UserPlanModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nPrismaModule->AdminModule\n\n\n\n\n\nAlbumModule\n\nAlbumModule\n\nAlbumModule -->\n\nPrismaModule->AlbumModule\n\n\n\n\n\nArtistModule\n\nArtistModule\n\nArtistModule -->\n\nPrismaModule->ArtistModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nCountryModule\n\nCountryModule\n\nCountryModule -->\n\nPrismaModule->CountryModule\n\n\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nPrismaModule->HomePageModule\n\n\n\n\n\nPlaylistModule\n\nPlaylistModule\n\nPlaylistModule -->\n\nPrismaModule->PlaylistModule\n\n\n\n\n\nProfileFavoriteSongModule\n\nProfileFavoriteSongModule\n\nProfileFavoriteSongModule -->\n\nPrismaModule->ProfileFavoriteSongModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nPrismaModule->ProfileModule\n\n\n\n\n\nSongModule\n\nSongModule\n\nSongModule -->\n\nPrismaModule->SongModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserPlanModule\n\nUserPlanModule\n\nUserPlanModule -->\n\nPrismaModule->UserPlanModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\nAppModule -->\n\nAlbumModule->AppModule\n\n\n\n\n\nAlbumService\n\nAlbumService\n\nAlbumModule -->\n\nAlbumService->AlbumModule\n\n\n\nAppModule -->\n\nArtistModule->AppModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\nAppModule -->\n\nCountryModule->AppModule\n\n\n\nAppModule -->\n\nHomePageModule->AppModule\n\n\n\nAppModule -->\n\nPlaylistModule->AppModule\n\n\n\nAppModule -->\n\nProfileFavoriteSongModule->AppModule\n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\nAppModule -->\n\nSongModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nAppModule -->\n\nUserPlanModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArtistService\n\nArtistService\n\nArtistModule -->\n\nArtistService->ArtistModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nCountryService\n\nCountryService\n\nCountryModule -->\n\nCountryService->CountryModule\n\n\n\n\n\nHomePageService\n\nHomePageService\n\nHomePageModule -->\n\nHomePageService->HomePageModule\n\n\n\n\n\nPlaylistService\n\nPlaylistService\n\nPlaylistModule -->\n\nPlaylistService->PlaylistModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProfileFavoriteSongService\n\nProfileFavoriteSongService\n\nProfileFavoriteSongModule -->\n\nProfileFavoriteSongService->ProfileFavoriteSongModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nSongService\n\nSongService\n\nSongModule -->\n\nSongService->SongModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserPlanService\n\nUserPlanService\n\nUserPlanModule -->\n\nUserPlanService->UserPlanModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    14 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    41 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nTodo\n\n Business rules for changing plans\n Check email when creating a user\n Recover Password\n\nIn Progress\n\n Check if CPF is valid\n\nDone ✓\n\n Create Documentation Swagger\n Crud Auth\n Crud UserPlan\n Crud Manager - Admin\n Crud User\n Crud Profile\n Crud Artist\n Crud Album\n Crud Music\n Create relation MusicFavorite\n Crud Category\n Create relation CategoryMusic\n Crud Playlist\n Create relation PlaylistMusic\n Create relation PlaylistFavorite\n Admin route create playlist\n Create Seed\n Crud Homepage\n Search by song, artist, playlist and genre\n Create Documentation Compodoc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            admin   (src/.../04-manager-admin.ts)\n                        \n                        \n                            admins   (src/.../04-manager-admin.ts)\n                        \n                        \n                            country   (src/.../02-country.ts)\n                        \n                        \n                            countrys   (src/.../02-country.ts)\n                        \n                        \n                            handleError   (src/.../handle-error.util.ts)\n                        \n                        \n                            LoggedAdmin   (src/.../logged-admin.decorator.ts)\n                        \n                        \n                            LoggedArtist   (src/.../logged-artist.decorator.ts)\n                        \n                        \n                            LoggedManager   (src/.../logged-manager.decorator.ts)\n                        \n                        \n                            LoggedUser   (src/.../logged-user.decorator.ts)\n                        \n                        \n                            musicCategorie   (src/.../05-music-categories.ts)\n                        \n                        \n                            musicCategories   (src/.../05-music-categories.ts)\n                        \n                        \n                            prisma   (src/.../seed.ts)\n                        \n                        \n                            seeds   (src/.../seed.ts)\n                        \n                        \n                            userCategory   (src/.../01-user-category.ts)\n                        \n                        \n                            userCategorys   (src/.../01-user-category.ts)\n                        \n                        \n                            userPlan   (src/.../03-user-plan.ts)\n                        \n                        \n                            userPlans   (src/.../03-user-plan.ts)\n                        \n                        \n                            verifyConfirmPassword   (src/.../confirm-password.ultil.ts)\n                        \n                        \n                            verifyProfileIdInToken   (src/.../verifyProfileIdInToken.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/prisma/seed/04-manager-admin.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        admin\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (prisma: PrismaClient) => {\n  for (const obj of Object.values(admins)) {\n    obj.password = await bcrypt.hash(obj.password, 10);\n    await prisma.admin.upsert({\n      where: { cpf: obj.cpf },\n      update: {},\n      create: {\n        ...obj,\n      },\n    });\n  }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Prisma.AdminCreateInput[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    name: 'Manager',\n    cpf: '153.743.513-15',\n    email: 'manager@manager.com',\n    password: 'User#5678@!',\n    userCategory: {\n      connect: {\n        name: 'manager',\n      },\n    },\n  },\n  {\n    name: 'Admin',\n    cpf: '713.443.513-15',\n    email: 'admin@admin.com',\n    password: 'User#5678@!',\n    userCategory: {\n      connect: {\n        name: 'admin',\n      },\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/prisma/seed/02-country.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (prisma: PrismaClient) => {\n  for (const obj of Object.values(countrys)) {\n    await prisma.country.upsert({\n      where: { name: obj.name },\n      update: {},\n      create: {\n        ...obj,\n      },\n    });\n  }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countrys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Prisma.CountryCreateInput[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  { name: 'Afghanistan', code: 'AF' },\n  { name: 'Åland Islands', code: 'AX' },\n  { name: 'Albania', code: 'AL' },\n  { name: 'Algeria', code: 'DZ' },\n  { name: 'American Samoa', code: 'AS' },\n  { name: 'AndorrA', code: 'AD' },\n  { name: 'Angola', code: 'AO' },\n  { name: 'Anguilla', code: 'AI' },\n  { name: 'Antarctica', code: 'AQ' },\n  { name: 'Antigua and Barbuda', code: 'AG' },\n  { name: 'Argentina', code: 'AR' },\n  { name: 'Armenia', code: 'AM' },\n  { name: 'Aruba', code: 'AW' },\n  { name: 'Australia', code: 'AU' },\n  { name: 'Austria', code: 'AT' },\n  { name: 'Azerbaijan', code: 'AZ' },\n  { name: 'Bahamas', code: 'BS' },\n  { name: 'Bahrain', code: 'BH' },\n  { name: 'Bangladesh', code: 'BD' },\n  { name: 'Barbados', code: 'BB' },\n  { name: 'Belarus', code: 'BY' },\n  { name: 'Belgium', code: 'BE' },\n  { name: 'Belize', code: 'BZ' },\n  { name: 'Benin', code: 'BJ' },\n  { name: 'Bermuda', code: 'BM' },\n  { name: 'Bhutan', code: 'BT' },\n  { name: 'Bolivia', code: 'BO' },\n  { name: 'Bosnia and Herzegovina', code: 'BA' },\n  { name: 'Botswana', code: 'BW' },\n  { name: 'Bouvet Island', code: 'BV' },\n  { name: 'Brazil', code: 'BR' },\n  { name: 'British Indian Ocean Territory', code: 'IO' },\n  { name: 'Brunei Darussalam', code: 'BN' },\n  { name: 'Bulgaria', code: 'BG' },\n  { name: 'Burkina Faso', code: 'BF' },\n  { name: 'Burundi', code: 'BI' },\n  { name: 'Cambodia', code: 'KH' },\n  { name: 'Cameroon', code: 'CM' },\n  { name: 'Canada', code: 'CA' },\n  { name: 'Cape Verde', code: 'CV' },\n  { name: 'Cayman Islands', code: 'KY' },\n  { name: 'Central African Republic', code: 'CF' },\n  { name: 'Chad', code: 'TD' },\n  { name: 'Chile', code: 'CL' },\n  { name: 'China', code: 'CN' },\n  { name: 'Christmas Island', code: 'CX' },\n  { name: 'Cocos (Keeling) Islands', code: 'CC' },\n  { name: 'Colombia', code: 'CO' },\n  { name: 'Comoros', code: 'KM' },\n  { name: 'Congo', code: 'CG' },\n  { name: 'Congo, The Democratic Republic of the', code: 'CD' },\n  { name: 'Cook Islands', code: 'CK' },\n  { name: 'Costa Rica', code: 'CR' },\n  { name: \"Cote D'Ivoire\", code: 'CI' },\n  { name: 'Croatia', code: 'HR' },\n  { name: 'Cuba', code: 'CU' },\n  { name: 'Cyprus', code: 'CY' },\n  { name: 'Czech Republic', code: 'CZ' },\n  { name: 'Denmark', code: 'DK' },\n  { name: 'Djibouti', code: 'DJ' },\n  { name: 'Dominica', code: 'DM' },\n  { name: 'Dominican Republic', code: 'DO' },\n  { name: 'Ecuador', code: 'EC' },\n  { name: 'Egypt', code: 'EG' },\n  { name: 'El Salvador', code: 'SV' },\n  { name: 'Equatorial Guinea', code: 'GQ' },\n  { name: 'Eritrea', code: 'ER' },\n  { name: 'Estonia', code: 'EE' },\n  { name: 'Ethiopia', code: 'ET' },\n  { name: 'Falkland Islands (Malvinas)', code: 'FK' },\n  { name: 'Faroe Islands', code: 'FO' },\n  { name: 'Fiji', code: 'FJ' },\n  { name: 'Finland', code: 'FI' },\n  { name: 'France', code: 'FR' },\n  { name: 'French Guiana', code: 'GF' },\n  { name: 'French Polynesia', code: 'PF' },\n  { name: 'French Southern Territories', code: 'TF' },\n  { name: 'Gabon', code: 'GA' },\n  { name: 'Gambia', code: 'GM' },\n  { name: 'Georgia', code: 'GE' },\n  { name: 'Germany', code: 'DE' },\n  { name: 'Ghana', code: 'GH' },\n  { name: 'Gibraltar', code: 'GI' },\n  { name: 'Greece', code: 'GR' },\n  { name: 'Greenland', code: 'GL' },\n  { name: 'Grenada', code: 'GD' },\n  { name: 'Guadeloupe', code: 'GP' },\n  { name: 'Guam', code: 'GU' },\n  { name: 'Guatemala', code: 'GT' },\n  { name: 'Guernsey', code: 'GG' },\n  { name: 'Guinea', code: 'GN' },\n  { name: 'Guinea-Bissau', code: 'GW' },\n  { name: 'Guyana', code: 'GY' },\n  { name: 'Haiti', code: 'HT' },\n  { name: 'Heard Island and Mcdonald Islands', code: 'HM' },\n  { name: 'Holy See (Vatican City State)', code: 'VA' },\n  { name: 'Honduras', code: 'HN' },\n  { name: 'Hong Kong', code: 'HK' },\n  { name: 'Hungary', code: 'HU' },\n  { name: 'Iceland', code: 'IS' },\n  { name: 'India', code: 'IN' },\n  { name: 'Indonesia', code: 'ID' },\n  { name: 'Iran, Islamic Republic Of', code: 'IR' },\n  { name: 'Iraq', code: 'IQ' },\n  { name: 'Ireland', code: 'IE' },\n  { name: 'Isle of Man', code: 'IM' },\n  { name: 'Israel', code: 'IL' },\n  { name: 'Italy', code: 'IT' },\n  { name: 'Jamaica', code: 'JM' },\n  { name: 'Japan', code: 'JP' },\n  { name: 'Jersey', code: 'JE' },\n  { name: 'Jordan', code: 'JO' },\n  { name: 'Kazakhstan', code: 'KZ' },\n  { name: 'Kenya', code: 'KE' },\n  { name: 'Kiribati', code: 'KI' },\n  { name: \"Korea, Democratic People'S Republic of\", code: 'KP' },\n  { name: 'Korea, Republic of', code: 'KR' },\n  { name: 'Kuwait', code: 'KW' },\n  { name: 'Kyrgyzstan', code: 'KG' },\n  { name: \"Lao People'S Democratic Republic\", code: 'LA' },\n  { name: 'Latvia', code: 'LV' },\n  { name: 'Lebanon', code: 'LB' },\n  { name: 'Lesotho', code: 'LS' },\n  { name: 'Liberia', code: 'LR' },\n  { name: 'Libyan Arab Jamahiriya', code: 'LY' },\n  { name: 'Liechtenstein', code: 'LI' },\n  { name: 'Lithuania', code: 'LT' },\n  { name: 'Luxembourg', code: 'LU' },\n  { name: 'Macao', code: 'MO' },\n  { name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK' },\n  { name: 'Madagascar', code: 'MG' },\n  { name: 'Malawi', code: 'MW' },\n  { name: 'Malaysia', code: 'MY' },\n  { name: 'Maldives', code: 'MV' },\n  { name: 'Mali', code: 'ML' },\n  { name: 'Malta', code: 'MT' },\n  { name: 'Marshall Islands', code: 'MH' },\n  { name: 'Martinique', code: 'MQ' },\n  { name: 'Mauritania', code: 'MR' },\n  { name: 'Mauritius', code: 'MU' },\n  { name: 'Mayotte', code: 'YT' },\n  { name: 'Mexico', code: 'MX' },\n  { name: 'Micronesia, Federated States of', code: 'FM' },\n  { name: 'Moldova, Republic of', code: 'MD' },\n  { name: 'Monaco', code: 'MC' },\n  { name: 'Mongolia', code: 'MN' },\n  { name: 'Montserrat', code: 'MS' },\n  { name: 'Morocco', code: 'MA' },\n  { name: 'Mozambique', code: 'MZ' },\n  { name: 'Myanmar', code: 'MM' },\n  { name: 'Namibia', code: 'NA' },\n  { name: 'Nauru', code: 'NR' },\n  { name: 'Nepal', code: 'NP' },\n  { name: 'Netherlands', code: 'NL' },\n  { name: 'Netherlands Antilles', code: 'AN' },\n  { name: 'New Caledonia', code: 'NC' },\n  { name: 'New Zealand', code: 'NZ' },\n  { name: 'Nicaragua', code: 'NI' },\n  { name: 'Niger', code: 'NE' },\n  { name: 'Nigeria', code: 'NG' },\n  { name: 'Niue', code: 'NU' },\n  { name: 'Norfolk Island', code: 'NF' },\n  { name: 'Northern Mariana Islands', code: 'MP' },\n  { name: 'Norway', code: 'NO' },\n  { name: 'Oman', code: 'OM' },\n  { name: 'Pakistan', code: 'PK' },\n  { name: 'Palau', code: 'PW' },\n  { name: 'Palestinian Territory, Occupied', code: 'PS' },\n  { name: 'Panama', code: 'PA' },\n  { name: 'Papua New Guinea', code: 'PG' },\n  { name: 'Paraguay', code: 'PY' },\n  { name: 'Peru', code: 'PE' },\n  { name: 'Philippines', code: 'PH' },\n  { name: 'Pitcairn', code: 'PN' },\n  { name: 'Poland', code: 'PL' },\n  { name: 'Portugal', code: 'PT' },\n  { name: 'Puerto Rico', code: 'PR' },\n  { name: 'Qatar', code: 'QA' },\n  { name: 'Reunion', code: 'RE' },\n  { name: 'Romania', code: 'RO' },\n  { name: 'Russian Federation', code: 'RU' },\n  { name: 'RWANDA', code: 'RW' },\n  { name: 'Saint Helena', code: 'SH' },\n  { name: 'Saint Kitts and Nevis', code: 'KN' },\n  { name: 'Saint Lucia', code: 'LC' },\n  { name: 'Saint Pierre and Miquelon', code: 'PM' },\n  { name: 'Saint Vincent and the Grenadines', code: 'VC' },\n  { name: 'Samoa', code: 'WS' },\n  { name: 'San Marino', code: 'SM' },\n  { name: 'Sao Tome and Principe', code: 'ST' },\n  { name: 'Saudi Arabia', code: 'SA' },\n  { name: 'Senegal', code: 'SN' },\n  { name: 'Serbia and Montenegro', code: 'CS' },\n  { name: 'Seychelles', code: 'SC' },\n  { name: 'Sierra Leone', code: 'SL' },\n  { name: 'Singapore', code: 'SG' },\n  { name: 'Slovakia', code: 'SK' },\n  { name: 'Slovenia', code: 'SI' },\n  { name: 'Solomon Islands', code: 'SB' },\n  { name: 'Somalia', code: 'SO' },\n  { name: 'South Africa', code: 'ZA' },\n  { name: 'South Georgia and the South Sandwich Islands', code: 'GS' },\n  { name: 'Spain', code: 'ES' },\n  { name: 'Sri Lanka', code: 'LK' },\n  { name: 'Sudan', code: 'SD' },\n  { name: 'Suriname', code: 'SR' },\n  { name: 'Svalbard and Jan Mayen', code: 'SJ' },\n  { name: 'Swaziland', code: 'SZ' },\n  { name: 'Sweden', code: 'SE' },\n  { name: 'Switzerland', code: 'CH' },\n  { name: 'Syrian Arab Republic', code: 'SY' },\n  { name: 'Taiwan, Province of China', code: 'TW' },\n  { name: 'Tajikistan', code: 'TJ' },\n  { name: 'Tanzania, United Republic of', code: 'TZ' },\n  { name: 'Thailand', code: 'TH' },\n  { name: 'Timor-Leste', code: 'TL' },\n  { name: 'Togo', code: 'TG' },\n  { name: 'Tokelau', code: 'TK' },\n  { name: 'Tonga', code: 'TO' },\n  { name: 'Trinidad and Tobago', code: 'TT' },\n  { name: 'Tunisia', code: 'TN' },\n  { name: 'Turkey', code: 'TR' },\n  { name: 'Turkmenistan', code: 'TM' },\n  { name: 'Turks and Caicos Islands', code: 'TC' },\n  { name: 'Tuvalu', code: 'TV' },\n  { name: 'Uganda', code: 'UG' },\n  { name: 'Ukraine', code: 'UA' },\n  { name: 'United Arab Emirates', code: 'AE' },\n  { name: 'United Kingdom', code: 'GB' },\n  { name: 'United States', code: 'US' },\n  { name: 'United States Minor Outlying Islands', code: 'UM' },\n  { name: 'Uruguay', code: 'UY' },\n  { name: 'Uzbekistan', code: 'UZ' },\n  { name: 'Vanuatu', code: 'VU' },\n  { name: 'Venezuela', code: 'VE' },\n  { name: 'Viet Nam', code: 'VN' },\n  { name: 'Virgin Islands, British', code: 'VG' },\n  { name: 'Virgin Islands, U.S.', code: 'VI' },\n  { name: 'Wallis and Futuna', code: 'WF' },\n  { name: 'Western Sahara', code: 'EH' },\n  { name: 'Yemen', code: 'YE' },\n  { name: 'Zambia', code: 'ZM' },\n  { name: 'Zimbabwe', code: 'ZW' },\n]\n                    \n                \n\n\n        \n    \n\n    src/utils/handle-error.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (error: Error): undefined => {\n  const errorLines = error.message?.split('\\n');\n  const lastErrorLine = errorLines[errorLines.length - 1]?.trim();\n\n  if (!lastErrorLine) {\n    console.error(error);\n  }\n\n  throw new UnprocessableEntityException(\n    lastErrorLine || 'Algum erro ocorreu ao executar a operação.',\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/logged-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LoggedAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n  const admin = request.user;\n\n  if (!admin) {\n    throw new UnauthorizedException('User not found or not authorized!');\n  }\n\n  if (\n    admin.userCategoryName !== 'admin' &&\n    admin.userCategoryName !== 'manager'\n  ) {\n    throw new UnauthorizedException(\n      'User does not have permission to access this route!',\n    );\n  }\n\n  return admin;\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/logged-artist.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LoggedArtist\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n  const artist = request.user;\n\n  if (!artist) {\n    throw new UnauthorizedException('User not found or not authorized!');\n  }\n\n  if (artist.userCategoryName !== 'artist') {\n    throw new UnauthorizedException(\n      'User does not have permission to access this route!',\n    );\n  }\n\n  return artist;\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/logged-manager.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LoggedManager\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const manager = request.user;\n\n    if (!manager) {\n      throw new UnauthorizedException('User not found or not authorized!');\n    }\n\n    if (manager.userCategoryName !== 'manager') {\n      throw new UnauthorizedException(\n        'User does not have pessssrmission to access this route!',\n      );\n    }\n\n    return manager;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/logged-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LoggedUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n  const userObject = request.user;\n\n  if (\n    userObject.userCategoryName === 'artist' ||\n    userObject.userCategoryName === 'admin' ||\n    userObject.userCategoryName === 'manager'\n  ) {\n    throw new UnauthorizedException(\n      'User does not have permission to access this route',\n    );\n  }\n\n  if (userObject.user.userCategoryName === 'user') {\n    delete userObject.user.password;\n\n    return userObject;\n  } else {\n    throw new UnauthorizedException(\n      'User does not have permission to access this route',\n    );\n  }\n})\n                    \n                \n\n\n        \n    \n\n    src/prisma/seed/05-music-categories.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        musicCategorie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (prisma: PrismaClient) => {\n  for (const obj of Object.values(musicCategories)) {\n    await prisma.category.upsert({\n      where: { name: obj.name },\n      update: {},\n      create: {\n        ...obj,\n      },\n    });\n  }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        musicCategories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Prisma.CategoryCreateInput[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    name: 'Axé',\n  },\n  {\n    name: 'Blues',\n  },\n  {\n    name: 'Clássica',\n  },\n  {\n    name: 'Country',\n  },\n  {\n    name: 'Eletrônica',\n  },\n  {\n    name: 'Forró',\n  },\n  {\n    name: 'Funk',\n  },\n  {\n    name: 'Gospel',\n  },\n  {\n    name: 'Hip Hop',\n  },\n  {\n    name: 'Instrumental',\n  },\n  {\n    name: 'Jazz',\n  },\n  {\n    name: 'K-pop/K-rock',\n  },\n  {\n    name: 'Lo-fi',\n  },\n  {\n    name: 'MPB',\n  },\n  {\n    name: 'Pagode',\n  },\n  {\n    name: 'Psicodelia',\n  },\n  {\n    name: 'Pop',\n  },\n  {\n    name: 'Rap',\n  },\n  {\n    name: 'Reggae',\n  },\n  {\n    name: 'Rock',\n  },\n  {\n    name: 'Samba',\n  },\n  {\n    name: 'Sertanejo',\n  },\n  {\n    name: 'Trap',\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seeds\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.entries(seed)\n                    \n                \n\n\n        \n    \n\n    src/prisma/seed/01-user-category.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userCategory\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (prisma: PrismaClient) => {\n  for (const obj of Object.values(userCategorys)) {\n    await prisma.userCategory.upsert({\n      where: { name: obj.name },\n      update: {},\n      create: {\n        ...obj,\n      },\n    });\n  }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userCategorys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserCategoryCreateInput[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    name: 'manager',\n  },\n  {\n    name: 'admin',\n  },\n  {\n    name: 'user',\n  },\n  {\n    name: 'artist',\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/prisma/seed/03-user-plan.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userPlan\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (prisma: PrismaClient) => {\n  for (const obj of Object.values(userPlans)) {\n    await prisma.userPlan.upsert({\n      where: { name: obj.name },\n      update: {},\n      create: {\n        ...obj,\n      },\n    });\n  }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userPlans\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserPlanCreateInput[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    name: 'Individual',\n    price: 19.90,\n    accounts: 1,\n    description:\n      'The most basic subscription plan gives access to the Premium service for a Spotify account. There are no ads, users can download music for offline playback, and playback is unlimited. For new subscribers, the platform offers the first month for free.',\n  },\n  {\n    name: 'University',\n    price: 8.50,\n    accounts: 1,\n    description:\n      'Spotify makes a version of the individual plan available for students at higher education institutions. During registration, it is necessary to inform data about university education, and the discount is released upon approval. The university plan can be used for twelve consecutive months at a monthly fee of R$8.50 and the benefits offered are the same as those of the individual subscription.',\n  },\n  {\n    name: 'Duo',\n    price: 21.90,\n    accounts: 2,\n    description:\n      'This version of Spotify Premium is aimed at two people, offering the benefits of two Spotify accounts. It is a good option for couples or people who live in the same place. In addition to the already mentioned advantages of the Premium service, the plan offers Duo Mix: a playlist created according to the preferences of each user and automatically updated.',\n  },\n  {\n    name: 'Family',\n    price: 26.90,\n    accounts: 6,\n    description:\n      'Spotify family plan offers up to six Premium accounts. The requirement is that the people benefited are from the same family and reside at the same address, upon proof. The plan brings the previous advantages of the Premium service, Family Mix – automatic playlist according to the family preferences –, explicit music control and the presence of Spotify Kids, a version aimed at children.',\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/utils/confirm-password.ultil.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        verifyConfirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  password: string,\n  confirmPassword: string,\n): void => {\n  if (password !== confirmPassword) {\n    throw new BadRequestException('The passwords entered are not the same!');\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/verifyProfileIdInToken.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        verifyProfileIdInToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (profileId: string) => {\n  if (!profileId) {\n    throw new BadRequestException('Profile ID not informed in the token');\n  }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
